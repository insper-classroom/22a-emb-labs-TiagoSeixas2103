
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007704  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407704  00407704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040770c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000304  204009d0  004080dc  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20400cd4  004083e0  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cd8  0040a3e4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b8b3  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e4b  00000000  00000000  0003c30a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006b56  00000000  00000000  00040155  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a80  00000000  00000000  00046cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae0  00000000  00000000  0004772b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002256e  00000000  00000000  0004820b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000108ba  00000000  00000000  0006a779  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009096a  00000000  00000000  0007b033  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000236c  00000000  00000000  0010b9a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2c 40 20 75 17 40 00 71 17 40 00 71 17 40 00     .,@ u.@.q.@.q.@.
  400010:	71 17 40 00 71 17 40 00 71 17 40 00 00 00 00 00     q.@.q.@.q.@.....
	...
  40002c:	71 17 40 00 71 17 40 00 00 00 00 00 71 17 40 00     q.@.q.@.....q.@.
  40003c:	71 17 40 00 71 17 40 00 71 17 40 00 c5 1c 40 00     q.@.q.@.q.@...@.
  40004c:	79 1c 40 00 71 17 40 00 71 17 40 00 71 17 40 00     y.@.q.@.q.@.q.@.
  40005c:	71 17 40 00 71 17 40 00 00 00 00 00 d5 12 40 00     q.@.q.@.......@.
  40006c:	e9 12 40 00 fd 12 40 00 71 17 40 00 71 17 40 00     ..@...@.q.@.q.@.
  40007c:	71 17 40 00 11 13 40 00 25 13 40 00 71 17 40 00     q.@...@.%.@.q.@.
  40008c:	71 17 40 00 71 17 40 00 71 17 40 00 71 17 40 00     q.@.q.@.q.@.q.@.
  40009c:	71 17 40 00 75 1b 40 00 71 17 40 00 71 17 40 00     q.@.u.@.q.@.q.@.
  4000ac:	a5 1b 40 00 71 17 40 00 71 17 40 00 71 17 40 00     ..@.q.@.q.@.q.@.
  4000bc:	71 17 40 00 71 17 40 00 71 17 40 00 71 17 40 00     q.@.q.@.q.@.q.@.
  4000cc:	71 17 40 00 00 00 00 00 71 17 40 00 00 00 00 00     q.@.....q.@.....
  4000dc:	71 17 40 00 71 17 40 00 71 17 40 00 71 17 40 00     q.@.q.@.q.@.q.@.
  4000ec:	71 17 40 00 71 17 40 00 71 17 40 00 71 17 40 00     q.@.q.@.q.@.q.@.
  4000fc:	71 17 40 00 71 17 40 00 71 17 40 00 71 17 40 00     q.@.q.@.q.@.q.@.
  40010c:	71 17 40 00 71 17 40 00 00 00 00 00 00 00 00 00     q.@.q.@.........
  40011c:	00 00 00 00 71 17 40 00 71 17 40 00 71 17 40 00     ....q.@.q.@.q.@.
  40012c:	71 17 40 00 71 17 40 00 00 00 00 00 71 17 40 00     q.@.q.@.....q.@.
  40013c:	71 17 40 00                                         q.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040770c 	.word	0x0040770c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040770c 	.word	0x0040770c
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040770c 	.word	0x0040770c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400344:	b4f0      	push	{r4, r5, r6, r7}
  400346:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400348:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40034a:	68c4      	ldr	r4, [r0, #12]
  40034c:	42a5      	cmp	r5, r4
  40034e:	d003      	beq.n	400358 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400350:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400352:	68c4      	ldr	r4, [r0, #12]
  400354:	42ac      	cmp	r4, r5
  400356:	d1fb      	bne.n	400350 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400358:	b199      	cbz	r1, 400382 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40035a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40035e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400362:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400366:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40036a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40036e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400372:	f004 000f 	and.w	r0, r4, #15
  400376:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40037a:	2564      	movs	r5, #100	; 0x64
  40037c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400380:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400382:	b142      	cbz	r2, 400396 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400384:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400388:	0081      	lsls	r1, r0, #2
  40038a:	4408      	add	r0, r1
  40038c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400390:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400394:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400396:	b143      	cbz	r3, 4003aa <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400398:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40039c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4003a0:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4003a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4003a8:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4003aa:	b116      	cbz	r6, 4003b2 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4003ac:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4003b0:	6034      	str	r4, [r6, #0]
	}
}
  4003b2:	bcf0      	pop	{r4, r5, r6, r7}
  4003b4:	4770      	bx	lr
	...

004003b8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4003b8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003ba:	4d2a      	ldr	r5, [pc, #168]	; (400464 <rtc_set_date+0xac>)
  4003bc:	fba5 4603 	umull	r4, r6, r5, r3
  4003c0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4003c2:	9c03      	ldr	r4, [sp, #12]
  4003c4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4003ce:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003d6:	fba5 6402 	umull	r6, r4, r5, r2
  4003da:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4003e4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4003ec:	4b1e      	ldr	r3, [pc, #120]	; (400468 <rtc_set_date+0xb0>)
  4003ee:	fba3 4301 	umull	r4, r3, r3, r1
  4003f2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4003f8:	4b1c      	ldr	r3, [pc, #112]	; (40046c <rtc_set_date+0xb4>)
  4003fa:	fba3 4301 	umull	r4, r3, r3, r1
  4003fe:	095b      	lsrs	r3, r3, #5
  400400:	fba5 6403 	umull	r6, r4, r5, r3
  400404:	08e4      	lsrs	r4, r4, #3
  400406:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40040a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40040e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400410:	fba5 4301 	umull	r4, r3, r5, r1
  400414:	08db      	lsrs	r3, r3, #3
  400416:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40041a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400422:	fba5 1503 	umull	r1, r5, r5, r3
  400426:	08ed      	lsrs	r5, r5, #3
  400428:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40042c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400430:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400434:	6983      	ldr	r3, [r0, #24]
  400436:	f013 0f04 	tst.w	r3, #4
  40043a:	d0fb      	beq.n	400434 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40043c:	6803      	ldr	r3, [r0, #0]
  40043e:	f043 0302 	orr.w	r3, r3, #2
  400442:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400444:	6983      	ldr	r3, [r0, #24]
  400446:	f013 0f01 	tst.w	r3, #1
  40044a:	d0fb      	beq.n	400444 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40044c:	2301      	movs	r3, #1
  40044e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400450:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400452:	6803      	ldr	r3, [r0, #0]
  400454:	f023 0302 	bic.w	r3, r3, #2
  400458:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40045a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40045c:	f000 0002 	and.w	r0, r0, #2
  400460:	bc70      	pop	{r4, r5, r6}
  400462:	4770      	bx	lr
  400464:	cccccccd 	.word	0xcccccccd
  400468:	10624dd3 	.word	0x10624dd3
  40046c:	51eb851f 	.word	0x51eb851f

00400470 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  400470:	b430      	push	{r4, r5}
  400472:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400474:	460c      	mov	r4, r1
  400476:	b151      	cbz	r1, 40048e <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400478:	4c12      	ldr	r4, [pc, #72]	; (4004c4 <rtc_set_date_alarm+0x54>)
  40047a:	fba4 1402 	umull	r1, r4, r4, r2
  40047e:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400480:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400484:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400488:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40048a:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40048e:	b15b      	cbz	r3, 4004a8 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400490:	4a0c      	ldr	r2, [pc, #48]	; (4004c4 <rtc_set_date_alarm+0x54>)
  400492:	fba2 3205 	umull	r3, r2, r2, r5
  400496:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400498:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40049c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  4004a0:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  4004a6:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004a8:	6942      	ldr	r2, [r0, #20]
  4004aa:	4b07      	ldr	r3, [pc, #28]	; (4004c8 <rtc_set_date_alarm+0x58>)
  4004ac:	4013      	ands	r3, r2
  4004ae:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4004b0:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004b2:	6942      	ldr	r2, [r0, #20]
  4004b4:	4b05      	ldr	r3, [pc, #20]	; (4004cc <rtc_set_date_alarm+0x5c>)
  4004b6:	4313      	orrs	r3, r2
  4004b8:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4004ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4004bc:	f000 0008 	and.w	r0, r0, #8
  4004c0:	bc30      	pop	{r4, r5}
  4004c2:	4770      	bx	lr
  4004c4:	cccccccd 	.word	0xcccccccd
  4004c8:	7f7fffff 	.word	0x7f7fffff
  4004cc:	80800000 	.word	0x80800000

004004d0 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4004d0:	6980      	ldr	r0, [r0, #24]
}
  4004d2:	4770      	bx	lr

004004d4 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4004d4:	61c1      	str	r1, [r0, #28]
  4004d6:	4770      	bx	lr

004004d8 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <rtt_init+0x10>)
  4004da:	681b      	ldr	r3, [r3, #0]
  4004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4004e0:	4319      	orrs	r1, r3
  4004e2:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	4770      	bx	lr
  4004e8:	204009ec 	.word	0x204009ec

004004ec <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4004ec:	b941      	cbnz	r1, 400500 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4004ee:	4a09      	ldr	r2, [pc, #36]	; (400514 <rtt_sel_source+0x28>)
  4004f0:	6813      	ldr	r3, [r2, #0]
  4004f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4004f6:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4004f8:	6802      	ldr	r2, [r0, #0]
  4004fa:	4313      	orrs	r3, r2
  4004fc:	6003      	str	r3, [r0, #0]
  4004fe:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400500:	4a04      	ldr	r2, [pc, #16]	; (400514 <rtt_sel_source+0x28>)
  400502:	6813      	ldr	r3, [r2, #0]
  400504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400508:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40050a:	6802      	ldr	r2, [r0, #0]
  40050c:	4313      	orrs	r3, r2
  40050e:	6003      	str	r3, [r0, #0]
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	204009ec 	.word	0x204009ec

00400518 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400518:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40051a:	4b03      	ldr	r3, [pc, #12]	; (400528 <rtt_enable_interrupt+0x10>)
  40051c:	681b      	ldr	r3, [r3, #0]
  40051e:	4319      	orrs	r1, r3
  400520:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400522:	6001      	str	r1, [r0, #0]
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	204009ec 	.word	0x204009ec

0040052c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  40052c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40052e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <rtt_disable_interrupt+0x10>)
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400538:	6001      	str	r1, [r0, #0]
  40053a:	4770      	bx	lr
  40053c:	204009ec 	.word	0x204009ec

00400540 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400540:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400542:	6883      	ldr	r3, [r0, #8]
  400544:	429a      	cmp	r2, r3
  400546:	d003      	beq.n	400550 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400548:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40054a:	6883      	ldr	r3, [r0, #8]
  40054c:	4293      	cmp	r3, r2
  40054e:	d1fb      	bne.n	400548 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400550:	4618      	mov	r0, r3
  400552:	4770      	bx	lr

00400554 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400554:	68c0      	ldr	r0, [r0, #12]
}
  400556:	4770      	bx	lr

00400558 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400558:	b570      	push	{r4, r5, r6, lr}
  40055a:	4606      	mov	r6, r0
  40055c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40055e:	6804      	ldr	r4, [r0, #0]
  400560:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400564:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400568:	4809      	ldr	r0, [pc, #36]	; (400590 <rtt_write_alarm_time+0x38>)
  40056a:	4b0a      	ldr	r3, [pc, #40]	; (400594 <rtt_write_alarm_time+0x3c>)
  40056c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40056e:	b92d      	cbnz	r5, 40057c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400570:	f04f 33ff 	mov.w	r3, #4294967295
  400574:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400576:	b924      	cbnz	r4, 400582 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400578:	2000      	movs	r0, #0
  40057a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40057c:	3d01      	subs	r5, #1
  40057e:	6075      	str	r5, [r6, #4]
  400580:	e7f9      	b.n	400576 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400582:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400586:	4802      	ldr	r0, [pc, #8]	; (400590 <rtt_write_alarm_time+0x38>)
  400588:	4b03      	ldr	r3, [pc, #12]	; (400598 <rtt_write_alarm_time+0x40>)
  40058a:	4798      	blx	r3
  40058c:	e7f4      	b.n	400578 <rtt_write_alarm_time+0x20>
  40058e:	bf00      	nop
  400590:	400e1830 	.word	0x400e1830
  400594:	0040052d 	.word	0x0040052d
  400598:	00400519 	.word	0x00400519

0040059c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40059c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40059e:	4b07      	ldr	r3, [pc, #28]	; (4005bc <spi_enable_clock+0x20>)
  4005a0:	4298      	cmp	r0, r3
  4005a2:	d003      	beq.n	4005ac <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <spi_enable_clock+0x24>)
  4005a6:	4298      	cmp	r0, r3
  4005a8:	d004      	beq.n	4005b4 <spi_enable_clock+0x18>
  4005aa:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005ac:	2015      	movs	r0, #21
  4005ae:	4b05      	ldr	r3, [pc, #20]	; (4005c4 <spi_enable_clock+0x28>)
  4005b0:	4798      	blx	r3
  4005b2:	bd08      	pop	{r3, pc}
  4005b4:	202a      	movs	r0, #42	; 0x2a
  4005b6:	4b03      	ldr	r3, [pc, #12]	; (4005c4 <spi_enable_clock+0x28>)
  4005b8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4005ba:	e7f6      	b.n	4005aa <spi_enable_clock+0xe>
  4005bc:	40008000 	.word	0x40008000
  4005c0:	40058000 	.word	0x40058000
  4005c4:	00401459 	.word	0x00401459

004005c8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4005c8:	6843      	ldr	r3, [r0, #4]
  4005ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4005ce:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4005d0:	6843      	ldr	r3, [r0, #4]
  4005d2:	0409      	lsls	r1, r1, #16
  4005d4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4005d8:	4319      	orrs	r1, r3
  4005da:	6041      	str	r1, [r0, #4]
  4005dc:	4770      	bx	lr

004005de <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4005de:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4005e0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4005e4:	6905      	ldr	r5, [r0, #16]
  4005e6:	f015 0f02 	tst.w	r5, #2
  4005ea:	d103      	bne.n	4005f4 <spi_write+0x16>
		if (!timeout--) {
  4005ec:	3c01      	subs	r4, #1
  4005ee:	d1f9      	bne.n	4005e4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4005f0:	2001      	movs	r0, #1
  4005f2:	e00c      	b.n	40060e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4005f4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4005f6:	f014 0f02 	tst.w	r4, #2
  4005fa:	d006      	beq.n	40060a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4005fc:	0412      	lsls	r2, r2, #16
  4005fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400602:	4311      	orrs	r1, r2
		if (uc_last) {
  400604:	b10b      	cbz	r3, 40060a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400606:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40060a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40060c:	2000      	movs	r0, #0
}
  40060e:	bc30      	pop	{r4, r5}
  400610:	4770      	bx	lr

00400612 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400612:	b932      	cbnz	r2, 400622 <spi_set_clock_polarity+0x10>
  400614:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400618:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40061a:	f023 0301 	bic.w	r3, r3, #1
  40061e:	6303      	str	r3, [r0, #48]	; 0x30
  400620:	4770      	bx	lr
  400622:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400626:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400628:	f043 0301 	orr.w	r3, r3, #1
  40062c:	6303      	str	r3, [r0, #48]	; 0x30
  40062e:	4770      	bx	lr

00400630 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400630:	b932      	cbnz	r2, 400640 <spi_set_clock_phase+0x10>
  400632:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400636:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400638:	f023 0302 	bic.w	r3, r3, #2
  40063c:	6303      	str	r3, [r0, #48]	; 0x30
  40063e:	4770      	bx	lr
  400640:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400644:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400646:	f043 0302 	orr.w	r3, r3, #2
  40064a:	6303      	str	r3, [r0, #48]	; 0x30
  40064c:	4770      	bx	lr

0040064e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40064e:	2a04      	cmp	r2, #4
  400650:	d003      	beq.n	40065a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400652:	b16a      	cbz	r2, 400670 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400654:	2a08      	cmp	r2, #8
  400656:	d016      	beq.n	400686 <spi_configure_cs_behavior+0x38>
  400658:	4770      	bx	lr
  40065a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40065e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400660:	f023 0308 	bic.w	r3, r3, #8
  400664:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400666:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400668:	f043 0304 	orr.w	r3, r3, #4
  40066c:	6303      	str	r3, [r0, #48]	; 0x30
  40066e:	4770      	bx	lr
  400670:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400674:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400676:	f023 0308 	bic.w	r3, r3, #8
  40067a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40067c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40067e:	f023 0304 	bic.w	r3, r3, #4
  400682:	6303      	str	r3, [r0, #48]	; 0x30
  400684:	4770      	bx	lr
  400686:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40068a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40068c:	f043 0308 	orr.w	r3, r3, #8
  400690:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400692:	e7e1      	b.n	400658 <spi_configure_cs_behavior+0xa>

00400694 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400694:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400698:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40069a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40069e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4006a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006a2:	431a      	orrs	r2, r3
  4006a4:	630a      	str	r2, [r1, #48]	; 0x30
  4006a6:	4770      	bx	lr

004006a8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4006a8:	1e43      	subs	r3, r0, #1
  4006aa:	4419      	add	r1, r3
  4006ac:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4006b0:	1e43      	subs	r3, r0, #1
  4006b2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4006b4:	bf94      	ite	ls
  4006b6:	b200      	sxthls	r0, r0
		return -1;
  4006b8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4006bc:	4770      	bx	lr

004006be <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4006be:	b17a      	cbz	r2, 4006e0 <spi_set_baudrate_div+0x22>
{
  4006c0:	b410      	push	{r4}
  4006c2:	4614      	mov	r4, r2
  4006c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4006c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4006ce:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4006d0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4006d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4006d6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4006d8:	2000      	movs	r0, #0
}
  4006da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006de:	4770      	bx	lr
        return -1;
  4006e0:	f04f 30ff 	mov.w	r0, #4294967295
  4006e4:	4770      	bx	lr

004006e6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006e6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006e8:	0189      	lsls	r1, r1, #6
  4006ea:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4006ec:	2402      	movs	r4, #2
  4006ee:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4006f0:	f04f 31ff 	mov.w	r1, #4294967295
  4006f4:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4006f6:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4006f8:	605a      	str	r2, [r3, #4]
}
  4006fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006fe:	4770      	bx	lr

00400700 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400700:	0189      	lsls	r1, r1, #6
  400702:	2305      	movs	r3, #5
  400704:	5043      	str	r3, [r0, r1]
  400706:	4770      	bx	lr

00400708 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400708:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40070c:	61ca      	str	r2, [r1, #28]
  40070e:	4770      	bx	lr

00400710 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400710:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400714:	624a      	str	r2, [r1, #36]	; 0x24
  400716:	4770      	bx	lr

00400718 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400718:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40071c:	6a08      	ldr	r0, [r1, #32]
}
  40071e:	4770      	bx	lr

00400720 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400720:	b4f0      	push	{r4, r5, r6, r7}
  400722:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400724:	2402      	movs	r4, #2
  400726:	9401      	str	r4, [sp, #4]
  400728:	2408      	movs	r4, #8
  40072a:	9402      	str	r4, [sp, #8]
  40072c:	2420      	movs	r4, #32
  40072e:	9403      	str	r4, [sp, #12]
  400730:	2480      	movs	r4, #128	; 0x80
  400732:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400736:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400738:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40073a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40073e:	d814      	bhi.n	40076a <tc_find_mck_divisor+0x4a>
  400740:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400742:	42a0      	cmp	r0, r4
  400744:	d217      	bcs.n	400776 <tc_find_mck_divisor+0x56>
  400746:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400748:	af01      	add	r7, sp, #4
  40074a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40074e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400752:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400754:	4284      	cmp	r4, r0
  400756:	d30a      	bcc.n	40076e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400758:	4286      	cmp	r6, r0
  40075a:	d90d      	bls.n	400778 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40075c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40075e:	2d05      	cmp	r5, #5
  400760:	d1f3      	bne.n	40074a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400762:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400764:	b006      	add	sp, #24
  400766:	bcf0      	pop	{r4, r5, r6, r7}
  400768:	4770      	bx	lr
			return 0;
  40076a:	2000      	movs	r0, #0
  40076c:	e7fa      	b.n	400764 <tc_find_mck_divisor+0x44>
  40076e:	2000      	movs	r0, #0
  400770:	e7f8      	b.n	400764 <tc_find_mck_divisor+0x44>
	return 1;
  400772:	2001      	movs	r0, #1
  400774:	e7f6      	b.n	400764 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400776:	2500      	movs	r5, #0
	if (p_uldiv) {
  400778:	b12a      	cbz	r2, 400786 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40077a:	a906      	add	r1, sp, #24
  40077c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400780:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400784:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400786:	2b00      	cmp	r3, #0
  400788:	d0f3      	beq.n	400772 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40078a:	601d      	str	r5, [r3, #0]
	return 1;
  40078c:	2001      	movs	r0, #1
  40078e:	e7e9      	b.n	400764 <tc_find_mck_divisor+0x44>

00400790 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400790:	4b01      	ldr	r3, [pc, #4]	; (400798 <gfx_mono_set_framebuffer+0x8>)
  400792:	6018      	str	r0, [r3, #0]
  400794:	4770      	bx	lr
  400796:	bf00      	nop
  400798:	204009f0 	.word	0x204009f0

0040079c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40079c:	4b02      	ldr	r3, [pc, #8]	; (4007a8 <gfx_mono_framebuffer_put_byte+0xc>)
  40079e:	681b      	ldr	r3, [r3, #0]
  4007a0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4007a4:	5442      	strb	r2, [r0, r1]
  4007a6:	4770      	bx	lr
  4007a8:	204009f0 	.word	0x204009f0

004007ac <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4007ac:	4b02      	ldr	r3, [pc, #8]	; (4007b8 <gfx_mono_framebuffer_get_byte+0xc>)
  4007ae:	681b      	ldr	r3, [r3, #0]
  4007b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4007b4:	5c40      	ldrb	r0, [r0, r1]
  4007b6:	4770      	bx	lr
  4007b8:	204009f0 	.word	0x204009f0

004007bc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4007bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4007c0:	1884      	adds	r4, r0, r2
  4007c2:	2c80      	cmp	r4, #128	; 0x80
  4007c4:	dd02      	ble.n	4007cc <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4007c6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4007ca:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4007cc:	b322      	cbz	r2, 400818 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4007ce:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4007d0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4007d4:	2601      	movs	r6, #1
  4007d6:	fa06 f101 	lsl.w	r1, r6, r1
  4007da:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4007dc:	2b01      	cmp	r3, #1
  4007de:	d01d      	beq.n	40081c <gfx_mono_generic_draw_horizontal_line+0x60>
  4007e0:	2b00      	cmp	r3, #0
  4007e2:	d035      	beq.n	400850 <gfx_mono_generic_draw_horizontal_line+0x94>
  4007e4:	2b02      	cmp	r3, #2
  4007e6:	d117      	bne.n	400818 <gfx_mono_generic_draw_horizontal_line+0x5c>
  4007e8:	3801      	subs	r0, #1
  4007ea:	b2c7      	uxtb	r7, r0
  4007ec:	19d4      	adds	r4, r2, r7
  4007ee:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4007f0:	f8df a090 	ldr.w	sl, [pc, #144]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4007f4:	f04f 0900 	mov.w	r9, #0
  4007f8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4007fc:	4621      	mov	r1, r4
  4007fe:	4628      	mov	r0, r5
  400800:	47d0      	blx	sl
			temp ^= pixelmask;
  400802:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400806:	464b      	mov	r3, r9
  400808:	b2d2      	uxtb	r2, r2
  40080a:	4621      	mov	r1, r4
  40080c:	4628      	mov	r0, r5
  40080e:	47c0      	blx	r8
  400810:	3c01      	subs	r4, #1
  400812:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400814:	42bc      	cmp	r4, r7
  400816:	d1f1      	bne.n	4007fc <gfx_mono_generic_draw_horizontal_line+0x40>
  400818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40081c:	3801      	subs	r0, #1
  40081e:	b2c7      	uxtb	r7, r0
  400820:	19d4      	adds	r4, r2, r7
  400822:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400824:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400828:	f04f 0900 	mov.w	r9, #0
  40082c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400830:	4621      	mov	r1, r4
  400832:	4628      	mov	r0, r5
  400834:	47d0      	blx	sl
			temp |= pixelmask;
  400836:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40083a:	464b      	mov	r3, r9
  40083c:	b2d2      	uxtb	r2, r2
  40083e:	4621      	mov	r1, r4
  400840:	4628      	mov	r0, r5
  400842:	47c0      	blx	r8
  400844:	3c01      	subs	r4, #1
  400846:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400848:	42bc      	cmp	r4, r7
  40084a:	d1f1      	bne.n	400830 <gfx_mono_generic_draw_horizontal_line+0x74>
  40084c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400850:	3801      	subs	r0, #1
  400852:	b2c7      	uxtb	r7, r0
  400854:	19d4      	adds	r4, r2, r7
  400856:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400858:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40085c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40085e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400862:	4621      	mov	r1, r4
  400864:	4628      	mov	r0, r5
  400866:	47c0      	blx	r8
			temp &= ~pixelmask;
  400868:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40086c:	2300      	movs	r3, #0
  40086e:	b2d2      	uxtb	r2, r2
  400870:	4621      	mov	r1, r4
  400872:	4628      	mov	r0, r5
  400874:	47c8      	blx	r9
  400876:	3c01      	subs	r4, #1
  400878:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40087a:	42bc      	cmp	r4, r7
  40087c:	d1f1      	bne.n	400862 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400882:	bf00      	nop
  400884:	00400bad 	.word	0x00400bad
  400888:	00400aa9 	.word	0x00400aa9

0040088c <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  40088c:	2a00      	cmp	r2, #0
  40088e:	d048      	beq.n	400922 <gfx_mono_generic_draw_vertical_line+0x96>
{
  400890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400894:	4614      	mov	r4, r2
  400896:	461f      	mov	r7, r3
  400898:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  40089a:	1e4a      	subs	r2, r1, #1
  40089c:	4422      	add	r2, r4
  40089e:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  4008a0:	4291      	cmp	r1, r2
  4008a2:	d031      	beq.n	400908 <gfx_mono_generic_draw_vertical_line+0x7c>
  4008a4:	2a1f      	cmp	r2, #31
  4008a6:	bf28      	it	cs
  4008a8:	221f      	movcs	r2, #31
  4008aa:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  4008ac:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  4008ae:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  4008b2:	f001 0207 	and.w	r2, r1, #7
  4008b6:	23ff      	movs	r3, #255	; 0xff
  4008b8:	fa03 f202 	lsl.w	r2, r3, r2
  4008bc:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  4008be:	f005 0507 	and.w	r5, r5, #7
  4008c2:	f1c5 0507 	rsb	r5, r5, #7
  4008c6:	fa43 f505 	asr.w	r5, r3, r5
  4008ca:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  4008cc:	4544      	cmp	r4, r8
  4008ce:	d020      	beq.n	400912 <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  4008d0:	463b      	mov	r3, r7
  4008d2:	4601      	mov	r1, r0
  4008d4:	4620      	mov	r0, r4
  4008d6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400924 <gfx_mono_generic_draw_vertical_line+0x98>
  4008da:	47c8      	blx	r9

		while (++y1page < y2page) {
  4008dc:	3401      	adds	r4, #1
  4008de:	45a0      	cmp	r8, r4
  4008e0:	d90a      	bls.n	4008f8 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  4008e2:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4008e6:	463b      	mov	r3, r7
  4008e8:	4652      	mov	r2, sl
  4008ea:	4631      	mov	r1, r6
  4008ec:	4620      	mov	r0, r4
  4008ee:	47c8      	blx	r9
		while (++y1page < y2page) {
  4008f0:	3401      	adds	r4, #1
  4008f2:	b2e4      	uxtb	r4, r4
  4008f4:	45a0      	cmp	r8, r4
  4008f6:	d8f6      	bhi.n	4008e6 <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  4008f8:	463b      	mov	r3, r7
  4008fa:	462a      	mov	r2, r5
  4008fc:	4631      	mov	r1, r6
  4008fe:	4640      	mov	r0, r8
  400900:	4c08      	ldr	r4, [pc, #32]	; (400924 <gfx_mono_generic_draw_vertical_line+0x98>)
  400902:	47a0      	blx	r4
  400904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400908:	461a      	mov	r2, r3
  40090a:	4b07      	ldr	r3, [pc, #28]	; (400928 <gfx_mono_generic_draw_vertical_line+0x9c>)
  40090c:	4798      	blx	r3
		return;
  40090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  400912:	463b      	mov	r3, r7
  400914:	402a      	ands	r2, r5
  400916:	4601      	mov	r1, r0
  400918:	4620      	mov	r0, r4
  40091a:	4c02      	ldr	r4, [pc, #8]	; (400924 <gfx_mono_generic_draw_vertical_line+0x98>)
  40091c:	47a0      	blx	r4
  40091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400922:	4770      	bx	lr
  400924:	00400bb9 	.word	0x00400bb9
  400928:	00400b49 	.word	0x00400b49

0040092c <gfx_mono_generic_draw_rect>:
 * \param[in] color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400930:	4604      	mov	r4, r0
  400932:	460f      	mov	r7, r1
  400934:	4616      	mov	r6, r2
  400936:	4698      	mov	r8, r3
  400938:	f89d 5020 	ldrb.w	r5, [sp, #32]
	gfx_mono_draw_horizontal_line(x, y, width, color);
  40093c:	462b      	mov	r3, r5
  40093e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 400974 <gfx_mono_generic_draw_rect+0x48>
  400942:	47c8      	blx	r9
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
  400944:	f108 31ff 	add.w	r1, r8, #4294967295
  400948:	4439      	add	r1, r7
  40094a:	462b      	mov	r3, r5
  40094c:	4632      	mov	r2, r6
  40094e:	b2c9      	uxtb	r1, r1
  400950:	4620      	mov	r0, r4
  400952:	47c8      	blx	r9

	gfx_mono_draw_vertical_line(x, y, height, color);
  400954:	462b      	mov	r3, r5
  400956:	4642      	mov	r2, r8
  400958:	4639      	mov	r1, r7
  40095a:	4620      	mov	r0, r4
  40095c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400978 <gfx_mono_generic_draw_rect+0x4c>
  400960:	47c8      	blx	r9
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
  400962:	1e70      	subs	r0, r6, #1
  400964:	4420      	add	r0, r4
  400966:	462b      	mov	r3, r5
  400968:	4642      	mov	r2, r8
  40096a:	4639      	mov	r1, r7
  40096c:	b2c0      	uxtb	r0, r0
  40096e:	47c8      	blx	r9
  400970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400974:	004007bd 	.word	0x004007bd
  400978:	0040088d 	.word	0x0040088d

0040097c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40097c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400980:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400984:	b18b      	cbz	r3, 4009aa <gfx_mono_generic_draw_filled_rect+0x2e>
  400986:	461c      	mov	r4, r3
  400988:	4690      	mov	r8, r2
  40098a:	4606      	mov	r6, r0
  40098c:	1e4d      	subs	r5, r1, #1
  40098e:	b2ed      	uxtb	r5, r5
  400990:	442c      	add	r4, r5
  400992:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400994:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4009b0 <gfx_mono_generic_draw_filled_rect+0x34>
  400998:	463b      	mov	r3, r7
  40099a:	4642      	mov	r2, r8
  40099c:	4621      	mov	r1, r4
  40099e:	4630      	mov	r0, r6
  4009a0:	47c8      	blx	r9
  4009a2:	3c01      	subs	r4, #1
  4009a4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4009a6:	42ac      	cmp	r4, r5
  4009a8:	d1f6      	bne.n	400998 <gfx_mono_generic_draw_filled_rect+0x1c>
  4009aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009ae:	bf00      	nop
  4009b0:	004007bd 	.word	0x004007bd

004009b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4009b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009b8:	b083      	sub	sp, #12
  4009ba:	4604      	mov	r4, r0
  4009bc:	4688      	mov	r8, r1
  4009be:	4691      	mov	r9, r2
  4009c0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4009c2:	7a5b      	ldrb	r3, [r3, #9]
  4009c4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4009c8:	2100      	movs	r1, #0
  4009ca:	9100      	str	r1, [sp, #0]
  4009cc:	4649      	mov	r1, r9
  4009ce:	4640      	mov	r0, r8
  4009d0:	4d21      	ldr	r5, [pc, #132]	; (400a58 <gfx_mono_draw_char+0xa4>)
  4009d2:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4009d4:	f89b 3000 	ldrb.w	r3, [fp]
  4009d8:	b113      	cbz	r3, 4009e0 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4009da:	b003      	add	sp, #12
  4009dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4009e0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4009e4:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4009e6:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4009ea:	bf18      	it	ne
  4009ec:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4009ee:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  4009f2:	f89b 700a 	ldrb.w	r7, [fp, #10]
  4009f6:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4009f8:	fb17 f70a 	smulbb	r7, r7, sl
  4009fc:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400a00:	f8db 3004 	ldr.w	r3, [fp, #4]
  400a04:	fa13 f787 	uxtah	r7, r3, r7
  400a08:	e01f      	b.n	400a4a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400a0a:	0064      	lsls	r4, r4, #1
  400a0c:	b2e4      	uxtb	r4, r4
  400a0e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400a10:	b2eb      	uxtb	r3, r5
  400a12:	429e      	cmp	r6, r3
  400a14:	d910      	bls.n	400a38 <gfx_mono_draw_char+0x84>
  400a16:	b2eb      	uxtb	r3, r5
  400a18:	eb08 0003 	add.w	r0, r8, r3
  400a1c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400a1e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400a22:	bf08      	it	eq
  400a24:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400a28:	f014 0f80 	tst.w	r4, #128	; 0x80
  400a2c:	d0ed      	beq.n	400a0a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400a2e:	2201      	movs	r2, #1
  400a30:	4649      	mov	r1, r9
  400a32:	4b0a      	ldr	r3, [pc, #40]	; (400a5c <gfx_mono_draw_char+0xa8>)
  400a34:	4798      	blx	r3
  400a36:	e7e8      	b.n	400a0a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400a38:	f109 0901 	add.w	r9, r9, #1
  400a3c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400a40:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400a44:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400a48:	d0c7      	beq.n	4009da <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400a4a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400a4e:	2e00      	cmp	r6, #0
  400a50:	d0f2      	beq.n	400a38 <gfx_mono_draw_char+0x84>
  400a52:	2500      	movs	r5, #0
  400a54:	462c      	mov	r4, r5
  400a56:	e7de      	b.n	400a16 <gfx_mono_draw_char+0x62>
  400a58:	0040097d 	.word	0x0040097d
  400a5c:	00400b49 	.word	0x00400b49

00400a60 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400a64:	4604      	mov	r4, r0
  400a66:	4690      	mov	r8, r2
  400a68:	461d      	mov	r5, r3
  400a6a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400a6c:	4f0d      	ldr	r7, [pc, #52]	; (400aa4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400a6e:	460e      	mov	r6, r1
  400a70:	e008      	b.n	400a84 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400a72:	7a6a      	ldrb	r2, [r5, #9]
  400a74:	3201      	adds	r2, #1
  400a76:	4442      	add	r2, r8
  400a78:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400a7c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400a7e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400a82:	b16b      	cbz	r3, 400aa0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400a84:	7820      	ldrb	r0, [r4, #0]
  400a86:	280a      	cmp	r0, #10
  400a88:	d0f3      	beq.n	400a72 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400a8a:	280d      	cmp	r0, #13
  400a8c:	d0f7      	beq.n	400a7e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400a8e:	462b      	mov	r3, r5
  400a90:	4642      	mov	r2, r8
  400a92:	4649      	mov	r1, r9
  400a94:	47b8      	blx	r7
			x += font->width;
  400a96:	7a2b      	ldrb	r3, [r5, #8]
  400a98:	4499      	add	r9, r3
  400a9a:	fa5f f989 	uxtb.w	r9, r9
  400a9e:	e7ee      	b.n	400a7e <gfx_mono_draw_string+0x1e>
}
  400aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400aa4:	004009b5 	.word	0x004009b5

00400aa8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400aa8:	b570      	push	{r4, r5, r6, lr}
  400aaa:	4604      	mov	r4, r0
  400aac:	460d      	mov	r5, r1
  400aae:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400ab0:	b91b      	cbnz	r3, 400aba <gfx_mono_ssd1306_put_byte+0x12>
  400ab2:	4b0d      	ldr	r3, [pc, #52]	; (400ae8 <gfx_mono_ssd1306_put_byte+0x40>)
  400ab4:	4798      	blx	r3
  400ab6:	42b0      	cmp	r0, r6
  400ab8:	d015      	beq.n	400ae6 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400aba:	4632      	mov	r2, r6
  400abc:	4629      	mov	r1, r5
  400abe:	4620      	mov	r0, r4
  400ac0:	4b0a      	ldr	r3, [pc, #40]	; (400aec <gfx_mono_ssd1306_put_byte+0x44>)
  400ac2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400ac4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400ac8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400acc:	4c08      	ldr	r4, [pc, #32]	; (400af0 <gfx_mono_ssd1306_put_byte+0x48>)
  400ace:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400ad0:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400ad4:	f040 0010 	orr.w	r0, r0, #16
  400ad8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400ada:	f005 000f 	and.w	r0, r5, #15
  400ade:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400ae0:	4630      	mov	r0, r6
  400ae2:	4b04      	ldr	r3, [pc, #16]	; (400af4 <gfx_mono_ssd1306_put_byte+0x4c>)
  400ae4:	4798      	blx	r3
  400ae6:	bd70      	pop	{r4, r5, r6, pc}
  400ae8:	004007ad 	.word	0x004007ad
  400aec:	0040079d 	.word	0x0040079d
  400af0:	00400bfd 	.word	0x00400bfd
  400af4:	00400e1d 	.word	0x00400e1d

00400af8 <gfx_mono_ssd1306_init>:
{
  400af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400afc:	480d      	ldr	r0, [pc, #52]	; (400b34 <gfx_mono_ssd1306_init+0x3c>)
  400afe:	4b0e      	ldr	r3, [pc, #56]	; (400b38 <gfx_mono_ssd1306_init+0x40>)
  400b00:	4798      	blx	r3
	ssd1306_init();
  400b02:	4b0e      	ldr	r3, [pc, #56]	; (400b3c <gfx_mono_ssd1306_init+0x44>)
  400b04:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400b06:	2040      	movs	r0, #64	; 0x40
  400b08:	4b0d      	ldr	r3, [pc, #52]	; (400b40 <gfx_mono_ssd1306_init+0x48>)
  400b0a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b0c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b0e:	f04f 0801 	mov.w	r8, #1
  400b12:	462f      	mov	r7, r5
  400b14:	4e0b      	ldr	r6, [pc, #44]	; (400b44 <gfx_mono_ssd1306_init+0x4c>)
{
  400b16:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b18:	4643      	mov	r3, r8
  400b1a:	463a      	mov	r2, r7
  400b1c:	b2e1      	uxtb	r1, r4
  400b1e:	4628      	mov	r0, r5
  400b20:	47b0      	blx	r6
  400b22:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b24:	2c80      	cmp	r4, #128	; 0x80
  400b26:	d1f7      	bne.n	400b18 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b28:	3501      	adds	r5, #1
  400b2a:	b2ed      	uxtb	r5, r5
  400b2c:	2d04      	cmp	r5, #4
  400b2e:	d1f2      	bne.n	400b16 <gfx_mono_ssd1306_init+0x1e>
  400b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b34:	204009f4 	.word	0x204009f4
  400b38:	00400791 	.word	0x00400791
  400b3c:	00400c3d 	.word	0x00400c3d
  400b40:	00400bfd 	.word	0x00400bfd
  400b44:	00400aa9 	.word	0x00400aa9

00400b48 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400b48:	09c3      	lsrs	r3, r0, #7
  400b4a:	d12a      	bne.n	400ba2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400b4c:	291f      	cmp	r1, #31
  400b4e:	d828      	bhi.n	400ba2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b54:	4614      	mov	r4, r2
  400b56:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400b58:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400b5a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400b5e:	2201      	movs	r2, #1
  400b60:	fa02 f701 	lsl.w	r7, r2, r1
  400b64:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400b68:	4601      	mov	r1, r0
  400b6a:	4630      	mov	r0, r6
  400b6c:	4b0d      	ldr	r3, [pc, #52]	; (400ba4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400b6e:	4798      	blx	r3
  400b70:	4602      	mov	r2, r0
	switch (color) {
  400b72:	2c01      	cmp	r4, #1
  400b74:	d009      	beq.n	400b8a <gfx_mono_ssd1306_draw_pixel+0x42>
  400b76:	b164      	cbz	r4, 400b92 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400b78:	2c02      	cmp	r4, #2
  400b7a:	d00e      	beq.n	400b9a <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400b7c:	2300      	movs	r3, #0
  400b7e:	4629      	mov	r1, r5
  400b80:	4630      	mov	r0, r6
  400b82:	4c09      	ldr	r4, [pc, #36]	; (400ba8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400b84:	47a0      	blx	r4
  400b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400b8a:	ea48 0200 	orr.w	r2, r8, r0
  400b8e:	b2d2      	uxtb	r2, r2
		break;
  400b90:	e7f4      	b.n	400b7c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400b92:	ea20 0207 	bic.w	r2, r0, r7
  400b96:	b2d2      	uxtb	r2, r2
		break;
  400b98:	e7f0      	b.n	400b7c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400b9a:	ea88 0200 	eor.w	r2, r8, r0
  400b9e:	b2d2      	uxtb	r2, r2
		break;
  400ba0:	e7ec      	b.n	400b7c <gfx_mono_ssd1306_draw_pixel+0x34>
  400ba2:	4770      	bx	lr
  400ba4:	004007ad 	.word	0x004007ad
  400ba8:	00400aa9 	.word	0x00400aa9

00400bac <gfx_mono_ssd1306_get_byte>:
{
  400bac:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400bae:	4b01      	ldr	r3, [pc, #4]	; (400bb4 <gfx_mono_ssd1306_get_byte+0x8>)
  400bb0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400bb2:	bd08      	pop	{r3, pc}
  400bb4:	004007ad 	.word	0x004007ad

00400bb8 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bba:	4605      	mov	r5, r0
  400bbc:	460e      	mov	r6, r1
  400bbe:	4617      	mov	r7, r2
  400bc0:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400bc2:	4b0c      	ldr	r3, [pc, #48]	; (400bf4 <gfx_mono_ssd1306_mask_byte+0x3c>)
  400bc4:	4798      	blx	r3
  400bc6:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  400bc8:	2c01      	cmp	r4, #1
  400bca:	d008      	beq.n	400bde <gfx_mono_ssd1306_mask_byte+0x26>
  400bcc:	b154      	cbz	r4, 400be4 <gfx_mono_ssd1306_mask_byte+0x2c>
  400bce:	2c02      	cmp	r4, #2
  400bd0:	d00c      	beq.n	400bec <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400bd2:	2300      	movs	r3, #0
  400bd4:	4631      	mov	r1, r6
  400bd6:	4628      	mov	r0, r5
  400bd8:	4c07      	ldr	r4, [pc, #28]	; (400bf8 <gfx_mono_ssd1306_mask_byte+0x40>)
  400bda:	47a0      	blx	r4
  400bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  400bde:	433a      	orrs	r2, r7
  400be0:	b2d2      	uxtb	r2, r2
		break;
  400be2:	e7f6      	b.n	400bd2 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400be4:	ea20 0207 	bic.w	r2, r0, r7
  400be8:	b2d2      	uxtb	r2, r2
		break;
  400bea:	e7f2      	b.n	400bd2 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  400bec:	407a      	eors	r2, r7
  400bee:	b2d2      	uxtb	r2, r2
		break;
  400bf0:	e7ef      	b.n	400bd2 <gfx_mono_ssd1306_mask_byte+0x1a>
  400bf2:	bf00      	nop
  400bf4:	004007ad 	.word	0x004007ad
  400bf8:	00400aa9 	.word	0x00400aa9

00400bfc <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400bfc:	b538      	push	{r3, r4, r5, lr}
  400bfe:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c00:	2208      	movs	r2, #8
  400c02:	4b09      	ldr	r3, [pc, #36]	; (400c28 <ssd1306_write_command+0x2c>)
  400c04:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400c06:	4c09      	ldr	r4, [pc, #36]	; (400c2c <ssd1306_write_command+0x30>)
  400c08:	2101      	movs	r1, #1
  400c0a:	4620      	mov	r0, r4
  400c0c:	4b08      	ldr	r3, [pc, #32]	; (400c30 <ssd1306_write_command+0x34>)
  400c0e:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400c10:	2301      	movs	r3, #1
  400c12:	461a      	mov	r2, r3
  400c14:	4629      	mov	r1, r5
  400c16:	4620      	mov	r0, r4
  400c18:	4c06      	ldr	r4, [pc, #24]	; (400c34 <ssd1306_write_command+0x38>)
  400c1a:	47a0      	blx	r4
	delay_us(10);
  400c1c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400c20:	4b05      	ldr	r3, [pc, #20]	; (400c38 <ssd1306_write_command+0x3c>)
  400c22:	4798      	blx	r3
  400c24:	bd38      	pop	{r3, r4, r5, pc}
  400c26:	bf00      	nop
  400c28:	400e1000 	.word	0x400e1000
  400c2c:	40008000 	.word	0x40008000
  400c30:	004005c9 	.word	0x004005c9
  400c34:	004005df 	.word	0x004005df
  400c38:	20400001 	.word	0x20400001

00400c3c <ssd1306_init>:
{
  400c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c40:	4d66      	ldr	r5, [pc, #408]	; (400ddc <ssd1306_init+0x1a0>)
  400c42:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400c46:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c48:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c4c:	4b64      	ldr	r3, [pc, #400]	; (400de0 <ssd1306_init+0x1a4>)
  400c4e:	2708      	movs	r7, #8
  400c50:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c52:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400c56:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400c58:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c5c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c5e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c60:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c64:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400c66:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400c6a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c6c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400c6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400c72:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400c74:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400c76:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c7a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c7c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c7e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c84:	f022 0208 	bic.w	r2, r2, #8
  400c88:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c8c:	f022 0208 	bic.w	r2, r2, #8
  400c90:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400c92:	601f      	str	r7, [r3, #0]
  400c94:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c96:	631f      	str	r7, [r3, #48]	; 0x30
  400c98:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400c9a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400e18 <ssd1306_init+0x1dc>
  400c9e:	2300      	movs	r3, #0
  400ca0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400ca4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ca8:	4640      	mov	r0, r8
  400caa:	4c4e      	ldr	r4, [pc, #312]	; (400de4 <ssd1306_init+0x1a8>)
  400cac:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400cae:	2300      	movs	r3, #0
  400cb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400cb4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cb8:	4640      	mov	r0, r8
  400cba:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400cbc:	2300      	movs	r3, #0
  400cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400cc2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cc6:	4640      	mov	r0, r8
  400cc8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400cca:	2300      	movs	r3, #0
  400ccc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400cd0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cd4:	4640      	mov	r0, r8
  400cd6:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400cd8:	2300      	movs	r3, #0
  400cda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400cde:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ce2:	4640      	mov	r0, r8
  400ce4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400ce6:	2300      	movs	r3, #0
  400ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400cec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cf0:	4640      	mov	r0, r8
  400cf2:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400cf4:	4c3c      	ldr	r4, [pc, #240]	; (400de8 <ssd1306_init+0x1ac>)
  400cf6:	f04f 0902 	mov.w	r9, #2
  400cfa:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400cfe:	f04f 0880 	mov.w	r8, #128	; 0x80
  400d02:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400d06:	6863      	ldr	r3, [r4, #4]
  400d08:	f043 0301 	orr.w	r3, r3, #1
  400d0c:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400d0e:	463a      	mov	r2, r7
  400d10:	2101      	movs	r1, #1
  400d12:	4620      	mov	r0, r4
  400d14:	4b35      	ldr	r3, [pc, #212]	; (400dec <ssd1306_init+0x1b0>)
  400d16:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400d18:	2200      	movs	r2, #0
  400d1a:	2101      	movs	r1, #1
  400d1c:	4620      	mov	r0, r4
  400d1e:	4b34      	ldr	r3, [pc, #208]	; (400df0 <ssd1306_init+0x1b4>)
  400d20:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400d22:	2200      	movs	r2, #0
  400d24:	2101      	movs	r1, #1
  400d26:	4620      	mov	r0, r4
  400d28:	4b32      	ldr	r3, [pc, #200]	; (400df4 <ssd1306_init+0x1b8>)
  400d2a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400d2c:	6863      	ldr	r3, [r4, #4]
  400d2e:	f023 0302 	bic.w	r3, r3, #2
  400d32:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400d34:	2200      	movs	r2, #0
  400d36:	2101      	movs	r1, #1
  400d38:	4620      	mov	r0, r4
  400d3a:	4b2f      	ldr	r3, [pc, #188]	; (400df8 <ssd1306_init+0x1bc>)
  400d3c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400d3e:	6863      	ldr	r3, [r4, #4]
  400d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400d44:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400d46:	6863      	ldr	r3, [r4, #4]
  400d48:	f043 0310 	orr.w	r3, r3, #16
  400d4c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400d4e:	492b      	ldr	r1, [pc, #172]	; (400dfc <ssd1306_init+0x1c0>)
  400d50:	482b      	ldr	r0, [pc, #172]	; (400e00 <ssd1306_init+0x1c4>)
  400d52:	4b2c      	ldr	r3, [pc, #176]	; (400e04 <ssd1306_init+0x1c8>)
  400d54:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400d56:	b2c2      	uxtb	r2, r0
  400d58:	2101      	movs	r1, #1
  400d5a:	4620      	mov	r0, r4
  400d5c:	4b2a      	ldr	r3, [pc, #168]	; (400e08 <ssd1306_init+0x1cc>)
  400d5e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400d60:	4620      	mov	r0, r4
  400d62:	4b2a      	ldr	r3, [pc, #168]	; (400e0c <ssd1306_init+0x1d0>)
  400d64:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400d66:	2301      	movs	r3, #1
  400d68:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d6a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400d6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400d70:	4c27      	ldr	r4, [pc, #156]	; (400e10 <ssd1306_init+0x1d4>)
  400d72:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d74:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400d76:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400d7a:	47a0      	blx	r4
  400d7c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400d7e:	20a8      	movs	r0, #168	; 0xa8
  400d80:	4c24      	ldr	r4, [pc, #144]	; (400e14 <ssd1306_init+0x1d8>)
  400d82:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400d84:	201f      	movs	r0, #31
  400d86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400d88:	20d3      	movs	r0, #211	; 0xd3
  400d8a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400d8c:	2000      	movs	r0, #0
  400d8e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400d90:	2040      	movs	r0, #64	; 0x40
  400d92:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400d94:	20a1      	movs	r0, #161	; 0xa1
  400d96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400d98:	20c8      	movs	r0, #200	; 0xc8
  400d9a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400d9c:	20da      	movs	r0, #218	; 0xda
  400d9e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400da0:	4648      	mov	r0, r9
  400da2:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400da4:	2081      	movs	r0, #129	; 0x81
  400da6:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400da8:	208f      	movs	r0, #143	; 0x8f
  400daa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400dac:	20a4      	movs	r0, #164	; 0xa4
  400dae:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400db0:	20a6      	movs	r0, #166	; 0xa6
  400db2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400db4:	20d5      	movs	r0, #213	; 0xd5
  400db6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400db8:	4640      	mov	r0, r8
  400dba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400dbc:	208d      	movs	r0, #141	; 0x8d
  400dbe:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400dc0:	2014      	movs	r0, #20
  400dc2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400dc4:	20db      	movs	r0, #219	; 0xdb
  400dc6:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400dc8:	2040      	movs	r0, #64	; 0x40
  400dca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400dcc:	20d9      	movs	r0, #217	; 0xd9
  400dce:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400dd0:	20f1      	movs	r0, #241	; 0xf1
  400dd2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400dd4:	20af      	movs	r0, #175	; 0xaf
  400dd6:	47a0      	blx	r4
  400dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ddc:	400e1200 	.word	0x400e1200
  400de0:	400e1000 	.word	0x400e1000
  400de4:	00401139 	.word	0x00401139
  400de8:	40008000 	.word	0x40008000
  400dec:	0040064f 	.word	0x0040064f
  400df0:	00400613 	.word	0x00400613
  400df4:	00400631 	.word	0x00400631
  400df8:	00400695 	.word	0x00400695
  400dfc:	08f0d180 	.word	0x08f0d180
  400e00:	001e8480 	.word	0x001e8480
  400e04:	004006a9 	.word	0x004006a9
  400e08:	004006bf 	.word	0x004006bf
  400e0c:	0040059d 	.word	0x0040059d
  400e10:	20400001 	.word	0x20400001
  400e14:	00400bfd 	.word	0x00400bfd
  400e18:	400e1400 	.word	0x400e1400

00400e1c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400e1c:	b538      	push	{r3, r4, r5, lr}
  400e1e:	4605      	mov	r5, r0
  400e20:	2208      	movs	r2, #8
  400e22:	4b09      	ldr	r3, [pc, #36]	; (400e48 <ssd1306_write_data+0x2c>)
  400e24:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400e26:	4c09      	ldr	r4, [pc, #36]	; (400e4c <ssd1306_write_data+0x30>)
  400e28:	2101      	movs	r1, #1
  400e2a:	4620      	mov	r0, r4
  400e2c:	4b08      	ldr	r3, [pc, #32]	; (400e50 <ssd1306_write_data+0x34>)
  400e2e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400e30:	2301      	movs	r3, #1
  400e32:	461a      	mov	r2, r3
  400e34:	4629      	mov	r1, r5
  400e36:	4620      	mov	r0, r4
  400e38:	4c06      	ldr	r4, [pc, #24]	; (400e54 <ssd1306_write_data+0x38>)
  400e3a:	47a0      	blx	r4
	delay_us(10);
  400e3c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400e40:	4b05      	ldr	r3, [pc, #20]	; (400e58 <ssd1306_write_data+0x3c>)
  400e42:	4798      	blx	r3
  400e44:	bd38      	pop	{r3, r4, r5, pc}
  400e46:	bf00      	nop
  400e48:	400e1000 	.word	0x400e1000
  400e4c:	40008000 	.word	0x40008000
  400e50:	004005c9 	.word	0x004005c9
  400e54:	004005df 	.word	0x004005df
  400e58:	20400001 	.word	0x20400001

00400e5c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e5c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e5e:	4810      	ldr	r0, [pc, #64]	; (400ea0 <sysclk_init+0x44>)
  400e60:	4b10      	ldr	r3, [pc, #64]	; (400ea4 <sysclk_init+0x48>)
  400e62:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400e64:	213e      	movs	r1, #62	; 0x3e
  400e66:	2000      	movs	r0, #0
  400e68:	4b0f      	ldr	r3, [pc, #60]	; (400ea8 <sysclk_init+0x4c>)
  400e6a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400e6c:	4c0f      	ldr	r4, [pc, #60]	; (400eac <sysclk_init+0x50>)
  400e6e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400e70:	2800      	cmp	r0, #0
  400e72:	d0fc      	beq.n	400e6e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400e74:	4b0e      	ldr	r3, [pc, #56]	; (400eb0 <sysclk_init+0x54>)
  400e76:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400e78:	4a0e      	ldr	r2, [pc, #56]	; (400eb4 <sysclk_init+0x58>)
  400e7a:	4b0f      	ldr	r3, [pc, #60]	; (400eb8 <sysclk_init+0x5c>)
  400e7c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400e7e:	4c0f      	ldr	r4, [pc, #60]	; (400ebc <sysclk_init+0x60>)
  400e80:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e82:	2800      	cmp	r0, #0
  400e84:	d0fc      	beq.n	400e80 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400e86:	2002      	movs	r0, #2
  400e88:	4b0d      	ldr	r3, [pc, #52]	; (400ec0 <sysclk_init+0x64>)
  400e8a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400e8c:	2000      	movs	r0, #0
  400e8e:	4b0d      	ldr	r3, [pc, #52]	; (400ec4 <sysclk_init+0x68>)
  400e90:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400e92:	4b0d      	ldr	r3, [pc, #52]	; (400ec8 <sysclk_init+0x6c>)
  400e94:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400e96:	4802      	ldr	r0, [pc, #8]	; (400ea0 <sysclk_init+0x44>)
  400e98:	4b02      	ldr	r3, [pc, #8]	; (400ea4 <sysclk_init+0x48>)
  400e9a:	4798      	blx	r3
  400e9c:	bd10      	pop	{r4, pc}
  400e9e:	bf00      	nop
  400ea0:	11e1a300 	.word	0x11e1a300
  400ea4:	00401949 	.word	0x00401949
  400ea8:	004013d5 	.word	0x004013d5
  400eac:	00401429 	.word	0x00401429
  400eb0:	00401439 	.word	0x00401439
  400eb4:	20183f01 	.word	0x20183f01
  400eb8:	400e0600 	.word	0x400e0600
  400ebc:	00401449 	.word	0x00401449
  400ec0:	00401339 	.word	0x00401339
  400ec4:	00401371 	.word	0x00401371
  400ec8:	0040183d 	.word	0x0040183d

00400ecc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400ece:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400ed2:	4b48      	ldr	r3, [pc, #288]	; (400ff4 <board_init+0x128>)
  400ed4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400ed6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400eda:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400ede:	4b46      	ldr	r3, [pc, #280]	; (400ff8 <board_init+0x12c>)
  400ee0:	2200      	movs	r2, #0
  400ee2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400ee6:	695a      	ldr	r2, [r3, #20]
  400ee8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400eec:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ef2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400ef6:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400efa:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400efe:	f007 0007 	and.w	r0, r7, #7
  400f02:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400f04:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400f08:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400f0c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400f10:	f3bf 8f4f 	dsb	sy
  400f14:	f04f 34ff 	mov.w	r4, #4294967295
  400f18:	fa04 fc00 	lsl.w	ip, r4, r0
  400f1c:	fa06 f000 	lsl.w	r0, r6, r0
  400f20:	fa04 f40e 	lsl.w	r4, r4, lr
  400f24:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400f28:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400f2a:	463a      	mov	r2, r7
  400f2c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400f2e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400f32:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400f36:	3a01      	subs	r2, #1
  400f38:	4423      	add	r3, r4
  400f3a:	f1b2 3fff 	cmp.w	r2, #4294967295
  400f3e:	d1f6      	bne.n	400f2e <board_init+0x62>
        } while(sets--);
  400f40:	3e01      	subs	r6, #1
  400f42:	4460      	add	r0, ip
  400f44:	f1b6 3fff 	cmp.w	r6, #4294967295
  400f48:	d1ef      	bne.n	400f2a <board_init+0x5e>
  400f4a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400f4e:	4b2a      	ldr	r3, [pc, #168]	; (400ff8 <board_init+0x12c>)
  400f50:	695a      	ldr	r2, [r3, #20]
  400f52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400f56:	615a      	str	r2, [r3, #20]
  400f58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f5c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400f60:	4a26      	ldr	r2, [pc, #152]	; (400ffc <board_init+0x130>)
  400f62:	4927      	ldr	r1, [pc, #156]	; (401000 <board_init+0x134>)
  400f64:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400f66:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400f6a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400f6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f70:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400f74:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400f78:	f022 0201 	bic.w	r2, r2, #1
  400f7c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400f80:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400f84:	f022 0201 	bic.w	r2, r2, #1
  400f88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f90:	f3bf 8f6f 	isb	sy
  400f94:	200a      	movs	r0, #10
  400f96:	4c1b      	ldr	r4, [pc, #108]	; (401004 <board_init+0x138>)
  400f98:	47a0      	blx	r4
  400f9a:	200b      	movs	r0, #11
  400f9c:	47a0      	blx	r4
  400f9e:	200c      	movs	r0, #12
  400fa0:	47a0      	blx	r4
  400fa2:	2010      	movs	r0, #16
  400fa4:	47a0      	blx	r4
  400fa6:	2011      	movs	r0, #17
  400fa8:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400faa:	4b17      	ldr	r3, [pc, #92]	; (401008 <board_init+0x13c>)
  400fac:	f44f 7280 	mov.w	r2, #256	; 0x100
  400fb0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fb2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400fb6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400fb8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400fc0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400fc6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400fcc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400fce:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400fd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400fd6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400fda:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400fdc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400fde:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400fe2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400fe4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400fe8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400fec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ff2:	bf00      	nop
  400ff4:	400e1850 	.word	0x400e1850
  400ff8:	e000ed00 	.word	0xe000ed00
  400ffc:	400e0c00 	.word	0x400e0c00
  401000:	5a00080c 	.word	0x5a00080c
  401004:	00401459 	.word	0x00401459
  401008:	400e1200 	.word	0x400e1200

0040100c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40100c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401010:	0053      	lsls	r3, r2, #1
  401012:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401016:	fbb2 f2f3 	udiv	r2, r2, r3
  40101a:	3a01      	subs	r2, #1
  40101c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  401020:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  401024:	4770      	bx	lr

00401026 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401026:	6301      	str	r1, [r0, #48]	; 0x30
  401028:	4770      	bx	lr

0040102a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40102a:	6341      	str	r1, [r0, #52]	; 0x34
  40102c:	4770      	bx	lr

0040102e <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40102e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  401032:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401036:	d105      	bne.n	401044 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  401038:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  40103a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  40103c:	bf14      	ite	ne
  40103e:	2001      	movne	r0, #1
  401040:	2000      	moveq	r0, #0
  401042:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  401044:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  401046:	e7f8      	b.n	40103a <pio_get+0xc>

00401048 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401048:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40104a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40104e:	d03a      	beq.n	4010c6 <pio_set_peripheral+0x7e>
  401050:	d813      	bhi.n	40107a <pio_set_peripheral+0x32>
  401052:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401056:	d025      	beq.n	4010a4 <pio_set_peripheral+0x5c>
  401058:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40105c:	d10a      	bne.n	401074 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40105e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401060:	4313      	orrs	r3, r2
  401062:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401064:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401066:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401068:	400b      	ands	r3, r1
  40106a:	ea23 0302 	bic.w	r3, r3, r2
  40106e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401070:	6042      	str	r2, [r0, #4]
  401072:	4770      	bx	lr
	switch (ul_type) {
  401074:	2900      	cmp	r1, #0
  401076:	d1fb      	bne.n	401070 <pio_set_peripheral+0x28>
  401078:	4770      	bx	lr
  40107a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40107e:	d021      	beq.n	4010c4 <pio_set_peripheral+0x7c>
  401080:	d809      	bhi.n	401096 <pio_set_peripheral+0x4e>
  401082:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401086:	d1f3      	bne.n	401070 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401088:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40108a:	4313      	orrs	r3, r2
  40108c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40108e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401090:	4313      	orrs	r3, r2
  401092:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401094:	e7ec      	b.n	401070 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401096:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40109a:	d013      	beq.n	4010c4 <pio_set_peripheral+0x7c>
  40109c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4010a0:	d010      	beq.n	4010c4 <pio_set_peripheral+0x7c>
  4010a2:	e7e5      	b.n	401070 <pio_set_peripheral+0x28>
{
  4010a4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010a6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4010a8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4010aa:	43d3      	mvns	r3, r2
  4010ac:	4021      	ands	r1, r4
  4010ae:	461c      	mov	r4, r3
  4010b0:	4019      	ands	r1, r3
  4010b2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4010b4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4010b6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4010b8:	400b      	ands	r3, r1
  4010ba:	4023      	ands	r3, r4
  4010bc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4010be:	6042      	str	r2, [r0, #4]
}
  4010c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010c4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4010c8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4010ca:	400b      	ands	r3, r1
  4010cc:	ea23 0302 	bic.w	r3, r3, r2
  4010d0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4010d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4010d4:	4313      	orrs	r3, r2
  4010d6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4010d8:	e7ca      	b.n	401070 <pio_set_peripheral+0x28>

004010da <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4010da:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4010dc:	f012 0f01 	tst.w	r2, #1
  4010e0:	d10d      	bne.n	4010fe <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4010e2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4010e4:	f012 0f0a 	tst.w	r2, #10
  4010e8:	d00b      	beq.n	401102 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4010ea:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4010ec:	f012 0f02 	tst.w	r2, #2
  4010f0:	d109      	bne.n	401106 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4010f2:	f012 0f08 	tst.w	r2, #8
  4010f6:	d008      	beq.n	40110a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4010f8:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4010fc:	e005      	b.n	40110a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4010fe:	6641      	str	r1, [r0, #100]	; 0x64
  401100:	e7f0      	b.n	4010e4 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401102:	6241      	str	r1, [r0, #36]	; 0x24
  401104:	e7f2      	b.n	4010ec <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401106:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40110a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40110c:	6001      	str	r1, [r0, #0]
  40110e:	4770      	bx	lr

00401110 <pio_set_output>:
{
  401110:	b410      	push	{r4}
  401112:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401114:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401116:	b94c      	cbnz	r4, 40112c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401118:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40111a:	b14b      	cbz	r3, 401130 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40111c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40111e:	b94a      	cbnz	r2, 401134 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401120:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401122:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401124:	6001      	str	r1, [r0, #0]
}
  401126:	f85d 4b04 	ldr.w	r4, [sp], #4
  40112a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40112c:	6641      	str	r1, [r0, #100]	; 0x64
  40112e:	e7f4      	b.n	40111a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401130:	6541      	str	r1, [r0, #84]	; 0x54
  401132:	e7f4      	b.n	40111e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401134:	6301      	str	r1, [r0, #48]	; 0x30
  401136:	e7f4      	b.n	401122 <pio_set_output+0x12>

00401138 <pio_configure>:
{
  401138:	b570      	push	{r4, r5, r6, lr}
  40113a:	b082      	sub	sp, #8
  40113c:	4605      	mov	r5, r0
  40113e:	4616      	mov	r6, r2
  401140:	461c      	mov	r4, r3
	switch (ul_type) {
  401142:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401146:	d014      	beq.n	401172 <pio_configure+0x3a>
  401148:	d90a      	bls.n	401160 <pio_configure+0x28>
  40114a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40114e:	d024      	beq.n	40119a <pio_configure+0x62>
  401150:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401154:	d021      	beq.n	40119a <pio_configure+0x62>
  401156:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40115a:	d017      	beq.n	40118c <pio_configure+0x54>
		return 0;
  40115c:	2000      	movs	r0, #0
  40115e:	e01a      	b.n	401196 <pio_configure+0x5e>
	switch (ul_type) {
  401160:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401164:	d005      	beq.n	401172 <pio_configure+0x3a>
  401166:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40116a:	d002      	beq.n	401172 <pio_configure+0x3a>
  40116c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401170:	d1f4      	bne.n	40115c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401172:	4632      	mov	r2, r6
  401174:	4628      	mov	r0, r5
  401176:	4b11      	ldr	r3, [pc, #68]	; (4011bc <pio_configure+0x84>)
  401178:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40117a:	f014 0f01 	tst.w	r4, #1
  40117e:	d102      	bne.n	401186 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401180:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401182:	2001      	movs	r0, #1
  401184:	e007      	b.n	401196 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401186:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401188:	2001      	movs	r0, #1
  40118a:	e004      	b.n	401196 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40118c:	461a      	mov	r2, r3
  40118e:	4631      	mov	r1, r6
  401190:	4b0b      	ldr	r3, [pc, #44]	; (4011c0 <pio_configure+0x88>)
  401192:	4798      	blx	r3
	return 1;
  401194:	2001      	movs	r0, #1
}
  401196:	b002      	add	sp, #8
  401198:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40119a:	f004 0301 	and.w	r3, r4, #1
  40119e:	9300      	str	r3, [sp, #0]
  4011a0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4011a4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4011a8:	bf14      	ite	ne
  4011aa:	2200      	movne	r2, #0
  4011ac:	2201      	moveq	r2, #1
  4011ae:	4631      	mov	r1, r6
  4011b0:	4628      	mov	r0, r5
  4011b2:	4c04      	ldr	r4, [pc, #16]	; (4011c4 <pio_configure+0x8c>)
  4011b4:	47a0      	blx	r4
	return 1;
  4011b6:	2001      	movs	r0, #1
		break;
  4011b8:	e7ed      	b.n	401196 <pio_configure+0x5e>
  4011ba:	bf00      	nop
  4011bc:	00401049 	.word	0x00401049
  4011c0:	004010db 	.word	0x004010db
  4011c4:	00401111 	.word	0x00401111

004011c8 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4011c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4011ca:	420b      	tst	r3, r1
}
  4011cc:	bf14      	ite	ne
  4011ce:	2001      	movne	r0, #1
  4011d0:	2000      	moveq	r0, #0
  4011d2:	4770      	bx	lr

004011d4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4011d4:	f012 0f10 	tst.w	r2, #16
  4011d8:	d012      	beq.n	401200 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4011da:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4011de:	f012 0f20 	tst.w	r2, #32
  4011e2:	d007      	beq.n	4011f4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4011e4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4011e8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4011ec:	d005      	beq.n	4011fa <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4011ee:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4011f2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4011f4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4011f8:	e7f6      	b.n	4011e8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4011fa:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4011fe:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401200:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401204:	4770      	bx	lr

00401206 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  401206:	6401      	str	r1, [r0, #64]	; 0x40
  401208:	4770      	bx	lr

0040120a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40120a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40120c:	4770      	bx	lr

0040120e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40120e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401210:	4770      	bx	lr
	...

00401214 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401218:	4604      	mov	r4, r0
  40121a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40121c:	4b0e      	ldr	r3, [pc, #56]	; (401258 <pio_handler_process+0x44>)
  40121e:	4798      	blx	r3
  401220:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401222:	4620      	mov	r0, r4
  401224:	4b0d      	ldr	r3, [pc, #52]	; (40125c <pio_handler_process+0x48>)
  401226:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401228:	4005      	ands	r5, r0
  40122a:	d013      	beq.n	401254 <pio_handler_process+0x40>
  40122c:	4c0c      	ldr	r4, [pc, #48]	; (401260 <pio_handler_process+0x4c>)
  40122e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401232:	e003      	b.n	40123c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401234:	42b4      	cmp	r4, r6
  401236:	d00d      	beq.n	401254 <pio_handler_process+0x40>
  401238:	3410      	adds	r4, #16
		while (status != 0) {
  40123a:	b15d      	cbz	r5, 401254 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40123c:	6820      	ldr	r0, [r4, #0]
  40123e:	4540      	cmp	r0, r8
  401240:	d1f8      	bne.n	401234 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401242:	6861      	ldr	r1, [r4, #4]
  401244:	4229      	tst	r1, r5
  401246:	d0f5      	beq.n	401234 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401248:	68e3      	ldr	r3, [r4, #12]
  40124a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40124c:	6863      	ldr	r3, [r4, #4]
  40124e:	ea25 0503 	bic.w	r5, r5, r3
  401252:	e7ef      	b.n	401234 <pio_handler_process+0x20>
  401254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401258:	0040120b 	.word	0x0040120b
  40125c:	0040120f 	.word	0x0040120f
  401260:	20400bf4 	.word	0x20400bf4

00401264 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401266:	4c18      	ldr	r4, [pc, #96]	; (4012c8 <pio_handler_set+0x64>)
  401268:	6826      	ldr	r6, [r4, #0]
  40126a:	2e06      	cmp	r6, #6
  40126c:	d82a      	bhi.n	4012c4 <pio_handler_set+0x60>
  40126e:	f04f 0c00 	mov.w	ip, #0
  401272:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401274:	4f15      	ldr	r7, [pc, #84]	; (4012cc <pio_handler_set+0x68>)
  401276:	e004      	b.n	401282 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401278:	3401      	adds	r4, #1
  40127a:	b2e4      	uxtb	r4, r4
  40127c:	46a4      	mov	ip, r4
  40127e:	42a6      	cmp	r6, r4
  401280:	d309      	bcc.n	401296 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  401282:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401284:	0125      	lsls	r5, r4, #4
  401286:	597d      	ldr	r5, [r7, r5]
  401288:	428d      	cmp	r5, r1
  40128a:	d1f5      	bne.n	401278 <pio_handler_set+0x14>
  40128c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401290:	686d      	ldr	r5, [r5, #4]
  401292:	4295      	cmp	r5, r2
  401294:	d1f0      	bne.n	401278 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401296:	4d0d      	ldr	r5, [pc, #52]	; (4012cc <pio_handler_set+0x68>)
  401298:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40129c:	eb05 040e 	add.w	r4, r5, lr
  4012a0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4012a4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4012a6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4012a8:	9906      	ldr	r1, [sp, #24]
  4012aa:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4012ac:	3601      	adds	r6, #1
  4012ae:	4566      	cmp	r6, ip
  4012b0:	d005      	beq.n	4012be <pio_handler_set+0x5a>
  4012b2:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4012b4:	461a      	mov	r2, r3
  4012b6:	4b06      	ldr	r3, [pc, #24]	; (4012d0 <pio_handler_set+0x6c>)
  4012b8:	4798      	blx	r3

	return 0;
  4012ba:	2000      	movs	r0, #0
  4012bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4012be:	4902      	ldr	r1, [pc, #8]	; (4012c8 <pio_handler_set+0x64>)
  4012c0:	600e      	str	r6, [r1, #0]
  4012c2:	e7f6      	b.n	4012b2 <pio_handler_set+0x4e>
		return 1;
  4012c4:	2001      	movs	r0, #1
}
  4012c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012c8:	20400c64 	.word	0x20400c64
  4012cc:	20400bf4 	.word	0x20400bf4
  4012d0:	004011d5 	.word	0x004011d5

004012d4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4012d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4012d6:	210a      	movs	r1, #10
  4012d8:	4801      	ldr	r0, [pc, #4]	; (4012e0 <PIOA_Handler+0xc>)
  4012da:	4b02      	ldr	r3, [pc, #8]	; (4012e4 <PIOA_Handler+0x10>)
  4012dc:	4798      	blx	r3
  4012de:	bd08      	pop	{r3, pc}
  4012e0:	400e0e00 	.word	0x400e0e00
  4012e4:	00401215 	.word	0x00401215

004012e8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4012e8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4012ea:	210b      	movs	r1, #11
  4012ec:	4801      	ldr	r0, [pc, #4]	; (4012f4 <PIOB_Handler+0xc>)
  4012ee:	4b02      	ldr	r3, [pc, #8]	; (4012f8 <PIOB_Handler+0x10>)
  4012f0:	4798      	blx	r3
  4012f2:	bd08      	pop	{r3, pc}
  4012f4:	400e1000 	.word	0x400e1000
  4012f8:	00401215 	.word	0x00401215

004012fc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4012fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4012fe:	210c      	movs	r1, #12
  401300:	4801      	ldr	r0, [pc, #4]	; (401308 <PIOC_Handler+0xc>)
  401302:	4b02      	ldr	r3, [pc, #8]	; (40130c <PIOC_Handler+0x10>)
  401304:	4798      	blx	r3
  401306:	bd08      	pop	{r3, pc}
  401308:	400e1200 	.word	0x400e1200
  40130c:	00401215 	.word	0x00401215

00401310 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401310:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401312:	2110      	movs	r1, #16
  401314:	4801      	ldr	r0, [pc, #4]	; (40131c <PIOD_Handler+0xc>)
  401316:	4b02      	ldr	r3, [pc, #8]	; (401320 <PIOD_Handler+0x10>)
  401318:	4798      	blx	r3
  40131a:	bd08      	pop	{r3, pc}
  40131c:	400e1400 	.word	0x400e1400
  401320:	00401215 	.word	0x00401215

00401324 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401324:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401326:	2111      	movs	r1, #17
  401328:	4801      	ldr	r0, [pc, #4]	; (401330 <PIOE_Handler+0xc>)
  40132a:	4b02      	ldr	r3, [pc, #8]	; (401334 <PIOE_Handler+0x10>)
  40132c:	4798      	blx	r3
  40132e:	bd08      	pop	{r3, pc}
  401330:	400e1600 	.word	0x400e1600
  401334:	00401215 	.word	0x00401215

00401338 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401338:	2803      	cmp	r0, #3
  40133a:	d011      	beq.n	401360 <pmc_mck_set_division+0x28>
  40133c:	2804      	cmp	r0, #4
  40133e:	d012      	beq.n	401366 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401340:	2802      	cmp	r0, #2
  401342:	bf0c      	ite	eq
  401344:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401348:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40134a:	4a08      	ldr	r2, [pc, #32]	; (40136c <pmc_mck_set_division+0x34>)
  40134c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40134e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401352:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401354:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401356:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401358:	f013 0f08 	tst.w	r3, #8
  40135c:	d0fb      	beq.n	401356 <pmc_mck_set_division+0x1e>
}
  40135e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401360:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401364:	e7f1      	b.n	40134a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401366:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40136a:	e7ee      	b.n	40134a <pmc_mck_set_division+0x12>
  40136c:	400e0600 	.word	0x400e0600

00401370 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401370:	4a17      	ldr	r2, [pc, #92]	; (4013d0 <pmc_switch_mck_to_pllack+0x60>)
  401372:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401378:	4318      	orrs	r0, r3
  40137a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40137c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40137e:	f013 0f08 	tst.w	r3, #8
  401382:	d10a      	bne.n	40139a <pmc_switch_mck_to_pllack+0x2a>
  401384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401388:	4911      	ldr	r1, [pc, #68]	; (4013d0 <pmc_switch_mck_to_pllack+0x60>)
  40138a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40138c:	f012 0f08 	tst.w	r2, #8
  401390:	d103      	bne.n	40139a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401392:	3b01      	subs	r3, #1
  401394:	d1f9      	bne.n	40138a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401396:	2001      	movs	r0, #1
  401398:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40139a:	4a0d      	ldr	r2, [pc, #52]	; (4013d0 <pmc_switch_mck_to_pllack+0x60>)
  40139c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40139e:	f023 0303 	bic.w	r3, r3, #3
  4013a2:	f043 0302 	orr.w	r3, r3, #2
  4013a6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013aa:	f013 0f08 	tst.w	r3, #8
  4013ae:	d10a      	bne.n	4013c6 <pmc_switch_mck_to_pllack+0x56>
  4013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013b4:	4906      	ldr	r1, [pc, #24]	; (4013d0 <pmc_switch_mck_to_pllack+0x60>)
  4013b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013b8:	f012 0f08 	tst.w	r2, #8
  4013bc:	d105      	bne.n	4013ca <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013be:	3b01      	subs	r3, #1
  4013c0:	d1f9      	bne.n	4013b6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4013c2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4013c4:	4770      	bx	lr
	return 0;
  4013c6:	2000      	movs	r0, #0
  4013c8:	4770      	bx	lr
  4013ca:	2000      	movs	r0, #0
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop
  4013d0:	400e0600 	.word	0x400e0600

004013d4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4013d4:	b9a0      	cbnz	r0, 401400 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013d6:	480e      	ldr	r0, [pc, #56]	; (401410 <pmc_switch_mainck_to_xtal+0x3c>)
  4013d8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4013da:	0209      	lsls	r1, r1, #8
  4013dc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4013de:	4a0d      	ldr	r2, [pc, #52]	; (401414 <pmc_switch_mainck_to_xtal+0x40>)
  4013e0:	401a      	ands	r2, r3
  4013e2:	4b0d      	ldr	r3, [pc, #52]	; (401418 <pmc_switch_mainck_to_xtal+0x44>)
  4013e4:	4313      	orrs	r3, r2
  4013e6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013e8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4013ea:	4602      	mov	r2, r0
  4013ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013ee:	f013 0f01 	tst.w	r3, #1
  4013f2:	d0fb      	beq.n	4013ec <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4013f4:	4a06      	ldr	r2, [pc, #24]	; (401410 <pmc_switch_mainck_to_xtal+0x3c>)
  4013f6:	6a11      	ldr	r1, [r2, #32]
  4013f8:	4b08      	ldr	r3, [pc, #32]	; (40141c <pmc_switch_mainck_to_xtal+0x48>)
  4013fa:	430b      	orrs	r3, r1
  4013fc:	6213      	str	r3, [r2, #32]
  4013fe:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401400:	4903      	ldr	r1, [pc, #12]	; (401410 <pmc_switch_mainck_to_xtal+0x3c>)
  401402:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401404:	4a06      	ldr	r2, [pc, #24]	; (401420 <pmc_switch_mainck_to_xtal+0x4c>)
  401406:	401a      	ands	r2, r3
  401408:	4b06      	ldr	r3, [pc, #24]	; (401424 <pmc_switch_mainck_to_xtal+0x50>)
  40140a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40140c:	620b      	str	r3, [r1, #32]
  40140e:	4770      	bx	lr
  401410:	400e0600 	.word	0x400e0600
  401414:	ffc8fffc 	.word	0xffc8fffc
  401418:	00370001 	.word	0x00370001
  40141c:	01370000 	.word	0x01370000
  401420:	fec8fffc 	.word	0xfec8fffc
  401424:	01370002 	.word	0x01370002

00401428 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401428:	4b02      	ldr	r3, [pc, #8]	; (401434 <pmc_osc_is_ready_mainck+0xc>)
  40142a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40142c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401430:	4770      	bx	lr
  401432:	bf00      	nop
  401434:	400e0600 	.word	0x400e0600

00401438 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401438:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40143c:	4b01      	ldr	r3, [pc, #4]	; (401444 <pmc_disable_pllack+0xc>)
  40143e:	629a      	str	r2, [r3, #40]	; 0x28
  401440:	4770      	bx	lr
  401442:	bf00      	nop
  401444:	400e0600 	.word	0x400e0600

00401448 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401448:	4b02      	ldr	r3, [pc, #8]	; (401454 <pmc_is_locked_pllack+0xc>)
  40144a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40144c:	f000 0002 	and.w	r0, r0, #2
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	400e0600 	.word	0x400e0600

00401458 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401458:	283f      	cmp	r0, #63	; 0x3f
  40145a:	d81e      	bhi.n	40149a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40145c:	281f      	cmp	r0, #31
  40145e:	d80c      	bhi.n	40147a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401460:	4b11      	ldr	r3, [pc, #68]	; (4014a8 <pmc_enable_periph_clk+0x50>)
  401462:	699a      	ldr	r2, [r3, #24]
  401464:	2301      	movs	r3, #1
  401466:	4083      	lsls	r3, r0
  401468:	4393      	bics	r3, r2
  40146a:	d018      	beq.n	40149e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40146c:	2301      	movs	r3, #1
  40146e:	fa03 f000 	lsl.w	r0, r3, r0
  401472:	4b0d      	ldr	r3, [pc, #52]	; (4014a8 <pmc_enable_periph_clk+0x50>)
  401474:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401476:	2000      	movs	r0, #0
  401478:	4770      	bx	lr
		ul_id -= 32;
  40147a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40147c:	4b0a      	ldr	r3, [pc, #40]	; (4014a8 <pmc_enable_periph_clk+0x50>)
  40147e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401482:	2301      	movs	r3, #1
  401484:	4083      	lsls	r3, r0
  401486:	4393      	bics	r3, r2
  401488:	d00b      	beq.n	4014a2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40148a:	2301      	movs	r3, #1
  40148c:	fa03 f000 	lsl.w	r0, r3, r0
  401490:	4b05      	ldr	r3, [pc, #20]	; (4014a8 <pmc_enable_periph_clk+0x50>)
  401492:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401496:	2000      	movs	r0, #0
  401498:	4770      	bx	lr
		return 1;
  40149a:	2001      	movs	r0, #1
  40149c:	4770      	bx	lr
	return 0;
  40149e:	2000      	movs	r0, #0
  4014a0:	4770      	bx	lr
  4014a2:	2000      	movs	r0, #0
}
  4014a4:	4770      	bx	lr
  4014a6:	bf00      	nop
  4014a8:	400e0600 	.word	0x400e0600

004014ac <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4014ac:	4770      	bx	lr
	...

004014b0 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4014b0:	4a10      	ldr	r2, [pc, #64]	; (4014f4 <pmc_enable_waitmode+0x44>)
  4014b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4014b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4014b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4014bc:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4014be:	6a11      	ldr	r1, [r2, #32]
  4014c0:	4b0d      	ldr	r3, [pc, #52]	; (4014f8 <pmc_enable_waitmode+0x48>)
  4014c2:	430b      	orrs	r3, r1
  4014c4:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014c8:	f013 0f08 	tst.w	r3, #8
  4014cc:	d0fb      	beq.n	4014c6 <pmc_enable_waitmode+0x16>
  4014ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4014d2:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4014d4:	3b01      	subs	r3, #1
  4014d6:	d1fc      	bne.n	4014d2 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4014d8:	4a06      	ldr	r2, [pc, #24]	; (4014f4 <pmc_enable_waitmode+0x44>)
  4014da:	6a13      	ldr	r3, [r2, #32]
  4014dc:	f013 0f08 	tst.w	r3, #8
  4014e0:	d0fb      	beq.n	4014da <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4014e2:	4a04      	ldr	r2, [pc, #16]	; (4014f4 <pmc_enable_waitmode+0x44>)
  4014e4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4014e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4014ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4014ee:	6713      	str	r3, [r2, #112]	; 0x70
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop
  4014f4:	400e0600 	.word	0x400e0600
  4014f8:	00370004 	.word	0x00370004

004014fc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4014fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  401500:	1e43      	subs	r3, r0, #1
  401502:	2b04      	cmp	r3, #4
  401504:	f200 8107 	bhi.w	401716 <pmc_sleep+0x21a>
  401508:	e8df f013 	tbh	[pc, r3, lsl #1]
  40150c:	00050005 	.word	0x00050005
  401510:	00150015 	.word	0x00150015
  401514:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401516:	4a81      	ldr	r2, [pc, #516]	; (40171c <pmc_sleep+0x220>)
  401518:	6913      	ldr	r3, [r2, #16]
  40151a:	f023 0304 	bic.w	r3, r3, #4
  40151e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  401520:	2201      	movs	r2, #1
  401522:	4b7f      	ldr	r3, [pc, #508]	; (401720 <pmc_sleep+0x224>)
  401524:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401526:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40152a:	b662      	cpsie	i
  __ASM volatile ("dsb");
  40152c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  401530:	bf30      	wfi
  401532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401536:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401538:	2803      	cmp	r0, #3
  40153a:	bf0c      	ite	eq
  40153c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40153e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  401542:	4b78      	ldr	r3, [pc, #480]	; (401724 <pmc_sleep+0x228>)
  401544:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401546:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401548:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40154c:	2200      	movs	r2, #0
  40154e:	4b74      	ldr	r3, [pc, #464]	; (401720 <pmc_sleep+0x224>)
  401550:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  401552:	2201      	movs	r2, #1
  401554:	4b74      	ldr	r3, [pc, #464]	; (401728 <pmc_sleep+0x22c>)
  401556:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  401558:	4b74      	ldr	r3, [pc, #464]	; (40172c <pmc_sleep+0x230>)
  40155a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40155c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40155e:	4a74      	ldr	r2, [pc, #464]	; (401730 <pmc_sleep+0x234>)
  401560:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401564:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401566:	4a73      	ldr	r2, [pc, #460]	; (401734 <pmc_sleep+0x238>)
  401568:	433a      	orrs	r2, r7
  40156a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40156c:	f005 0903 	and.w	r9, r5, #3
  401570:	f1b9 0f01 	cmp.w	r9, #1
  401574:	f240 8089 	bls.w	40168a <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401578:	f025 0103 	bic.w	r1, r5, #3
  40157c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  401580:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401582:	461a      	mov	r2, r3
  401584:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401586:	f013 0f08 	tst.w	r3, #8
  40158a:	d0fb      	beq.n	401584 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40158c:	f011 0f70 	tst.w	r1, #112	; 0x70
  401590:	d008      	beq.n	4015a4 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401592:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  401596:	4b65      	ldr	r3, [pc, #404]	; (40172c <pmc_sleep+0x230>)
  401598:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40159a:	461a      	mov	r2, r3
  40159c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40159e:	f013 0f08 	tst.w	r3, #8
  4015a2:	d0fb      	beq.n	40159c <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4015a4:	4b64      	ldr	r3, [pc, #400]	; (401738 <pmc_sleep+0x23c>)
  4015a6:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4015a8:	4a60      	ldr	r2, [pc, #384]	; (40172c <pmc_sleep+0x230>)
  4015aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4015b0:	d0fb      	beq.n	4015aa <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4015b2:	4a5e      	ldr	r2, [pc, #376]	; (40172c <pmc_sleep+0x230>)
  4015b4:	6a11      	ldr	r1, [r2, #32]
  4015b6:	4b61      	ldr	r3, [pc, #388]	; (40173c <pmc_sleep+0x240>)
  4015b8:	400b      	ands	r3, r1
  4015ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015be:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4015c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4015c6:	d0fb      	beq.n	4015c0 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4015c8:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4015cc:	4a58      	ldr	r2, [pc, #352]	; (401730 <pmc_sleep+0x234>)
  4015ce:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4015d0:	2c04      	cmp	r4, #4
  4015d2:	d05c      	beq.n	40168e <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4015d4:	4c52      	ldr	r4, [pc, #328]	; (401720 <pmc_sleep+0x224>)
  4015d6:	2301      	movs	r3, #1
  4015d8:	7023      	strb	r3, [r4, #0]
  4015da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4015de:	b662      	cpsie	i

		pmc_enable_waitmode();
  4015e0:	4b57      	ldr	r3, [pc, #348]	; (401740 <pmc_sleep+0x244>)
  4015e2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4015e4:	b672      	cpsid	i
  4015e6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4015ea:	2300      	movs	r3, #0
  4015ec:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4015ee:	f017 0f02 	tst.w	r7, #2
  4015f2:	d055      	beq.n	4016a0 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015f4:	4a4d      	ldr	r2, [pc, #308]	; (40172c <pmc_sleep+0x230>)
  4015f6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015f8:	4952      	ldr	r1, [pc, #328]	; (401744 <pmc_sleep+0x248>)
  4015fa:	4019      	ands	r1, r3
  4015fc:	4b52      	ldr	r3, [pc, #328]	; (401748 <pmc_sleep+0x24c>)
  4015fe:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401600:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401602:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401604:	4b51      	ldr	r3, [pc, #324]	; (40174c <pmc_sleep+0x250>)
  401606:	400b      	ands	r3, r1
  401608:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40160c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40160e:	4b50      	ldr	r3, [pc, #320]	; (401750 <pmc_sleep+0x254>)
  401610:	4033      	ands	r3, r6
  401612:	2b00      	cmp	r3, #0
  401614:	d06e      	beq.n	4016f4 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401616:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40161a:	4b44      	ldr	r3, [pc, #272]	; (40172c <pmc_sleep+0x230>)
  40161c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40161e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401620:	f1b9 0f02 	cmp.w	r9, #2
  401624:	d104      	bne.n	401630 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401626:	4a41      	ldr	r2, [pc, #260]	; (40172c <pmc_sleep+0x230>)
  401628:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40162a:	f013 0f02 	tst.w	r3, #2
  40162e:	d0fb      	beq.n	401628 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  401630:	4a3e      	ldr	r2, [pc, #248]	; (40172c <pmc_sleep+0x230>)
  401632:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401638:	f005 0070 	and.w	r0, r5, #112	; 0x70
  40163c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40163e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401640:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401642:	f013 0f08 	tst.w	r3, #8
  401646:	d0fb      	beq.n	401640 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401648:	4b39      	ldr	r3, [pc, #228]	; (401730 <pmc_sleep+0x234>)
  40164a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40164e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401652:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401654:	461a      	mov	r2, r3
  401656:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401658:	f013 0f08 	tst.w	r3, #8
  40165c:	d0fb      	beq.n	401656 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40165e:	4a33      	ldr	r2, [pc, #204]	; (40172c <pmc_sleep+0x230>)
  401660:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401662:	420b      	tst	r3, r1
  401664:	d0fc      	beq.n	401660 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401666:	2200      	movs	r2, #0
  401668:	4b2f      	ldr	r3, [pc, #188]	; (401728 <pmc_sleep+0x22c>)
  40166a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40166c:	4b39      	ldr	r3, [pc, #228]	; (401754 <pmc_sleep+0x258>)
  40166e:	681b      	ldr	r3, [r3, #0]
  401670:	b11b      	cbz	r3, 40167a <pmc_sleep+0x17e>
			callback_clocks_restored();
  401672:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401674:	2200      	movs	r2, #0
  401676:	4b37      	ldr	r3, [pc, #220]	; (401754 <pmc_sleep+0x258>)
  401678:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40167a:	2201      	movs	r2, #1
  40167c:	4b28      	ldr	r3, [pc, #160]	; (401720 <pmc_sleep+0x224>)
  40167e:	701a      	strb	r2, [r3, #0]
  401680:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401684:	b662      	cpsie	i
  401686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40168a:	4629      	mov	r1, r5
  40168c:	e77e      	b.n	40158c <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40168e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  401692:	6a11      	ldr	r1, [r2, #32]
  401694:	4b30      	ldr	r3, [pc, #192]	; (401758 <pmc_sleep+0x25c>)
  401696:	400b      	ands	r3, r1
  401698:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40169c:	6213      	str	r3, [r2, #32]
  40169e:	e799      	b.n	4015d4 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4016a0:	f017 0f01 	tst.w	r7, #1
  4016a4:	d0b3      	beq.n	40160e <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4016a6:	4b21      	ldr	r3, [pc, #132]	; (40172c <pmc_sleep+0x230>)
  4016a8:	6a1b      	ldr	r3, [r3, #32]
  4016aa:	f013 0f01 	tst.w	r3, #1
  4016ae:	d10b      	bne.n	4016c8 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4016b0:	491e      	ldr	r1, [pc, #120]	; (40172c <pmc_sleep+0x230>)
  4016b2:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4016b4:	4a29      	ldr	r2, [pc, #164]	; (40175c <pmc_sleep+0x260>)
  4016b6:	401a      	ands	r2, r3
  4016b8:	4b29      	ldr	r3, [pc, #164]	; (401760 <pmc_sleep+0x264>)
  4016ba:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4016bc:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4016be:	460a      	mov	r2, r1
  4016c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016c2:	f013 0f01 	tst.w	r3, #1
  4016c6:	d0fb      	beq.n	4016c0 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4016c8:	4b18      	ldr	r3, [pc, #96]	; (40172c <pmc_sleep+0x230>)
  4016ca:	6a1b      	ldr	r3, [r3, #32]
  4016cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4016d0:	d108      	bne.n	4016e4 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4016d2:	4a16      	ldr	r2, [pc, #88]	; (40172c <pmc_sleep+0x230>)
  4016d4:	6a11      	ldr	r1, [r2, #32]
  4016d6:	4b23      	ldr	r3, [pc, #140]	; (401764 <pmc_sleep+0x268>)
  4016d8:	430b      	orrs	r3, r1
  4016da:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4016dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4016e2:	d0fb      	beq.n	4016dc <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4016e4:	4a11      	ldr	r2, [pc, #68]	; (40172c <pmc_sleep+0x230>)
  4016e6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4016e8:	4b18      	ldr	r3, [pc, #96]	; (40174c <pmc_sleep+0x250>)
  4016ea:	400b      	ands	r3, r1
  4016ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4016f0:	6213      	str	r3, [r2, #32]
  4016f2:	e78c      	b.n	40160e <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  4016f4:	2100      	movs	r1, #0
  4016f6:	e793      	b.n	401620 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4016f8:	4a08      	ldr	r2, [pc, #32]	; (40171c <pmc_sleep+0x220>)
  4016fa:	6913      	ldr	r3, [r2, #16]
  4016fc:	f043 0304 	orr.w	r3, r3, #4
  401700:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401702:	4a19      	ldr	r2, [pc, #100]	; (401768 <pmc_sleep+0x26c>)
  401704:	4b19      	ldr	r3, [pc, #100]	; (40176c <pmc_sleep+0x270>)
  401706:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401708:	2201      	movs	r2, #1
  40170a:	4b05      	ldr	r3, [pc, #20]	; (401720 <pmc_sleep+0x224>)
  40170c:	701a      	strb	r2, [r3, #0]
  40170e:	f3bf 8f5f 	dmb	sy
  401712:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401714:	bf30      	wfi
  401716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40171a:	bf00      	nop
  40171c:	e000ed00 	.word	0xe000ed00
  401720:	20400018 	.word	0x20400018
  401724:	004014ad 	.word	0x004014ad
  401728:	20400c68 	.word	0x20400c68
  40172c:	400e0600 	.word	0x400e0600
  401730:	400e0c00 	.word	0x400e0c00
  401734:	00370008 	.word	0x00370008
  401738:	00401439 	.word	0x00401439
  40173c:	fec8ffff 	.word	0xfec8ffff
  401740:	004014b1 	.word	0x004014b1
  401744:	fec8fffc 	.word	0xfec8fffc
  401748:	01370002 	.word	0x01370002
  40174c:	ffc8ff87 	.word	0xffc8ff87
  401750:	07ff0000 	.word	0x07ff0000
  401754:	20400c6c 	.word	0x20400c6c
  401758:	ffc8fffe 	.word	0xffc8fffe
  40175c:	ffc8fffc 	.word	0xffc8fffc
  401760:	00370001 	.word	0x00370001
  401764:	01370000 	.word	0x01370000
  401768:	a5000004 	.word	0xa5000004
  40176c:	400e1810 	.word	0x400e1810

00401770 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401770:	e7fe      	b.n	401770 <Dummy_Handler>
	...

00401774 <Reset_Handler>:
{
  401774:	b500      	push	{lr}
  401776:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401778:	4b25      	ldr	r3, [pc, #148]	; (401810 <Reset_Handler+0x9c>)
  40177a:	4a26      	ldr	r2, [pc, #152]	; (401814 <Reset_Handler+0xa0>)
  40177c:	429a      	cmp	r2, r3
  40177e:	d010      	beq.n	4017a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401780:	4b25      	ldr	r3, [pc, #148]	; (401818 <Reset_Handler+0xa4>)
  401782:	4a23      	ldr	r2, [pc, #140]	; (401810 <Reset_Handler+0x9c>)
  401784:	429a      	cmp	r2, r3
  401786:	d20c      	bcs.n	4017a2 <Reset_Handler+0x2e>
  401788:	3b01      	subs	r3, #1
  40178a:	1a9b      	subs	r3, r3, r2
  40178c:	f023 0303 	bic.w	r3, r3, #3
  401790:	3304      	adds	r3, #4
  401792:	4413      	add	r3, r2
  401794:	491f      	ldr	r1, [pc, #124]	; (401814 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401796:	f851 0b04 	ldr.w	r0, [r1], #4
  40179a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40179e:	429a      	cmp	r2, r3
  4017a0:	d1f9      	bne.n	401796 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4017a2:	4b1e      	ldr	r3, [pc, #120]	; (40181c <Reset_Handler+0xa8>)
  4017a4:	4a1e      	ldr	r2, [pc, #120]	; (401820 <Reset_Handler+0xac>)
  4017a6:	429a      	cmp	r2, r3
  4017a8:	d20a      	bcs.n	4017c0 <Reset_Handler+0x4c>
  4017aa:	3b01      	subs	r3, #1
  4017ac:	1a9b      	subs	r3, r3, r2
  4017ae:	f023 0303 	bic.w	r3, r3, #3
  4017b2:	3304      	adds	r3, #4
  4017b4:	4413      	add	r3, r2
                *pDest++ = 0;
  4017b6:	2100      	movs	r1, #0
  4017b8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4017bc:	4293      	cmp	r3, r2
  4017be:	d1fb      	bne.n	4017b8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4017c0:	4a18      	ldr	r2, [pc, #96]	; (401824 <Reset_Handler+0xb0>)
  4017c2:	4b19      	ldr	r3, [pc, #100]	; (401828 <Reset_Handler+0xb4>)
  4017c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4017c8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4017ca:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4017ce:	fab3 f383 	clz	r3, r3
  4017d2:	095b      	lsrs	r3, r3, #5
  4017d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4017d6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4017d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4017dc:	2200      	movs	r2, #0
  4017de:	4b13      	ldr	r3, [pc, #76]	; (40182c <Reset_Handler+0xb8>)
  4017e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4017e2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4017e4:	4a12      	ldr	r2, [pc, #72]	; (401830 <Reset_Handler+0xbc>)
  4017e6:	6813      	ldr	r3, [r2, #0]
  4017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4017ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017f2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4017f6:	b129      	cbz	r1, 401804 <Reset_Handler+0x90>
		cpu_irq_enable();
  4017f8:	2201      	movs	r2, #1
  4017fa:	4b0c      	ldr	r3, [pc, #48]	; (40182c <Reset_Handler+0xb8>)
  4017fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4017fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401802:	b662      	cpsie	i
        __libc_init_array();
  401804:	4b0b      	ldr	r3, [pc, #44]	; (401834 <Reset_Handler+0xc0>)
  401806:	4798      	blx	r3
        main();
  401808:	4b0b      	ldr	r3, [pc, #44]	; (401838 <Reset_Handler+0xc4>)
  40180a:	4798      	blx	r3
  40180c:	e7fe      	b.n	40180c <Reset_Handler+0x98>
  40180e:	bf00      	nop
  401810:	20400000 	.word	0x20400000
  401814:	0040770c 	.word	0x0040770c
  401818:	204009d0 	.word	0x204009d0
  40181c:	20400cd4 	.word	0x20400cd4
  401820:	204009d0 	.word	0x204009d0
  401824:	e000ed00 	.word	0xe000ed00
  401828:	00400000 	.word	0x00400000
  40182c:	20400018 	.word	0x20400018
  401830:	e000ed88 	.word	0xe000ed88
  401834:	004023d1 	.word	0x004023d1
  401838:	00401ef9 	.word	0x00401ef9

0040183c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40183c:	4b3b      	ldr	r3, [pc, #236]	; (40192c <SystemCoreClockUpdate+0xf0>)
  40183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401840:	f003 0303 	and.w	r3, r3, #3
  401844:	2b01      	cmp	r3, #1
  401846:	d01d      	beq.n	401884 <SystemCoreClockUpdate+0x48>
  401848:	b183      	cbz	r3, 40186c <SystemCoreClockUpdate+0x30>
  40184a:	2b02      	cmp	r3, #2
  40184c:	d036      	beq.n	4018bc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40184e:	4b37      	ldr	r3, [pc, #220]	; (40192c <SystemCoreClockUpdate+0xf0>)
  401850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401852:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401856:	2b70      	cmp	r3, #112	; 0x70
  401858:	d05f      	beq.n	40191a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40185a:	4b34      	ldr	r3, [pc, #208]	; (40192c <SystemCoreClockUpdate+0xf0>)
  40185c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40185e:	4934      	ldr	r1, [pc, #208]	; (401930 <SystemCoreClockUpdate+0xf4>)
  401860:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401864:	680b      	ldr	r3, [r1, #0]
  401866:	40d3      	lsrs	r3, r2
  401868:	600b      	str	r3, [r1, #0]
  40186a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40186c:	4b31      	ldr	r3, [pc, #196]	; (401934 <SystemCoreClockUpdate+0xf8>)
  40186e:	695b      	ldr	r3, [r3, #20]
  401870:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401874:	bf14      	ite	ne
  401876:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40187a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40187e:	4b2c      	ldr	r3, [pc, #176]	; (401930 <SystemCoreClockUpdate+0xf4>)
  401880:	601a      	str	r2, [r3, #0]
  401882:	e7e4      	b.n	40184e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401884:	4b29      	ldr	r3, [pc, #164]	; (40192c <SystemCoreClockUpdate+0xf0>)
  401886:	6a1b      	ldr	r3, [r3, #32]
  401888:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40188c:	d003      	beq.n	401896 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40188e:	4a2a      	ldr	r2, [pc, #168]	; (401938 <SystemCoreClockUpdate+0xfc>)
  401890:	4b27      	ldr	r3, [pc, #156]	; (401930 <SystemCoreClockUpdate+0xf4>)
  401892:	601a      	str	r2, [r3, #0]
  401894:	e7db      	b.n	40184e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401896:	4a29      	ldr	r2, [pc, #164]	; (40193c <SystemCoreClockUpdate+0x100>)
  401898:	4b25      	ldr	r3, [pc, #148]	; (401930 <SystemCoreClockUpdate+0xf4>)
  40189a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40189c:	4b23      	ldr	r3, [pc, #140]	; (40192c <SystemCoreClockUpdate+0xf0>)
  40189e:	6a1b      	ldr	r3, [r3, #32]
  4018a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018a4:	2b10      	cmp	r3, #16
  4018a6:	d005      	beq.n	4018b4 <SystemCoreClockUpdate+0x78>
  4018a8:	2b20      	cmp	r3, #32
  4018aa:	d1d0      	bne.n	40184e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4018ac:	4a22      	ldr	r2, [pc, #136]	; (401938 <SystemCoreClockUpdate+0xfc>)
  4018ae:	4b20      	ldr	r3, [pc, #128]	; (401930 <SystemCoreClockUpdate+0xf4>)
  4018b0:	601a      	str	r2, [r3, #0]
          break;
  4018b2:	e7cc      	b.n	40184e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4018b4:	4a22      	ldr	r2, [pc, #136]	; (401940 <SystemCoreClockUpdate+0x104>)
  4018b6:	4b1e      	ldr	r3, [pc, #120]	; (401930 <SystemCoreClockUpdate+0xf4>)
  4018b8:	601a      	str	r2, [r3, #0]
          break;
  4018ba:	e7c8      	b.n	40184e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4018bc:	4b1b      	ldr	r3, [pc, #108]	; (40192c <SystemCoreClockUpdate+0xf0>)
  4018be:	6a1b      	ldr	r3, [r3, #32]
  4018c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4018c4:	d016      	beq.n	4018f4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4018c6:	4a1c      	ldr	r2, [pc, #112]	; (401938 <SystemCoreClockUpdate+0xfc>)
  4018c8:	4b19      	ldr	r3, [pc, #100]	; (401930 <SystemCoreClockUpdate+0xf4>)
  4018ca:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4018cc:	4b17      	ldr	r3, [pc, #92]	; (40192c <SystemCoreClockUpdate+0xf0>)
  4018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018d0:	f003 0303 	and.w	r3, r3, #3
  4018d4:	2b02      	cmp	r3, #2
  4018d6:	d1ba      	bne.n	40184e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018d8:	4a14      	ldr	r2, [pc, #80]	; (40192c <SystemCoreClockUpdate+0xf0>)
  4018da:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4018de:	4814      	ldr	r0, [pc, #80]	; (401930 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018e0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4018e4:	6803      	ldr	r3, [r0, #0]
  4018e6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018ea:	b2d2      	uxtb	r2, r2
  4018ec:	fbb3 f3f2 	udiv	r3, r3, r2
  4018f0:	6003      	str	r3, [r0, #0]
  4018f2:	e7ac      	b.n	40184e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018f4:	4a11      	ldr	r2, [pc, #68]	; (40193c <SystemCoreClockUpdate+0x100>)
  4018f6:	4b0e      	ldr	r3, [pc, #56]	; (401930 <SystemCoreClockUpdate+0xf4>)
  4018f8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018fa:	4b0c      	ldr	r3, [pc, #48]	; (40192c <SystemCoreClockUpdate+0xf0>)
  4018fc:	6a1b      	ldr	r3, [r3, #32]
  4018fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401902:	2b10      	cmp	r3, #16
  401904:	d005      	beq.n	401912 <SystemCoreClockUpdate+0xd6>
  401906:	2b20      	cmp	r3, #32
  401908:	d1e0      	bne.n	4018cc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40190a:	4a0b      	ldr	r2, [pc, #44]	; (401938 <SystemCoreClockUpdate+0xfc>)
  40190c:	4b08      	ldr	r3, [pc, #32]	; (401930 <SystemCoreClockUpdate+0xf4>)
  40190e:	601a      	str	r2, [r3, #0]
          break;
  401910:	e7dc      	b.n	4018cc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401912:	4a0b      	ldr	r2, [pc, #44]	; (401940 <SystemCoreClockUpdate+0x104>)
  401914:	4b06      	ldr	r3, [pc, #24]	; (401930 <SystemCoreClockUpdate+0xf4>)
  401916:	601a      	str	r2, [r3, #0]
          break;
  401918:	e7d8      	b.n	4018cc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40191a:	4a05      	ldr	r2, [pc, #20]	; (401930 <SystemCoreClockUpdate+0xf4>)
  40191c:	6813      	ldr	r3, [r2, #0]
  40191e:	4909      	ldr	r1, [pc, #36]	; (401944 <SystemCoreClockUpdate+0x108>)
  401920:	fba1 1303 	umull	r1, r3, r1, r3
  401924:	085b      	lsrs	r3, r3, #1
  401926:	6013      	str	r3, [r2, #0]
  401928:	4770      	bx	lr
  40192a:	bf00      	nop
  40192c:	400e0600 	.word	0x400e0600
  401930:	2040001c 	.word	0x2040001c
  401934:	400e1810 	.word	0x400e1810
  401938:	00b71b00 	.word	0x00b71b00
  40193c:	003d0900 	.word	0x003d0900
  401940:	007a1200 	.word	0x007a1200
  401944:	aaaaaaab 	.word	0xaaaaaaab

00401948 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401948:	4b16      	ldr	r3, [pc, #88]	; (4019a4 <system_init_flash+0x5c>)
  40194a:	4298      	cmp	r0, r3
  40194c:	d913      	bls.n	401976 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40194e:	4b16      	ldr	r3, [pc, #88]	; (4019a8 <system_init_flash+0x60>)
  401950:	4298      	cmp	r0, r3
  401952:	d915      	bls.n	401980 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401954:	4b15      	ldr	r3, [pc, #84]	; (4019ac <system_init_flash+0x64>)
  401956:	4298      	cmp	r0, r3
  401958:	d916      	bls.n	401988 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40195a:	4b15      	ldr	r3, [pc, #84]	; (4019b0 <system_init_flash+0x68>)
  40195c:	4298      	cmp	r0, r3
  40195e:	d917      	bls.n	401990 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401960:	4b14      	ldr	r3, [pc, #80]	; (4019b4 <system_init_flash+0x6c>)
  401962:	4298      	cmp	r0, r3
  401964:	d918      	bls.n	401998 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401966:	4b14      	ldr	r3, [pc, #80]	; (4019b8 <system_init_flash+0x70>)
  401968:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40196a:	bf94      	ite	ls
  40196c:	4a13      	ldrls	r2, [pc, #76]	; (4019bc <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40196e:	4a14      	ldrhi	r2, [pc, #80]	; (4019c0 <system_init_flash+0x78>)
  401970:	4b14      	ldr	r3, [pc, #80]	; (4019c4 <system_init_flash+0x7c>)
  401972:	601a      	str	r2, [r3, #0]
  401974:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401976:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40197a:	4b12      	ldr	r3, [pc, #72]	; (4019c4 <system_init_flash+0x7c>)
  40197c:	601a      	str	r2, [r3, #0]
  40197e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401980:	4a11      	ldr	r2, [pc, #68]	; (4019c8 <system_init_flash+0x80>)
  401982:	4b10      	ldr	r3, [pc, #64]	; (4019c4 <system_init_flash+0x7c>)
  401984:	601a      	str	r2, [r3, #0]
  401986:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401988:	4a10      	ldr	r2, [pc, #64]	; (4019cc <system_init_flash+0x84>)
  40198a:	4b0e      	ldr	r3, [pc, #56]	; (4019c4 <system_init_flash+0x7c>)
  40198c:	601a      	str	r2, [r3, #0]
  40198e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401990:	4a0f      	ldr	r2, [pc, #60]	; (4019d0 <system_init_flash+0x88>)
  401992:	4b0c      	ldr	r3, [pc, #48]	; (4019c4 <system_init_flash+0x7c>)
  401994:	601a      	str	r2, [r3, #0]
  401996:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401998:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40199c:	4b09      	ldr	r3, [pc, #36]	; (4019c4 <system_init_flash+0x7c>)
  40199e:	601a      	str	r2, [r3, #0]
  4019a0:	4770      	bx	lr
  4019a2:	bf00      	nop
  4019a4:	015ef3bf 	.word	0x015ef3bf
  4019a8:	02bde77f 	.word	0x02bde77f
  4019ac:	041cdb3f 	.word	0x041cdb3f
  4019b0:	057bceff 	.word	0x057bceff
  4019b4:	06dac2bf 	.word	0x06dac2bf
  4019b8:	0839b67f 	.word	0x0839b67f
  4019bc:	04000500 	.word	0x04000500
  4019c0:	04000600 	.word	0x04000600
  4019c4:	400e0c00 	.word	0x400e0c00
  4019c8:	04000100 	.word	0x04000100
  4019cc:	04000200 	.word	0x04000200
  4019d0:	04000300 	.word	0x04000300

004019d4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4019d4:	4b0a      	ldr	r3, [pc, #40]	; (401a00 <_sbrk+0x2c>)
  4019d6:	681b      	ldr	r3, [r3, #0]
  4019d8:	b153      	cbz	r3, 4019f0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4019da:	4b09      	ldr	r3, [pc, #36]	; (401a00 <_sbrk+0x2c>)
  4019dc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4019de:	181a      	adds	r2, r3, r0
  4019e0:	4908      	ldr	r1, [pc, #32]	; (401a04 <_sbrk+0x30>)
  4019e2:	4291      	cmp	r1, r2
  4019e4:	db08      	blt.n	4019f8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4019e6:	4610      	mov	r0, r2
  4019e8:	4a05      	ldr	r2, [pc, #20]	; (401a00 <_sbrk+0x2c>)
  4019ea:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4019ec:	4618      	mov	r0, r3
  4019ee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4019f0:	4a05      	ldr	r2, [pc, #20]	; (401a08 <_sbrk+0x34>)
  4019f2:	4b03      	ldr	r3, [pc, #12]	; (401a00 <_sbrk+0x2c>)
  4019f4:	601a      	str	r2, [r3, #0]
  4019f6:	e7f0      	b.n	4019da <_sbrk+0x6>
		return (caddr_t) -1;	
  4019f8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4019fc:	4770      	bx	lr
  4019fe:	bf00      	nop
  401a00:	20400c70 	.word	0x20400c70
  401a04:	2045fffc 	.word	0x2045fffc
  401a08:	20402ed8 	.word	0x20402ed8

00401a0c <RTT_init>:

static float get_time_rtt(){
	uint ul_previous_time = rtt_read_timer_value(RTT);
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  401a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a10:	ed2d 8b02 	vpush	{d8}
  401a14:	b082      	sub	sp, #8
  401a16:	eeb0 8a40 	vmov.f32	s16, s0
  401a1a:	4680      	mov	r8, r0
  401a1c:	460f      	mov	r7, r1

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
	
	rtt_sel_source(RTT, false);
  401a1e:	4c20      	ldr	r4, [pc, #128]	; (401aa0 <RTT_init+0x94>)
  401a20:	2100      	movs	r1, #0
  401a22:	4620      	mov	r0, r4
  401a24:	4b1f      	ldr	r3, [pc, #124]	; (401aa4 <RTT_init+0x98>)
  401a26:	4798      	blx	r3
	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  401a28:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 401aa8 <RTT_init+0x9c>
  401a2c:	eec7 7a08 	vdiv.f32	s15, s14, s16
  401a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  401a34:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  401a38:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  401a3c:	4620      	mov	r0, r4
  401a3e:	4b1b      	ldr	r3, [pc, #108]	; (401aac <RTT_init+0xa0>)
  401a40:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  401a42:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  401a46:	d116      	bne.n	401a76 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401a48:	4b19      	ldr	r3, [pc, #100]	; (401ab0 <RTT_init+0xa4>)
  401a4a:	2208      	movs	r2, #8
  401a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401a50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401a54:	2180      	movs	r1, #128	; 0x80
  401a56:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a5a:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  401a5c:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  401a60:	d119      	bne.n	401a96 <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  401a62:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  401a66:	480e      	ldr	r0, [pc, #56]	; (401aa0 <RTT_init+0x94>)
  401a68:	4b12      	ldr	r3, [pc, #72]	; (401ab4 <RTT_init+0xa8>)
  401a6a:	4798      	blx	r3
	
}
  401a6c:	b002      	add	sp, #8
  401a6e:	ecbd 8b02 	vpop	{d8}
  401a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  401a76:	4620      	mov	r0, r4
  401a78:	4b0f      	ldr	r3, [pc, #60]	; (401ab8 <RTT_init+0xac>)
  401a7a:	4798      	blx	r3
  401a7c:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  401a7e:	4e08      	ldr	r6, [pc, #32]	; (401aa0 <RTT_init+0x94>)
  401a80:	4d0d      	ldr	r5, [pc, #52]	; (401ab8 <RTT_init+0xac>)
  401a82:	4630      	mov	r0, r6
  401a84:	47a8      	blx	r5
  401a86:	4284      	cmp	r4, r0
  401a88:	d0fb      	beq.n	401a82 <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401a8a:	eb04 0108 	add.w	r1, r4, r8
  401a8e:	4804      	ldr	r0, [pc, #16]	; (401aa0 <RTT_init+0x94>)
  401a90:	4b0a      	ldr	r3, [pc, #40]	; (401abc <RTT_init+0xb0>)
  401a92:	4798      	blx	r3
  401a94:	e7d8      	b.n	401a48 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  401a96:	4639      	mov	r1, r7
  401a98:	4801      	ldr	r0, [pc, #4]	; (401aa0 <RTT_init+0x94>)
  401a9a:	4b09      	ldr	r3, [pc, #36]	; (401ac0 <RTT_init+0xb4>)
  401a9c:	4798      	blx	r3
  401a9e:	e7e5      	b.n	401a6c <RTT_init+0x60>
  401aa0:	400e1830 	.word	0x400e1830
  401aa4:	004004ed 	.word	0x004004ed
  401aa8:	47000000 	.word	0x47000000
  401aac:	004004d9 	.word	0x004004d9
  401ab0:	e000e100 	.word	0xe000e100
  401ab4:	0040052d 	.word	0x0040052d
  401ab8:	00400541 	.word	0x00400541
  401abc:	00400559 	.word	0x00400559
  401ac0:	00400519 	.word	0x00400519

00401ac4 <but_callback>:
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
}

void but_callback(void){
  401ac4:	b508      	push	{r3, lr}
	if (pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK)) {
  401ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401aca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401ace:	4805      	ldr	r0, [pc, #20]	; (401ae4 <but_callback+0x20>)
  401ad0:	4b05      	ldr	r3, [pc, #20]	; (401ae8 <but_callback+0x24>)
  401ad2:	4798      	blx	r3
  401ad4:	b128      	cbz	r0, 401ae2 <but_callback+0x1e>
		but_flag = !but_flag;
  401ad6:	4a05      	ldr	r2, [pc, #20]	; (401aec <but_callback+0x28>)
  401ad8:	7813      	ldrb	r3, [r2, #0]
  401ada:	fab3 f383 	clz	r3, r3
  401ade:	095b      	lsrs	r3, r3, #5
  401ae0:	7013      	strb	r3, [r2, #0]
  401ae2:	bd08      	pop	{r3, pc}
  401ae4:	400e1400 	.word	0x400e1400
  401ae8:	0040102f 	.word	0x0040102f
  401aec:	20400c74 	.word	0x20400c74

00401af0 <LED_init>:
void LED_init(int estado) {
  401af0:	b510      	push	{r4, lr}
  401af2:	b082      	sub	sp, #8
  401af4:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED_PIO_ID);
  401af6:	200c      	movs	r0, #12
  401af8:	4b05      	ldr	r3, [pc, #20]	; (401b10 <LED_init+0x20>)
  401afa:	4798      	blx	r3
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, estado, 0, 0);
  401afc:	2300      	movs	r3, #0
  401afe:	9300      	str	r3, [sp, #0]
  401b00:	4622      	mov	r2, r4
  401b02:	f44f 7180 	mov.w	r1, #256	; 0x100
  401b06:	4803      	ldr	r0, [pc, #12]	; (401b14 <LED_init+0x24>)
  401b08:	4c03      	ldr	r4, [pc, #12]	; (401b18 <LED_init+0x28>)
  401b0a:	47a0      	blx	r4
};
  401b0c:	b002      	add	sp, #8
  401b0e:	bd10      	pop	{r4, pc}
  401b10:	00401459 	.word	0x00401459
  401b14:	400e1200 	.word	0x400e1200
  401b18:	00401111 	.word	0x00401111

00401b1c <LED1_init>:
void LED1_init(int estado) {
  401b1c:	b510      	push	{r4, lr}
  401b1e:	b082      	sub	sp, #8
  401b20:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED1_PIO_ID);
  401b22:	200a      	movs	r0, #10
  401b24:	4b05      	ldr	r3, [pc, #20]	; (401b3c <LED1_init+0x20>)
  401b26:	4798      	blx	r3
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, estado, 0, 0);
  401b28:	2300      	movs	r3, #0
  401b2a:	9300      	str	r3, [sp, #0]
  401b2c:	4622      	mov	r2, r4
  401b2e:	2101      	movs	r1, #1
  401b30:	4803      	ldr	r0, [pc, #12]	; (401b40 <LED1_init+0x24>)
  401b32:	4c04      	ldr	r4, [pc, #16]	; (401b44 <LED1_init+0x28>)
  401b34:	47a0      	blx	r4
};
  401b36:	b002      	add	sp, #8
  401b38:	bd10      	pop	{r4, pc}
  401b3a:	bf00      	nop
  401b3c:	00401459 	.word	0x00401459
  401b40:	400e0e00 	.word	0x400e0e00
  401b44:	00401111 	.word	0x00401111

00401b48 <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  401b48:	b538      	push	{r3, r4, r5, lr}
  401b4a:	4604      	mov	r4, r0
  401b4c:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  401b4e:	4b06      	ldr	r3, [pc, #24]	; (401b68 <pin_toggle+0x20>)
  401b50:	4798      	blx	r3
  401b52:	b920      	cbnz	r0, 401b5e <pin_toggle+0x16>
	pio_set(pio,mask);
  401b54:	4629      	mov	r1, r5
  401b56:	4620      	mov	r0, r4
  401b58:	4b04      	ldr	r3, [pc, #16]	; (401b6c <pin_toggle+0x24>)
  401b5a:	4798      	blx	r3
  401b5c:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  401b5e:	4629      	mov	r1, r5
  401b60:	4620      	mov	r0, r4
  401b62:	4b03      	ldr	r3, [pc, #12]	; (401b70 <pin_toggle+0x28>)
  401b64:	4798      	blx	r3
  401b66:	bd38      	pop	{r3, r4, r5, pc}
  401b68:	004011c9 	.word	0x004011c9
  401b6c:	00401027 	.word	0x00401027
  401b70:	0040102b 	.word	0x0040102b

00401b74 <TC1_Handler>:
void TC1_Handler(void) {
  401b74:	b500      	push	{lr}
  401b76:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401b78:	2101      	movs	r1, #1
  401b7a:	4806      	ldr	r0, [pc, #24]	; (401b94 <TC1_Handler+0x20>)
  401b7c:	4b06      	ldr	r3, [pc, #24]	; (401b98 <TC1_Handler+0x24>)
  401b7e:	4798      	blx	r3
  401b80:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_PIO, LED_PIO_IDX_MASK);  
  401b82:	f44f 7180 	mov.w	r1, #256	; 0x100
  401b86:	4805      	ldr	r0, [pc, #20]	; (401b9c <TC1_Handler+0x28>)
  401b88:	4b05      	ldr	r3, [pc, #20]	; (401ba0 <TC1_Handler+0x2c>)
  401b8a:	4798      	blx	r3
}
  401b8c:	b003      	add	sp, #12
  401b8e:	f85d fb04 	ldr.w	pc, [sp], #4
  401b92:	bf00      	nop
  401b94:	4000c000 	.word	0x4000c000
  401b98:	00400719 	.word	0x00400719
  401b9c:	400e1200 	.word	0x400e1200
  401ba0:	00401b49 	.word	0x00401b49

00401ba4 <TC4_Handler>:
void TC4_Handler(void) {
  401ba4:	b500      	push	{lr}
  401ba6:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC1, 1);
  401ba8:	2101      	movs	r1, #1
  401baa:	4805      	ldr	r0, [pc, #20]	; (401bc0 <TC4_Handler+0x1c>)
  401bac:	4b05      	ldr	r3, [pc, #20]	; (401bc4 <TC4_Handler+0x20>)
  401bae:	4798      	blx	r3
  401bb0:	9001      	str	r0, [sp, #4]
	pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  401bb2:	2101      	movs	r1, #1
  401bb4:	4804      	ldr	r0, [pc, #16]	; (401bc8 <TC4_Handler+0x24>)
  401bb6:	4b05      	ldr	r3, [pc, #20]	; (401bcc <TC4_Handler+0x28>)
  401bb8:	4798      	blx	r3
}
  401bba:	b003      	add	sp, #12
  401bbc:	f85d fb04 	ldr.w	pc, [sp], #4
  401bc0:	40010000 	.word	0x40010000
  401bc4:	00400719 	.word	0x00400719
  401bc8:	400e0e00 	.word	0x400e0e00
  401bcc:	00401b49 	.word	0x00401b49

00401bd0 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401bd4:	b085      	sub	sp, #20
  401bd6:	4606      	mov	r6, r0
  401bd8:	460c      	mov	r4, r1
  401bda:	4617      	mov	r7, r2
  401bdc:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  401bde:	4608      	mov	r0, r1
  401be0:	4b1c      	ldr	r3, [pc, #112]	; (401c54 <TC_init+0x84>)
  401be2:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401be4:	4d1c      	ldr	r5, [pc, #112]	; (401c58 <TC_init+0x88>)
  401be6:	9500      	str	r5, [sp, #0]
  401be8:	ab02      	add	r3, sp, #8
  401bea:	aa03      	add	r2, sp, #12
  401bec:	4629      	mov	r1, r5
  401bee:	4640      	mov	r0, r8
  401bf0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401c74 <TC_init+0xa4>
  401bf4:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401bf6:	9a02      	ldr	r2, [sp, #8]
  401bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401bfc:	4639      	mov	r1, r7
  401bfe:	4630      	mov	r0, r6
  401c00:	4b16      	ldr	r3, [pc, #88]	; (401c5c <TC_init+0x8c>)
  401c02:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401c04:	9a03      	ldr	r2, [sp, #12]
  401c06:	fbb5 f2f2 	udiv	r2, r5, r2
  401c0a:	fbb2 f2f8 	udiv	r2, r2, r8
  401c0e:	4639      	mov	r1, r7
  401c10:	4630      	mov	r0, r6
  401c12:	4b13      	ldr	r3, [pc, #76]	; (401c60 <TC_init+0x90>)
  401c14:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  401c16:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  401c18:	2b00      	cmp	r3, #0
  401c1a:	db13      	blt.n	401c44 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401c1c:	4a11      	ldr	r2, [pc, #68]	; (401c64 <TC_init+0x94>)
  401c1e:	2180      	movs	r1, #128	; 0x80
  401c20:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401c22:	095b      	lsrs	r3, r3, #5
  401c24:	f004 041f 	and.w	r4, r4, #31
  401c28:	2201      	movs	r2, #1
  401c2a:	fa02 f404 	lsl.w	r4, r2, r4
  401c2e:	4a0e      	ldr	r2, [pc, #56]	; (401c68 <TC_init+0x98>)
  401c30:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401c34:	2210      	movs	r2, #16
  401c36:	4639      	mov	r1, r7
  401c38:	4630      	mov	r0, r6
  401c3a:	4b0c      	ldr	r3, [pc, #48]	; (401c6c <TC_init+0x9c>)
  401c3c:	4798      	blx	r3
}
  401c3e:	b005      	add	sp, #20
  401c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401c44:	f004 010f 	and.w	r1, r4, #15
  401c48:	4a09      	ldr	r2, [pc, #36]	; (401c70 <TC_init+0xa0>)
  401c4a:	440a      	add	r2, r1
  401c4c:	2180      	movs	r1, #128	; 0x80
  401c4e:	7611      	strb	r1, [r2, #24]
  401c50:	e7e7      	b.n	401c22 <TC_init+0x52>
  401c52:	bf00      	nop
  401c54:	00401459 	.word	0x00401459
  401c58:	11e1a300 	.word	0x11e1a300
  401c5c:	004006e7 	.word	0x004006e7
  401c60:	00400709 	.word	0x00400709
  401c64:	e000e400 	.word	0xe000e400
  401c68:	e000e100 	.word	0xe000e100
  401c6c:	00400711 	.word	0x00400711
  401c70:	e000ecfc 	.word	0xe000ecfc
  401c74:	00400721 	.word	0x00400721

00401c78 <RTT_Handler>:
void RTT_Handler(void) {
  401c78:	b510      	push	{r4, lr}
	ul_status = rtt_get_status(RTT);
  401c7a:	480c      	ldr	r0, [pc, #48]	; (401cac <RTT_Handler+0x34>)
  401c7c:	4b0c      	ldr	r3, [pc, #48]	; (401cb0 <RTT_Handler+0x38>)
  401c7e:	4798      	blx	r3
  401c80:	4604      	mov	r4, r0
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401c82:	f010 0f01 	tst.w	r0, #1
  401c86:	d103      	bne.n	401c90 <RTT_Handler+0x18>
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  401c88:	f014 0f02 	tst.w	r4, #2
  401c8c:	d108      	bne.n	401ca0 <RTT_Handler+0x28>
  401c8e:	bd10      	pop	{r4, pc}
		RTT_init(0, 4, RTT_MR_RTTINCIEN);
  401c90:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401c94:	2004      	movs	r0, #4
  401c96:	ed9f 0a07 	vldr	s0, [pc, #28]	; 401cb4 <RTT_Handler+0x3c>
  401c9a:	4b07      	ldr	r3, [pc, #28]	; (401cb8 <RTT_Handler+0x40>)
  401c9c:	4798      	blx	r3
  401c9e:	e7f3      	b.n	401c88 <RTT_Handler+0x10>
		pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);    // BLINK Led
  401ca0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ca4:	4805      	ldr	r0, [pc, #20]	; (401cbc <RTT_Handler+0x44>)
  401ca6:	4b06      	ldr	r3, [pc, #24]	; (401cc0 <RTT_Handler+0x48>)
  401ca8:	4798      	blx	r3
}
  401caa:	e7f0      	b.n	401c8e <RTT_Handler+0x16>
  401cac:	400e1830 	.word	0x400e1830
  401cb0:	00400555 	.word	0x00400555
  401cb4:	00000000 	.word	0x00000000
  401cb8:	00401a0d 	.word	0x00401a0d
  401cbc:	400e1200 	.word	0x400e1200
  401cc0:	00401b49 	.word	0x00401b49

00401cc4 <RTC_Handler>:
void RTC_Handler(void) {
  401cc4:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  401cc6:	480f      	ldr	r0, [pc, #60]	; (401d04 <RTC_Handler+0x40>)
  401cc8:	4b0f      	ldr	r3, [pc, #60]	; (401d08 <RTC_Handler+0x44>)
  401cca:	4798      	blx	r3
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  401ccc:	f010 0f02 	tst.w	r0, #2
  401cd0:	d002      	beq.n	401cd8 <RTC_Handler+0x14>
		flag_rtc_alarm = 1;
  401cd2:	2201      	movs	r2, #1
  401cd4:	4b0d      	ldr	r3, [pc, #52]	; (401d0c <RTC_Handler+0x48>)
  401cd6:	701a      	strb	r2, [r3, #0]
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401cd8:	4d0a      	ldr	r5, [pc, #40]	; (401d04 <RTC_Handler+0x40>)
  401cda:	2104      	movs	r1, #4
  401cdc:	4628      	mov	r0, r5
  401cde:	4c0c      	ldr	r4, [pc, #48]	; (401d10 <RTC_Handler+0x4c>)
  401ce0:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  401ce2:	2102      	movs	r1, #2
  401ce4:	4628      	mov	r0, r5
  401ce6:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  401ce8:	2101      	movs	r1, #1
  401cea:	4628      	mov	r0, r5
  401cec:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  401cee:	2108      	movs	r1, #8
  401cf0:	4628      	mov	r0, r5
  401cf2:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  401cf4:	2110      	movs	r1, #16
  401cf6:	4628      	mov	r0, r5
  401cf8:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  401cfa:	2120      	movs	r1, #32
  401cfc:	4628      	mov	r0, r5
  401cfe:	47a0      	blx	r4
  401d00:	bd38      	pop	{r3, r4, r5, pc}
  401d02:	bf00      	nop
  401d04:	400e1860 	.word	0x400e1860
  401d08:	004004d1 	.word	0x004004d1
  401d0c:	20400c75 	.word	0x20400c75
  401d10:	004004d5 	.word	0x004004d5

00401d14 <io_init>:
		}	
}

void io_init(void)
{
  401d14:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d16:	b083      	sub	sp, #12
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  401d18:	2300      	movs	r3, #0
  401d1a:	2204      	movs	r2, #4
  401d1c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401d20:	481e      	ldr	r0, [pc, #120]	; (401d9c <io_init+0x88>)
  401d22:	4d1f      	ldr	r5, [pc, #124]	; (401da0 <io_init+0x8c>)
  401d24:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT1_PIO_ID);
  401d26:	2010      	movs	r0, #16
  401d28:	4e1e      	ldr	r6, [pc, #120]	; (401da4 <io_init+0x90>)
  401d2a:	47b0      	blx	r6
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  401d2c:	4c1e      	ldr	r4, [pc, #120]	; (401da8 <io_init+0x94>)
  401d2e:	2309      	movs	r3, #9
  401d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d34:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401d38:	4620      	mov	r0, r4
  401d3a:	47a8      	blx	r5
	pio_set_debounce_filter(BUT1_PIO, BUT1_PIO_IDX_MASK, 60);
  401d3c:	223c      	movs	r2, #60	; 0x3c
  401d3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d42:	4620      	mov	r0, r4
  401d44:	4b19      	ldr	r3, [pc, #100]	; (401dac <io_init+0x98>)
  401d46:	4798      	blx	r3
	pio_handler_set(BUT1_PIO,
  401d48:	4b19      	ldr	r3, [pc, #100]	; (401db0 <io_init+0x9c>)
  401d4a:	9300      	str	r3, [sp, #0]
  401d4c:	2370      	movs	r3, #112	; 0x70
  401d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d52:	2110      	movs	r1, #16
  401d54:	4620      	mov	r0, r4
  401d56:	4f17      	ldr	r7, [pc, #92]	; (401db4 <io_init+0xa0>)
  401d58:	47b8      	blx	r7
					BUT1_PIO_ID,
					BUT1_PIO_IDX_MASK,
					PIO_IT_RISE_EDGE,
					but_callback);
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  401d5a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d5e:	4620      	mov	r0, r4
  401d60:	4b15      	ldr	r3, [pc, #84]	; (401db8 <io_init+0xa4>)
  401d62:	4798      	blx	r3
	pio_get_interrupt_status(BUT1_PIO);
  401d64:	4620      	mov	r0, r4
  401d66:	4b15      	ldr	r3, [pc, #84]	; (401dbc <io_init+0xa8>)
  401d68:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401d6a:	4b15      	ldr	r3, [pc, #84]	; (401dc0 <io_init+0xac>)
  401d6c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  401d70:	601c      	str	r4, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401d72:	2280      	movs	r2, #128	; 0x80
  401d74:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ(BUT1_PIO_ID);
	NVIC_SetPriority(BUT1_PIO_ID, 4);
	
	pmc_enable_periph_clk(LED2_PIO_ID);
  401d78:	200c      	movs	r0, #12
  401d7a:	47b0      	blx	r6
	pio_configure(LED2_PIO, PIO_OUTPUT_1, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  401d7c:	2300      	movs	r3, #0
  401d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401d82:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d86:	480f      	ldr	r0, [pc, #60]	; (401dc4 <io_init+0xb0>)
  401d88:	47a8      	blx	r5
	RTT_init(1, 4, RTT_MR_ALMIEN);
  401d8a:	4621      	mov	r1, r4
  401d8c:	2004      	movs	r0, #4
  401d8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  401d92:	4b0d      	ldr	r3, [pc, #52]	; (401dc8 <io_init+0xb4>)
  401d94:	4798      	blx	r3
}
  401d96:	b003      	add	sp, #12
  401d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401d9a:	bf00      	nop
  401d9c:	400e1000 	.word	0x400e1000
  401da0:	00401139 	.word	0x00401139
  401da4:	00401459 	.word	0x00401459
  401da8:	400e1400 	.word	0x400e1400
  401dac:	0040100d 	.word	0x0040100d
  401db0:	00401ac5 	.word	0x00401ac5
  401db4:	00401265 	.word	0x00401265
  401db8:	00401207 	.word	0x00401207
  401dbc:	0040120b 	.word	0x0040120b
  401dc0:	e000e100 	.word	0xe000e100
  401dc4:	400e1200 	.word	0x400e1200
  401dc8:	00401a0d 	.word	0x00401a0d

00401dcc <RTC_init>:

void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  401dcc:	b082      	sub	sp, #8
  401dce:	b570      	push	{r4, r5, r6, lr}
  401dd0:	b082      	sub	sp, #8
  401dd2:	4605      	mov	r5, r0
  401dd4:	460c      	mov	r4, r1
  401dd6:	a906      	add	r1, sp, #24
  401dd8:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401ddc:	2002      	movs	r0, #2
  401dde:	4b1d      	ldr	r3, [pc, #116]	; (401e54 <RTC_init+0x88>)
  401de0:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401de2:	2100      	movs	r1, #0
  401de4:	4628      	mov	r0, r5
  401de6:	4b1c      	ldr	r3, [pc, #112]	; (401e58 <RTC_init+0x8c>)
  401de8:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401dec:	9300      	str	r3, [sp, #0]
  401dee:	9b08      	ldr	r3, [sp, #32]
  401df0:	9a07      	ldr	r2, [sp, #28]
  401df2:	9906      	ldr	r1, [sp, #24]
  401df4:	4628      	mov	r0, r5
  401df6:	4e19      	ldr	r6, [pc, #100]	; (401e5c <RTC_init+0x90>)
  401df8:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  401dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
  401e00:	4628      	mov	r0, r5
  401e02:	4e17      	ldr	r6, [pc, #92]	; (401e60 <RTC_init+0x94>)
  401e04:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401e06:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401e08:	b2e4      	uxtb	r4, r4
  401e0a:	f004 011f 	and.w	r1, r4, #31
  401e0e:	2301      	movs	r3, #1
  401e10:	408b      	lsls	r3, r1
  401e12:	0956      	lsrs	r6, r2, #5
  401e14:	4813      	ldr	r0, [pc, #76]	; (401e64 <RTC_init+0x98>)
  401e16:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401e1a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401e1e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  401e22:	2a00      	cmp	r2, #0
  401e24:	db0f      	blt.n	401e46 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401e26:	490f      	ldr	r1, [pc, #60]	; (401e64 <RTC_init+0x98>)
  401e28:	4411      	add	r1, r2
  401e2a:	2280      	movs	r2, #128	; 0x80
  401e2c:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401e30:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401e34:	990d      	ldr	r1, [sp, #52]	; 0x34
  401e36:	4628      	mov	r0, r5
  401e38:	4b0b      	ldr	r3, [pc, #44]	; (401e68 <RTC_init+0x9c>)
  401e3a:	4798      	blx	r3
}
  401e3c:	b002      	add	sp, #8
  401e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401e42:	b002      	add	sp, #8
  401e44:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401e46:	f004 040f 	and.w	r4, r4, #15
  401e4a:	4a08      	ldr	r2, [pc, #32]	; (401e6c <RTC_init+0xa0>)
  401e4c:	2180      	movs	r1, #128	; 0x80
  401e4e:	5511      	strb	r1, [r2, r4]
  401e50:	e7ee      	b.n	401e30 <RTC_init+0x64>
  401e52:	bf00      	nop
  401e54:	00401459 	.word	0x00401459
  401e58:	004001ad 	.word	0x004001ad
  401e5c:	004003b9 	.word	0x004003b9
  401e60:	00400221 	.word	0x00400221
  401e64:	e000e100 	.word	0xe000e100
  401e68:	004001c3 	.word	0x004001c3
  401e6c:	e000ed14 	.word	0xe000ed14

00401e70 <pisca_led>:

void pisca_led(int n, int t){
  401e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401e74:	f1b0 0800 	subs.w	r8, r0, #0
  401e78:	dd30      	ble.n	401edc <pisca_led+0x6c>
  401e7a:	460f      	mov	r7, r1
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
		delay_ms(t);
  401e7c:	17cd      	asrs	r5, r1, #31
  401e7e:	4b18      	ldr	r3, [pc, #96]	; (401ee0 <pisca_led+0x70>)
  401e80:	fba1 0103 	umull	r0, r1, r1, r3
  401e84:	fb03 1105 	mla	r1, r3, r5, r1
  401e88:	f241 722c 	movw	r2, #5932	; 0x172c
  401e8c:	2300      	movs	r3, #0
  401e8e:	f241 742b 	movw	r4, #5931	; 0x172b
  401e92:	2500      	movs	r5, #0
  401e94:	1900      	adds	r0, r0, r4
  401e96:	4169      	adcs	r1, r5
  401e98:	4c12      	ldr	r4, [pc, #72]	; (401ee4 <pisca_led+0x74>)
  401e9a:	47a0      	blx	r4
  401e9c:	4682      	mov	sl, r0
  401e9e:	2400      	movs	r4, #0
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  401ea0:	4e11      	ldr	r6, [pc, #68]	; (401ee8 <pisca_led+0x78>)
  401ea2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401ef4 <pisca_led+0x84>
		delay_ms(t);
  401ea6:	4d11      	ldr	r5, [pc, #68]	; (401eec <pisca_led+0x7c>)
  401ea8:	e00a      	b.n	401ec0 <pisca_led+0x50>
  401eaa:	2033      	movs	r0, #51	; 0x33
  401eac:	47a8      	blx	r5
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401eae:	2104      	movs	r1, #4
  401eb0:	4630      	mov	r0, r6
  401eb2:	4b0f      	ldr	r3, [pc, #60]	; (401ef0 <pisca_led+0x80>)
  401eb4:	4798      	blx	r3
		delay_ms(t);
  401eb6:	2033      	movs	r0, #51	; 0x33
  401eb8:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  401eba:	3401      	adds	r4, #1
  401ebc:	45a0      	cmp	r8, r4
  401ebe:	d00d      	beq.n	401edc <pisca_led+0x6c>
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  401ec0:	2104      	movs	r1, #4
  401ec2:	4630      	mov	r0, r6
  401ec4:	47c8      	blx	r9
		delay_ms(t);
  401ec6:	2f00      	cmp	r7, #0
  401ec8:	d0ef      	beq.n	401eaa <pisca_led+0x3a>
  401eca:	4650      	mov	r0, sl
  401ecc:	47a8      	blx	r5
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401ece:	2104      	movs	r1, #4
  401ed0:	4630      	mov	r0, r6
  401ed2:	4b07      	ldr	r3, [pc, #28]	; (401ef0 <pisca_led+0x80>)
  401ed4:	4798      	blx	r3
		delay_ms(t);
  401ed6:	4650      	mov	r0, sl
  401ed8:	47a8      	blx	r5
  401eda:	e7ee      	b.n	401eba <pisca_led+0x4a>
  401edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ee0:	11e1a300 	.word	0x11e1a300
  401ee4:	004020c1 	.word	0x004020c1
  401ee8:	400e1000 	.word	0x400e1000
  401eec:	20400001 	.word	0x20400001
  401ef0:	00401027 	.word	0x00401027
  401ef4:	0040102b 	.word	0x0040102b

00401ef8 <main>:
	}
}

int main (void)
{
  401ef8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  401efc:	b0b9      	sub	sp, #228	; 0xe4
	board_init();
  401efe:	4b53      	ldr	r3, [pc, #332]	; (40204c <main+0x154>)
  401f00:	4798      	blx	r3
	sysclk_init();
  401f02:	4b53      	ldr	r3, [pc, #332]	; (402050 <main+0x158>)
  401f04:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  401f06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401f0a:	4b52      	ldr	r3, [pc, #328]	; (402054 <main+0x15c>)
  401f0c:	605a      	str	r2, [r3, #4]
	delay_init();
	
	io_init();
  401f0e:	4b52      	ldr	r3, [pc, #328]	; (402058 <main+0x160>)
  401f10:	4798      	blx	r3
	
	LED_init(1);
  401f12:	2001      	movs	r0, #1
  401f14:	4b51      	ldr	r3, [pc, #324]	; (40205c <main+0x164>)
  401f16:	4798      	blx	r3
	LED1_init(1);
  401f18:	2001      	movs	r0, #1
  401f1a:	4b51      	ldr	r3, [pc, #324]	; (402060 <main+0x168>)
  401f1c:	4798      	blx	r3
	
	TC_init(TC0, ID_TC1, 1, 10);	
  401f1e:	4c51      	ldr	r4, [pc, #324]	; (402064 <main+0x16c>)
  401f20:	230a      	movs	r3, #10
  401f22:	2201      	movs	r2, #1
  401f24:	2118      	movs	r1, #24
  401f26:	4620      	mov	r0, r4
  401f28:	4e4f      	ldr	r6, [pc, #316]	; (402068 <main+0x170>)
  401f2a:	47b0      	blx	r6
	tc_start(TC0, 1);
  401f2c:	2101      	movs	r1, #1
  401f2e:	4620      	mov	r0, r4
  401f30:	4c4e      	ldr	r4, [pc, #312]	; (40206c <main+0x174>)
  401f32:	47a0      	blx	r4
	
	TC_init(TC1, ID_TC4, 1, 8);
  401f34:	4d4e      	ldr	r5, [pc, #312]	; (402070 <main+0x178>)
  401f36:	2308      	movs	r3, #8
  401f38:	2201      	movs	r2, #1
  401f3a:	211b      	movs	r1, #27
  401f3c:	4628      	mov	r0, r5
  401f3e:	47b0      	blx	r6
	tc_start(TC1, 1);
  401f40:	2101      	movs	r1, #1
  401f42:	4628      	mov	r0, r5
  401f44:	47a0      	blx	r4
	
	/** Configura RTC */
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  401f46:	ac31      	add	r4, sp, #196	; 0xc4
  401f48:	4d4a      	ldr	r5, [pc, #296]	; (402074 <main+0x17c>)
  401f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);
  401f56:	2602      	movs	r6, #2
  401f58:	9605      	str	r6, [sp, #20]
  401f5a:	466c      	mov	r4, sp
  401f5c:	ad33      	add	r5, sp, #204	; 0xcc
  401f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401f62:	682b      	ldr	r3, [r5, #0]
  401f64:	6023      	str	r3, [r4, #0]
  401f66:	ab31      	add	r3, sp, #196	; 0xc4
  401f68:	cb0c      	ldmia	r3, {r2, r3}
  401f6a:	4631      	mov	r1, r6
  401f6c:	4842      	ldr	r0, [pc, #264]	; (402078 <main+0x180>)
  401f6e:	4c43      	ldr	r4, [pc, #268]	; (40207c <main+0x184>)
  401f70:	47a0      	blx	r4
	
	

  // Init OLED
	gfx_mono_ssd1306_init();
  401f72:	4b43      	ldr	r3, [pc, #268]	; (402080 <main+0x188>)
  401f74:	4798      	blx	r3

	while(1) {
		uint32_t current_hour2, current_min2, current_sec2;
		rtc_get_time(RTC, &current_hour2, &current_min2, &current_sec2);
  401f76:	4d40      	ldr	r5, [pc, #256]	; (402078 <main+0x180>)
  401f78:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4020a8 <main+0x1b0>
		gfx_mono_draw_rect(0, 0, 300, 300, GFX_PIXEL_CLR);
  401f7c:	2400      	movs	r4, #0
  401f7e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 4020ac <main+0x1b4>
		char str[128];
		sprintf(str, "%d:%d:%d", current_hour2, current_min2, current_sec2);
		gfx_mono_draw_string(str, 0, 0, &sysfont);
  401f82:	f8df b12c 	ldr.w	fp, [pc, #300]	; 4020b0 <main+0x1b8>
  401f86:	4e3f      	ldr	r6, [pc, #252]	; (402084 <main+0x18c>)
  401f88:	e034      	b.n	401ff4 <main+0xfc>
		
		if (but_flag==1)		{
			/* Leitura do valor atual do RTC */
			uint32_t current_hour, current_min, current_sec;
			uint32_t current_year, current_month, current_day, current_week;
			rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  401f8a:	ab0c      	add	r3, sp, #48	; 0x30
  401f8c:	aa0b      	add	r2, sp, #44	; 0x2c
  401f8e:	a90a      	add	r1, sp, #40	; 0x28
  401f90:	4628      	mov	r0, r5
  401f92:	47c8      	blx	r9
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401f94:	ab10      	add	r3, sp, #64	; 0x40
  401f96:	9300      	str	r3, [sp, #0]
  401f98:	ab0f      	add	r3, sp, #60	; 0x3c
  401f9a:	aa0e      	add	r2, sp, #56	; 0x38
  401f9c:	a90d      	add	r1, sp, #52	; 0x34
  401f9e:	4628      	mov	r0, r5
  401fa0:	f8df a110 	ldr.w	sl, [pc, #272]	; 4020b4 <main+0x1bc>
  401fa4:	47d0      	blx	sl
			
			/* configura alarme do RTC para daqui 20 segundos */
			rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);
  401fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401fa8:	9300      	str	r3, [sp, #0]
  401faa:	2301      	movs	r3, #1
  401fac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401fae:	4619      	mov	r1, r3
  401fb0:	4628      	mov	r0, r5
  401fb2:	f8df a104 	ldr.w	sl, [pc, #260]	; 4020b8 <main+0x1c0>
  401fb6:	47d0      	blx	sl
			rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec + 20);
  401fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401fba:	3314      	adds	r3, #20
  401fbc:	9302      	str	r3, [sp, #8]
  401fbe:	2101      	movs	r1, #1
  401fc0:	9101      	str	r1, [sp, #4]
  401fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401fc4:	9300      	str	r3, [sp, #0]
  401fc6:	460b      	mov	r3, r1
  401fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401fca:	4628      	mov	r0, r5
  401fcc:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 4020bc <main+0x1c4>
  401fd0:	47d0      	blx	sl
			but_flag = 0;
  401fd2:	4b2d      	ldr	r3, [pc, #180]	; (402088 <main+0x190>)
  401fd4:	701c      	strb	r4, [r3, #0]
  401fd6:	e02e      	b.n	402036 <main+0x13e>
		if (flag_rtc_alarm) {
			 pisca_led(1, 200);
			 flag_rtc_alarm = 0;
		}
			
			gfx_mono_draw_rect(0, 0, 300, 300, GFX_PIXEL_CLR);
  401fd8:	9400      	str	r4, [sp, #0]
  401fda:	232c      	movs	r3, #44	; 0x2c
  401fdc:	461a      	mov	r2, r3
  401fde:	4621      	mov	r1, r4
  401fe0:	4620      	mov	r0, r4
  401fe2:	47c0      	blx	r8
			gfx_mono_draw_string(str, 0, 0, &sysfont);
  401fe4:	465b      	mov	r3, fp
  401fe6:	4622      	mov	r2, r4
  401fe8:	4621      	mov	r1, r4
  401fea:	a811      	add	r0, sp, #68	; 0x44
  401fec:	47b0      	blx	r6
			pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401fee:	2002      	movs	r0, #2
  401ff0:	4b26      	ldr	r3, [pc, #152]	; (40208c <main+0x194>)
  401ff2:	4798      	blx	r3
		rtc_get_time(RTC, &current_hour2, &current_min2, &current_sec2);
  401ff4:	ab09      	add	r3, sp, #36	; 0x24
  401ff6:	aa08      	add	r2, sp, #32
  401ff8:	a907      	add	r1, sp, #28
  401ffa:	4628      	mov	r0, r5
  401ffc:	47c8      	blx	r9
		gfx_mono_draw_rect(0, 0, 300, 300, GFX_PIXEL_CLR);
  401ffe:	9400      	str	r4, [sp, #0]
  402000:	232c      	movs	r3, #44	; 0x2c
  402002:	461a      	mov	r2, r3
  402004:	4621      	mov	r1, r4
  402006:	4620      	mov	r0, r4
  402008:	47c0      	blx	r8
		sprintf(str, "%d:%d:%d", current_hour2, current_min2, current_sec2);
  40200a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40200c:	9300      	str	r3, [sp, #0]
  40200e:	9b08      	ldr	r3, [sp, #32]
  402010:	9a07      	ldr	r2, [sp, #28]
  402012:	491f      	ldr	r1, [pc, #124]	; (402090 <main+0x198>)
  402014:	a811      	add	r0, sp, #68	; 0x44
  402016:	4f1f      	ldr	r7, [pc, #124]	; (402094 <main+0x19c>)
  402018:	47b8      	blx	r7
		gfx_mono_draw_string(str, 0, 0, &sysfont);
  40201a:	465b      	mov	r3, fp
  40201c:	4622      	mov	r2, r4
  40201e:	4621      	mov	r1, r4
  402020:	a811      	add	r0, sp, #68	; 0x44
  402022:	47b0      	blx	r6
		if (but_flag==1)		{
  402024:	4b18      	ldr	r3, [pc, #96]	; (402088 <main+0x190>)
  402026:	781b      	ldrb	r3, [r3, #0]
  402028:	b2db      	uxtb	r3, r3
  40202a:	2b01      	cmp	r3, #1
  40202c:	d0ad      	beq.n	401f8a <main+0x92>
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  40202e:	2104      	movs	r1, #4
  402030:	4819      	ldr	r0, [pc, #100]	; (402098 <main+0x1a0>)
  402032:	4b1a      	ldr	r3, [pc, #104]	; (40209c <main+0x1a4>)
  402034:	4798      	blx	r3
		if (flag_rtc_alarm) {
  402036:	4b1a      	ldr	r3, [pc, #104]	; (4020a0 <main+0x1a8>)
  402038:	781b      	ldrb	r3, [r3, #0]
  40203a:	2b00      	cmp	r3, #0
  40203c:	d0cc      	beq.n	401fd8 <main+0xe0>
			 pisca_led(1, 200);
  40203e:	21c8      	movs	r1, #200	; 0xc8
  402040:	2001      	movs	r0, #1
  402042:	4b18      	ldr	r3, [pc, #96]	; (4020a4 <main+0x1ac>)
  402044:	4798      	blx	r3
			 flag_rtc_alarm = 0;
  402046:	4b16      	ldr	r3, [pc, #88]	; (4020a0 <main+0x1a8>)
  402048:	701c      	strb	r4, [r3, #0]
  40204a:	e7c5      	b.n	401fd8 <main+0xe0>
  40204c:	00400ecd 	.word	0x00400ecd
  402050:	00400e5d 	.word	0x00400e5d
  402054:	400e1850 	.word	0x400e1850
  402058:	00401d15 	.word	0x00401d15
  40205c:	00401af1 	.word	0x00401af1
  402060:	00401b1d 	.word	0x00401b1d
  402064:	4000c000 	.word	0x4000c000
  402068:	00401bd1 	.word	0x00401bd1
  40206c:	00400701 	.word	0x00400701
  402070:	40010000 	.word	0x40010000
  402074:	0040742c 	.word	0x0040742c
  402078:	400e1860 	.word	0x400e1860
  40207c:	00401dcd 	.word	0x00401dcd
  402080:	00400af9 	.word	0x00400af9
  402084:	00400a61 	.word	0x00400a61
  402088:	20400c74 	.word	0x20400c74
  40208c:	004014fd 	.word	0x004014fd
  402090:	00407448 	.word	0x00407448
  402094:	004024bd 	.word	0x004024bd
  402098:	400e1000 	.word	0x400e1000
  40209c:	00401027 	.word	0x00401027
  4020a0:	20400c75 	.word	0x20400c75
  4020a4:	00401e71 	.word	0x00401e71
  4020a8:	004001c7 	.word	0x004001c7
  4020ac:	0040092d 	.word	0x0040092d
  4020b0:	2040000c 	.word	0x2040000c
  4020b4:	00400345 	.word	0x00400345
  4020b8:	00400471 	.word	0x00400471
  4020bc:	004002b1 	.word	0x004002b1

004020c0 <__aeabi_uldivmod>:
  4020c0:	b953      	cbnz	r3, 4020d8 <__aeabi_uldivmod+0x18>
  4020c2:	b94a      	cbnz	r2, 4020d8 <__aeabi_uldivmod+0x18>
  4020c4:	2900      	cmp	r1, #0
  4020c6:	bf08      	it	eq
  4020c8:	2800      	cmpeq	r0, #0
  4020ca:	bf1c      	itt	ne
  4020cc:	f04f 31ff 	movne.w	r1, #4294967295
  4020d0:	f04f 30ff 	movne.w	r0, #4294967295
  4020d4:	f000 b97a 	b.w	4023cc <__aeabi_idiv0>
  4020d8:	f1ad 0c08 	sub.w	ip, sp, #8
  4020dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4020e0:	f000 f806 	bl	4020f0 <__udivmoddi4>
  4020e4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4020e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4020ec:	b004      	add	sp, #16
  4020ee:	4770      	bx	lr

004020f0 <__udivmoddi4>:
  4020f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020f4:	468c      	mov	ip, r1
  4020f6:	460d      	mov	r5, r1
  4020f8:	4604      	mov	r4, r0
  4020fa:	9e08      	ldr	r6, [sp, #32]
  4020fc:	2b00      	cmp	r3, #0
  4020fe:	d151      	bne.n	4021a4 <__udivmoddi4+0xb4>
  402100:	428a      	cmp	r2, r1
  402102:	4617      	mov	r7, r2
  402104:	d96d      	bls.n	4021e2 <__udivmoddi4+0xf2>
  402106:	fab2 fe82 	clz	lr, r2
  40210a:	f1be 0f00 	cmp.w	lr, #0
  40210e:	d00b      	beq.n	402128 <__udivmoddi4+0x38>
  402110:	f1ce 0c20 	rsb	ip, lr, #32
  402114:	fa01 f50e 	lsl.w	r5, r1, lr
  402118:	fa20 fc0c 	lsr.w	ip, r0, ip
  40211c:	fa02 f70e 	lsl.w	r7, r2, lr
  402120:	ea4c 0c05 	orr.w	ip, ip, r5
  402124:	fa00 f40e 	lsl.w	r4, r0, lr
  402128:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40212c:	0c25      	lsrs	r5, r4, #16
  40212e:	fbbc f8fa 	udiv	r8, ip, sl
  402132:	fa1f f987 	uxth.w	r9, r7
  402136:	fb0a cc18 	mls	ip, sl, r8, ip
  40213a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40213e:	fb08 f309 	mul.w	r3, r8, r9
  402142:	42ab      	cmp	r3, r5
  402144:	d90a      	bls.n	40215c <__udivmoddi4+0x6c>
  402146:	19ed      	adds	r5, r5, r7
  402148:	f108 32ff 	add.w	r2, r8, #4294967295
  40214c:	f080 8123 	bcs.w	402396 <__udivmoddi4+0x2a6>
  402150:	42ab      	cmp	r3, r5
  402152:	f240 8120 	bls.w	402396 <__udivmoddi4+0x2a6>
  402156:	f1a8 0802 	sub.w	r8, r8, #2
  40215a:	443d      	add	r5, r7
  40215c:	1aed      	subs	r5, r5, r3
  40215e:	b2a4      	uxth	r4, r4
  402160:	fbb5 f0fa 	udiv	r0, r5, sl
  402164:	fb0a 5510 	mls	r5, sl, r0, r5
  402168:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40216c:	fb00 f909 	mul.w	r9, r0, r9
  402170:	45a1      	cmp	r9, r4
  402172:	d909      	bls.n	402188 <__udivmoddi4+0x98>
  402174:	19e4      	adds	r4, r4, r7
  402176:	f100 33ff 	add.w	r3, r0, #4294967295
  40217a:	f080 810a 	bcs.w	402392 <__udivmoddi4+0x2a2>
  40217e:	45a1      	cmp	r9, r4
  402180:	f240 8107 	bls.w	402392 <__udivmoddi4+0x2a2>
  402184:	3802      	subs	r0, #2
  402186:	443c      	add	r4, r7
  402188:	eba4 0409 	sub.w	r4, r4, r9
  40218c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402190:	2100      	movs	r1, #0
  402192:	2e00      	cmp	r6, #0
  402194:	d061      	beq.n	40225a <__udivmoddi4+0x16a>
  402196:	fa24 f40e 	lsr.w	r4, r4, lr
  40219a:	2300      	movs	r3, #0
  40219c:	6034      	str	r4, [r6, #0]
  40219e:	6073      	str	r3, [r6, #4]
  4021a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021a4:	428b      	cmp	r3, r1
  4021a6:	d907      	bls.n	4021b8 <__udivmoddi4+0xc8>
  4021a8:	2e00      	cmp	r6, #0
  4021aa:	d054      	beq.n	402256 <__udivmoddi4+0x166>
  4021ac:	2100      	movs	r1, #0
  4021ae:	e886 0021 	stmia.w	r6, {r0, r5}
  4021b2:	4608      	mov	r0, r1
  4021b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021b8:	fab3 f183 	clz	r1, r3
  4021bc:	2900      	cmp	r1, #0
  4021be:	f040 808e 	bne.w	4022de <__udivmoddi4+0x1ee>
  4021c2:	42ab      	cmp	r3, r5
  4021c4:	d302      	bcc.n	4021cc <__udivmoddi4+0xdc>
  4021c6:	4282      	cmp	r2, r0
  4021c8:	f200 80fa 	bhi.w	4023c0 <__udivmoddi4+0x2d0>
  4021cc:	1a84      	subs	r4, r0, r2
  4021ce:	eb65 0503 	sbc.w	r5, r5, r3
  4021d2:	2001      	movs	r0, #1
  4021d4:	46ac      	mov	ip, r5
  4021d6:	2e00      	cmp	r6, #0
  4021d8:	d03f      	beq.n	40225a <__udivmoddi4+0x16a>
  4021da:	e886 1010 	stmia.w	r6, {r4, ip}
  4021de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021e2:	b912      	cbnz	r2, 4021ea <__udivmoddi4+0xfa>
  4021e4:	2701      	movs	r7, #1
  4021e6:	fbb7 f7f2 	udiv	r7, r7, r2
  4021ea:	fab7 fe87 	clz	lr, r7
  4021ee:	f1be 0f00 	cmp.w	lr, #0
  4021f2:	d134      	bne.n	40225e <__udivmoddi4+0x16e>
  4021f4:	1beb      	subs	r3, r5, r7
  4021f6:	0c3a      	lsrs	r2, r7, #16
  4021f8:	fa1f fc87 	uxth.w	ip, r7
  4021fc:	2101      	movs	r1, #1
  4021fe:	fbb3 f8f2 	udiv	r8, r3, r2
  402202:	0c25      	lsrs	r5, r4, #16
  402204:	fb02 3318 	mls	r3, r2, r8, r3
  402208:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40220c:	fb0c f308 	mul.w	r3, ip, r8
  402210:	42ab      	cmp	r3, r5
  402212:	d907      	bls.n	402224 <__udivmoddi4+0x134>
  402214:	19ed      	adds	r5, r5, r7
  402216:	f108 30ff 	add.w	r0, r8, #4294967295
  40221a:	d202      	bcs.n	402222 <__udivmoddi4+0x132>
  40221c:	42ab      	cmp	r3, r5
  40221e:	f200 80d1 	bhi.w	4023c4 <__udivmoddi4+0x2d4>
  402222:	4680      	mov	r8, r0
  402224:	1aed      	subs	r5, r5, r3
  402226:	b2a3      	uxth	r3, r4
  402228:	fbb5 f0f2 	udiv	r0, r5, r2
  40222c:	fb02 5510 	mls	r5, r2, r0, r5
  402230:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402234:	fb0c fc00 	mul.w	ip, ip, r0
  402238:	45a4      	cmp	ip, r4
  40223a:	d907      	bls.n	40224c <__udivmoddi4+0x15c>
  40223c:	19e4      	adds	r4, r4, r7
  40223e:	f100 33ff 	add.w	r3, r0, #4294967295
  402242:	d202      	bcs.n	40224a <__udivmoddi4+0x15a>
  402244:	45a4      	cmp	ip, r4
  402246:	f200 80b8 	bhi.w	4023ba <__udivmoddi4+0x2ca>
  40224a:	4618      	mov	r0, r3
  40224c:	eba4 040c 	sub.w	r4, r4, ip
  402250:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402254:	e79d      	b.n	402192 <__udivmoddi4+0xa2>
  402256:	4631      	mov	r1, r6
  402258:	4630      	mov	r0, r6
  40225a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40225e:	f1ce 0420 	rsb	r4, lr, #32
  402262:	fa05 f30e 	lsl.w	r3, r5, lr
  402266:	fa07 f70e 	lsl.w	r7, r7, lr
  40226a:	fa20 f804 	lsr.w	r8, r0, r4
  40226e:	0c3a      	lsrs	r2, r7, #16
  402270:	fa25 f404 	lsr.w	r4, r5, r4
  402274:	ea48 0803 	orr.w	r8, r8, r3
  402278:	fbb4 f1f2 	udiv	r1, r4, r2
  40227c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402280:	fb02 4411 	mls	r4, r2, r1, r4
  402284:	fa1f fc87 	uxth.w	ip, r7
  402288:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40228c:	fb01 f30c 	mul.w	r3, r1, ip
  402290:	42ab      	cmp	r3, r5
  402292:	fa00 f40e 	lsl.w	r4, r0, lr
  402296:	d909      	bls.n	4022ac <__udivmoddi4+0x1bc>
  402298:	19ed      	adds	r5, r5, r7
  40229a:	f101 30ff 	add.w	r0, r1, #4294967295
  40229e:	f080 808a 	bcs.w	4023b6 <__udivmoddi4+0x2c6>
  4022a2:	42ab      	cmp	r3, r5
  4022a4:	f240 8087 	bls.w	4023b6 <__udivmoddi4+0x2c6>
  4022a8:	3902      	subs	r1, #2
  4022aa:	443d      	add	r5, r7
  4022ac:	1aeb      	subs	r3, r5, r3
  4022ae:	fa1f f588 	uxth.w	r5, r8
  4022b2:	fbb3 f0f2 	udiv	r0, r3, r2
  4022b6:	fb02 3310 	mls	r3, r2, r0, r3
  4022ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4022be:	fb00 f30c 	mul.w	r3, r0, ip
  4022c2:	42ab      	cmp	r3, r5
  4022c4:	d907      	bls.n	4022d6 <__udivmoddi4+0x1e6>
  4022c6:	19ed      	adds	r5, r5, r7
  4022c8:	f100 38ff 	add.w	r8, r0, #4294967295
  4022cc:	d26f      	bcs.n	4023ae <__udivmoddi4+0x2be>
  4022ce:	42ab      	cmp	r3, r5
  4022d0:	d96d      	bls.n	4023ae <__udivmoddi4+0x2be>
  4022d2:	3802      	subs	r0, #2
  4022d4:	443d      	add	r5, r7
  4022d6:	1aeb      	subs	r3, r5, r3
  4022d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4022dc:	e78f      	b.n	4021fe <__udivmoddi4+0x10e>
  4022de:	f1c1 0720 	rsb	r7, r1, #32
  4022e2:	fa22 f807 	lsr.w	r8, r2, r7
  4022e6:	408b      	lsls	r3, r1
  4022e8:	fa05 f401 	lsl.w	r4, r5, r1
  4022ec:	ea48 0303 	orr.w	r3, r8, r3
  4022f0:	fa20 fe07 	lsr.w	lr, r0, r7
  4022f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4022f8:	40fd      	lsrs	r5, r7
  4022fa:	ea4e 0e04 	orr.w	lr, lr, r4
  4022fe:	fbb5 f9fc 	udiv	r9, r5, ip
  402302:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402306:	fb0c 5519 	mls	r5, ip, r9, r5
  40230a:	fa1f f883 	uxth.w	r8, r3
  40230e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402312:	fb09 f408 	mul.w	r4, r9, r8
  402316:	42ac      	cmp	r4, r5
  402318:	fa02 f201 	lsl.w	r2, r2, r1
  40231c:	fa00 fa01 	lsl.w	sl, r0, r1
  402320:	d908      	bls.n	402334 <__udivmoddi4+0x244>
  402322:	18ed      	adds	r5, r5, r3
  402324:	f109 30ff 	add.w	r0, r9, #4294967295
  402328:	d243      	bcs.n	4023b2 <__udivmoddi4+0x2c2>
  40232a:	42ac      	cmp	r4, r5
  40232c:	d941      	bls.n	4023b2 <__udivmoddi4+0x2c2>
  40232e:	f1a9 0902 	sub.w	r9, r9, #2
  402332:	441d      	add	r5, r3
  402334:	1b2d      	subs	r5, r5, r4
  402336:	fa1f fe8e 	uxth.w	lr, lr
  40233a:	fbb5 f0fc 	udiv	r0, r5, ip
  40233e:	fb0c 5510 	mls	r5, ip, r0, r5
  402342:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402346:	fb00 f808 	mul.w	r8, r0, r8
  40234a:	45a0      	cmp	r8, r4
  40234c:	d907      	bls.n	40235e <__udivmoddi4+0x26e>
  40234e:	18e4      	adds	r4, r4, r3
  402350:	f100 35ff 	add.w	r5, r0, #4294967295
  402354:	d229      	bcs.n	4023aa <__udivmoddi4+0x2ba>
  402356:	45a0      	cmp	r8, r4
  402358:	d927      	bls.n	4023aa <__udivmoddi4+0x2ba>
  40235a:	3802      	subs	r0, #2
  40235c:	441c      	add	r4, r3
  40235e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402362:	eba4 0408 	sub.w	r4, r4, r8
  402366:	fba0 8902 	umull	r8, r9, r0, r2
  40236a:	454c      	cmp	r4, r9
  40236c:	46c6      	mov	lr, r8
  40236e:	464d      	mov	r5, r9
  402370:	d315      	bcc.n	40239e <__udivmoddi4+0x2ae>
  402372:	d012      	beq.n	40239a <__udivmoddi4+0x2aa>
  402374:	b156      	cbz	r6, 40238c <__udivmoddi4+0x29c>
  402376:	ebba 030e 	subs.w	r3, sl, lr
  40237a:	eb64 0405 	sbc.w	r4, r4, r5
  40237e:	fa04 f707 	lsl.w	r7, r4, r7
  402382:	40cb      	lsrs	r3, r1
  402384:	431f      	orrs	r7, r3
  402386:	40cc      	lsrs	r4, r1
  402388:	6037      	str	r7, [r6, #0]
  40238a:	6074      	str	r4, [r6, #4]
  40238c:	2100      	movs	r1, #0
  40238e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402392:	4618      	mov	r0, r3
  402394:	e6f8      	b.n	402188 <__udivmoddi4+0x98>
  402396:	4690      	mov	r8, r2
  402398:	e6e0      	b.n	40215c <__udivmoddi4+0x6c>
  40239a:	45c2      	cmp	sl, r8
  40239c:	d2ea      	bcs.n	402374 <__udivmoddi4+0x284>
  40239e:	ebb8 0e02 	subs.w	lr, r8, r2
  4023a2:	eb69 0503 	sbc.w	r5, r9, r3
  4023a6:	3801      	subs	r0, #1
  4023a8:	e7e4      	b.n	402374 <__udivmoddi4+0x284>
  4023aa:	4628      	mov	r0, r5
  4023ac:	e7d7      	b.n	40235e <__udivmoddi4+0x26e>
  4023ae:	4640      	mov	r0, r8
  4023b0:	e791      	b.n	4022d6 <__udivmoddi4+0x1e6>
  4023b2:	4681      	mov	r9, r0
  4023b4:	e7be      	b.n	402334 <__udivmoddi4+0x244>
  4023b6:	4601      	mov	r1, r0
  4023b8:	e778      	b.n	4022ac <__udivmoddi4+0x1bc>
  4023ba:	3802      	subs	r0, #2
  4023bc:	443c      	add	r4, r7
  4023be:	e745      	b.n	40224c <__udivmoddi4+0x15c>
  4023c0:	4608      	mov	r0, r1
  4023c2:	e708      	b.n	4021d6 <__udivmoddi4+0xe6>
  4023c4:	f1a8 0802 	sub.w	r8, r8, #2
  4023c8:	443d      	add	r5, r7
  4023ca:	e72b      	b.n	402224 <__udivmoddi4+0x134>

004023cc <__aeabi_idiv0>:
  4023cc:	4770      	bx	lr
  4023ce:	bf00      	nop

004023d0 <__libc_init_array>:
  4023d0:	b570      	push	{r4, r5, r6, lr}
  4023d2:	4e0f      	ldr	r6, [pc, #60]	; (402410 <__libc_init_array+0x40>)
  4023d4:	4d0f      	ldr	r5, [pc, #60]	; (402414 <__libc_init_array+0x44>)
  4023d6:	1b76      	subs	r6, r6, r5
  4023d8:	10b6      	asrs	r6, r6, #2
  4023da:	bf18      	it	ne
  4023dc:	2400      	movne	r4, #0
  4023de:	d005      	beq.n	4023ec <__libc_init_array+0x1c>
  4023e0:	3401      	adds	r4, #1
  4023e2:	f855 3b04 	ldr.w	r3, [r5], #4
  4023e6:	4798      	blx	r3
  4023e8:	42a6      	cmp	r6, r4
  4023ea:	d1f9      	bne.n	4023e0 <__libc_init_array+0x10>
  4023ec:	4e0a      	ldr	r6, [pc, #40]	; (402418 <__libc_init_array+0x48>)
  4023ee:	4d0b      	ldr	r5, [pc, #44]	; (40241c <__libc_init_array+0x4c>)
  4023f0:	1b76      	subs	r6, r6, r5
  4023f2:	f005 f975 	bl	4076e0 <_init>
  4023f6:	10b6      	asrs	r6, r6, #2
  4023f8:	bf18      	it	ne
  4023fa:	2400      	movne	r4, #0
  4023fc:	d006      	beq.n	40240c <__libc_init_array+0x3c>
  4023fe:	3401      	adds	r4, #1
  402400:	f855 3b04 	ldr.w	r3, [r5], #4
  402404:	4798      	blx	r3
  402406:	42a6      	cmp	r6, r4
  402408:	d1f9      	bne.n	4023fe <__libc_init_array+0x2e>
  40240a:	bd70      	pop	{r4, r5, r6, pc}
  40240c:	bd70      	pop	{r4, r5, r6, pc}
  40240e:	bf00      	nop
  402410:	004076ec 	.word	0x004076ec
  402414:	004076ec 	.word	0x004076ec
  402418:	004076f4 	.word	0x004076f4
  40241c:	004076ec 	.word	0x004076ec

00402420 <memset>:
  402420:	b470      	push	{r4, r5, r6}
  402422:	0786      	lsls	r6, r0, #30
  402424:	d046      	beq.n	4024b4 <memset+0x94>
  402426:	1e54      	subs	r4, r2, #1
  402428:	2a00      	cmp	r2, #0
  40242a:	d041      	beq.n	4024b0 <memset+0x90>
  40242c:	b2ca      	uxtb	r2, r1
  40242e:	4603      	mov	r3, r0
  402430:	e002      	b.n	402438 <memset+0x18>
  402432:	f114 34ff 	adds.w	r4, r4, #4294967295
  402436:	d33b      	bcc.n	4024b0 <memset+0x90>
  402438:	f803 2b01 	strb.w	r2, [r3], #1
  40243c:	079d      	lsls	r5, r3, #30
  40243e:	d1f8      	bne.n	402432 <memset+0x12>
  402440:	2c03      	cmp	r4, #3
  402442:	d92e      	bls.n	4024a2 <memset+0x82>
  402444:	b2cd      	uxtb	r5, r1
  402446:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40244a:	2c0f      	cmp	r4, #15
  40244c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402450:	d919      	bls.n	402486 <memset+0x66>
  402452:	f103 0210 	add.w	r2, r3, #16
  402456:	4626      	mov	r6, r4
  402458:	3e10      	subs	r6, #16
  40245a:	2e0f      	cmp	r6, #15
  40245c:	f842 5c10 	str.w	r5, [r2, #-16]
  402460:	f842 5c0c 	str.w	r5, [r2, #-12]
  402464:	f842 5c08 	str.w	r5, [r2, #-8]
  402468:	f842 5c04 	str.w	r5, [r2, #-4]
  40246c:	f102 0210 	add.w	r2, r2, #16
  402470:	d8f2      	bhi.n	402458 <memset+0x38>
  402472:	f1a4 0210 	sub.w	r2, r4, #16
  402476:	f022 020f 	bic.w	r2, r2, #15
  40247a:	f004 040f 	and.w	r4, r4, #15
  40247e:	3210      	adds	r2, #16
  402480:	2c03      	cmp	r4, #3
  402482:	4413      	add	r3, r2
  402484:	d90d      	bls.n	4024a2 <memset+0x82>
  402486:	461e      	mov	r6, r3
  402488:	4622      	mov	r2, r4
  40248a:	3a04      	subs	r2, #4
  40248c:	2a03      	cmp	r2, #3
  40248e:	f846 5b04 	str.w	r5, [r6], #4
  402492:	d8fa      	bhi.n	40248a <memset+0x6a>
  402494:	1f22      	subs	r2, r4, #4
  402496:	f022 0203 	bic.w	r2, r2, #3
  40249a:	3204      	adds	r2, #4
  40249c:	4413      	add	r3, r2
  40249e:	f004 0403 	and.w	r4, r4, #3
  4024a2:	b12c      	cbz	r4, 4024b0 <memset+0x90>
  4024a4:	b2c9      	uxtb	r1, r1
  4024a6:	441c      	add	r4, r3
  4024a8:	f803 1b01 	strb.w	r1, [r3], #1
  4024ac:	429c      	cmp	r4, r3
  4024ae:	d1fb      	bne.n	4024a8 <memset+0x88>
  4024b0:	bc70      	pop	{r4, r5, r6}
  4024b2:	4770      	bx	lr
  4024b4:	4614      	mov	r4, r2
  4024b6:	4603      	mov	r3, r0
  4024b8:	e7c2      	b.n	402440 <memset+0x20>
  4024ba:	bf00      	nop

004024bc <sprintf>:
  4024bc:	b40e      	push	{r1, r2, r3}
  4024be:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024c0:	b09c      	sub	sp, #112	; 0x70
  4024c2:	ab21      	add	r3, sp, #132	; 0x84
  4024c4:	490f      	ldr	r1, [pc, #60]	; (402504 <sprintf+0x48>)
  4024c6:	f853 2b04 	ldr.w	r2, [r3], #4
  4024ca:	9301      	str	r3, [sp, #4]
  4024cc:	4605      	mov	r5, r0
  4024ce:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4024d2:	6808      	ldr	r0, [r1, #0]
  4024d4:	9502      	str	r5, [sp, #8]
  4024d6:	f44f 7702 	mov.w	r7, #520	; 0x208
  4024da:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4024de:	a902      	add	r1, sp, #8
  4024e0:	9506      	str	r5, [sp, #24]
  4024e2:	f8ad 7014 	strh.w	r7, [sp, #20]
  4024e6:	9404      	str	r4, [sp, #16]
  4024e8:	9407      	str	r4, [sp, #28]
  4024ea:	f8ad 6016 	strh.w	r6, [sp, #22]
  4024ee:	f000 f80b 	bl	402508 <_svfprintf_r>
  4024f2:	9b02      	ldr	r3, [sp, #8]
  4024f4:	2200      	movs	r2, #0
  4024f6:	701a      	strb	r2, [r3, #0]
  4024f8:	b01c      	add	sp, #112	; 0x70
  4024fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4024fe:	b003      	add	sp, #12
  402500:	4770      	bx	lr
  402502:	bf00      	nop
  402504:	20400020 	.word	0x20400020

00402508 <_svfprintf_r>:
  402508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40250c:	b0c3      	sub	sp, #268	; 0x10c
  40250e:	460c      	mov	r4, r1
  402510:	910b      	str	r1, [sp, #44]	; 0x2c
  402512:	4692      	mov	sl, r2
  402514:	930f      	str	r3, [sp, #60]	; 0x3c
  402516:	900c      	str	r0, [sp, #48]	; 0x30
  402518:	f002 fa0e 	bl	404938 <_localeconv_r>
  40251c:	6803      	ldr	r3, [r0, #0]
  40251e:	931a      	str	r3, [sp, #104]	; 0x68
  402520:	4618      	mov	r0, r3
  402522:	f003 f8ed 	bl	405700 <strlen>
  402526:	89a3      	ldrh	r3, [r4, #12]
  402528:	9019      	str	r0, [sp, #100]	; 0x64
  40252a:	0619      	lsls	r1, r3, #24
  40252c:	d503      	bpl.n	402536 <_svfprintf_r+0x2e>
  40252e:	6923      	ldr	r3, [r4, #16]
  402530:	2b00      	cmp	r3, #0
  402532:	f001 8003 	beq.w	40353c <_svfprintf_r+0x1034>
  402536:	2300      	movs	r3, #0
  402538:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40253c:	9313      	str	r3, [sp, #76]	; 0x4c
  40253e:	9315      	str	r3, [sp, #84]	; 0x54
  402540:	9314      	str	r3, [sp, #80]	; 0x50
  402542:	9327      	str	r3, [sp, #156]	; 0x9c
  402544:	9326      	str	r3, [sp, #152]	; 0x98
  402546:	9318      	str	r3, [sp, #96]	; 0x60
  402548:	931b      	str	r3, [sp, #108]	; 0x6c
  40254a:	9309      	str	r3, [sp, #36]	; 0x24
  40254c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  402550:	46c8      	mov	r8, r9
  402552:	9316      	str	r3, [sp, #88]	; 0x58
  402554:	9317      	str	r3, [sp, #92]	; 0x5c
  402556:	f89a 3000 	ldrb.w	r3, [sl]
  40255a:	4654      	mov	r4, sl
  40255c:	b1e3      	cbz	r3, 402598 <_svfprintf_r+0x90>
  40255e:	2b25      	cmp	r3, #37	; 0x25
  402560:	d102      	bne.n	402568 <_svfprintf_r+0x60>
  402562:	e019      	b.n	402598 <_svfprintf_r+0x90>
  402564:	2b25      	cmp	r3, #37	; 0x25
  402566:	d003      	beq.n	402570 <_svfprintf_r+0x68>
  402568:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40256c:	2b00      	cmp	r3, #0
  40256e:	d1f9      	bne.n	402564 <_svfprintf_r+0x5c>
  402570:	eba4 050a 	sub.w	r5, r4, sl
  402574:	b185      	cbz	r5, 402598 <_svfprintf_r+0x90>
  402576:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402578:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40257a:	f8c8 a000 	str.w	sl, [r8]
  40257e:	3301      	adds	r3, #1
  402580:	442a      	add	r2, r5
  402582:	2b07      	cmp	r3, #7
  402584:	f8c8 5004 	str.w	r5, [r8, #4]
  402588:	9227      	str	r2, [sp, #156]	; 0x9c
  40258a:	9326      	str	r3, [sp, #152]	; 0x98
  40258c:	dc7f      	bgt.n	40268e <_svfprintf_r+0x186>
  40258e:	f108 0808 	add.w	r8, r8, #8
  402592:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402594:	442b      	add	r3, r5
  402596:	9309      	str	r3, [sp, #36]	; 0x24
  402598:	7823      	ldrb	r3, [r4, #0]
  40259a:	2b00      	cmp	r3, #0
  40259c:	d07f      	beq.n	40269e <_svfprintf_r+0x196>
  40259e:	2300      	movs	r3, #0
  4025a0:	461a      	mov	r2, r3
  4025a2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4025a6:	4619      	mov	r1, r3
  4025a8:	930d      	str	r3, [sp, #52]	; 0x34
  4025aa:	469b      	mov	fp, r3
  4025ac:	f04f 30ff 	mov.w	r0, #4294967295
  4025b0:	7863      	ldrb	r3, [r4, #1]
  4025b2:	900a      	str	r0, [sp, #40]	; 0x28
  4025b4:	f104 0a01 	add.w	sl, r4, #1
  4025b8:	f10a 0a01 	add.w	sl, sl, #1
  4025bc:	f1a3 0020 	sub.w	r0, r3, #32
  4025c0:	2858      	cmp	r0, #88	; 0x58
  4025c2:	f200 83c1 	bhi.w	402d48 <_svfprintf_r+0x840>
  4025c6:	e8df f010 	tbh	[pc, r0, lsl #1]
  4025ca:	0238      	.short	0x0238
  4025cc:	03bf03bf 	.word	0x03bf03bf
  4025d0:	03bf0240 	.word	0x03bf0240
  4025d4:	03bf03bf 	.word	0x03bf03bf
  4025d8:	03bf03bf 	.word	0x03bf03bf
  4025dc:	024503bf 	.word	0x024503bf
  4025e0:	03bf0203 	.word	0x03bf0203
  4025e4:	026b005d 	.word	0x026b005d
  4025e8:	028603bf 	.word	0x028603bf
  4025ec:	039d039d 	.word	0x039d039d
  4025f0:	039d039d 	.word	0x039d039d
  4025f4:	039d039d 	.word	0x039d039d
  4025f8:	039d039d 	.word	0x039d039d
  4025fc:	03bf039d 	.word	0x03bf039d
  402600:	03bf03bf 	.word	0x03bf03bf
  402604:	03bf03bf 	.word	0x03bf03bf
  402608:	03bf03bf 	.word	0x03bf03bf
  40260c:	03bf03bf 	.word	0x03bf03bf
  402610:	033703bf 	.word	0x033703bf
  402614:	03bf0357 	.word	0x03bf0357
  402618:	03bf0357 	.word	0x03bf0357
  40261c:	03bf03bf 	.word	0x03bf03bf
  402620:	039803bf 	.word	0x039803bf
  402624:	03bf03bf 	.word	0x03bf03bf
  402628:	03bf03ad 	.word	0x03bf03ad
  40262c:	03bf03bf 	.word	0x03bf03bf
  402630:	03bf03bf 	.word	0x03bf03bf
  402634:	03bf0259 	.word	0x03bf0259
  402638:	031e03bf 	.word	0x031e03bf
  40263c:	03bf03bf 	.word	0x03bf03bf
  402640:	03bf03bf 	.word	0x03bf03bf
  402644:	03bf03bf 	.word	0x03bf03bf
  402648:	03bf03bf 	.word	0x03bf03bf
  40264c:	03bf03bf 	.word	0x03bf03bf
  402650:	02db02c6 	.word	0x02db02c6
  402654:	03570357 	.word	0x03570357
  402658:	028b0357 	.word	0x028b0357
  40265c:	03bf02db 	.word	0x03bf02db
  402660:	029003bf 	.word	0x029003bf
  402664:	029d03bf 	.word	0x029d03bf
  402668:	02b401cc 	.word	0x02b401cc
  40266c:	03bf0208 	.word	0x03bf0208
  402670:	03bf01e1 	.word	0x03bf01e1
  402674:	03bf007e 	.word	0x03bf007e
  402678:	020d03bf 	.word	0x020d03bf
  40267c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40267e:	930f      	str	r3, [sp, #60]	; 0x3c
  402680:	4240      	negs	r0, r0
  402682:	900d      	str	r0, [sp, #52]	; 0x34
  402684:	f04b 0b04 	orr.w	fp, fp, #4
  402688:	f89a 3000 	ldrb.w	r3, [sl]
  40268c:	e794      	b.n	4025b8 <_svfprintf_r+0xb0>
  40268e:	aa25      	add	r2, sp, #148	; 0x94
  402690:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402692:	980c      	ldr	r0, [sp, #48]	; 0x30
  402694:	f003 f8a2 	bl	4057dc <__ssprint_r>
  402698:	b940      	cbnz	r0, 4026ac <_svfprintf_r+0x1a4>
  40269a:	46c8      	mov	r8, r9
  40269c:	e779      	b.n	402592 <_svfprintf_r+0x8a>
  40269e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4026a0:	b123      	cbz	r3, 4026ac <_svfprintf_r+0x1a4>
  4026a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4026a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4026a6:	aa25      	add	r2, sp, #148	; 0x94
  4026a8:	f003 f898 	bl	4057dc <__ssprint_r>
  4026ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4026ae:	899b      	ldrh	r3, [r3, #12]
  4026b0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4026b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4026b6:	bf18      	it	ne
  4026b8:	f04f 33ff 	movne.w	r3, #4294967295
  4026bc:	9309      	str	r3, [sp, #36]	; 0x24
  4026be:	9809      	ldr	r0, [sp, #36]	; 0x24
  4026c0:	b043      	add	sp, #268	; 0x10c
  4026c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026c6:	f01b 0f20 	tst.w	fp, #32
  4026ca:	9311      	str	r3, [sp, #68]	; 0x44
  4026cc:	f040 81dd 	bne.w	402a8a <_svfprintf_r+0x582>
  4026d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4026d2:	f01b 0f10 	tst.w	fp, #16
  4026d6:	4613      	mov	r3, r2
  4026d8:	f040 856e 	bne.w	4031b8 <_svfprintf_r+0xcb0>
  4026dc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4026e0:	f000 856a 	beq.w	4031b8 <_svfprintf_r+0xcb0>
  4026e4:	8814      	ldrh	r4, [r2, #0]
  4026e6:	3204      	adds	r2, #4
  4026e8:	2500      	movs	r5, #0
  4026ea:	2301      	movs	r3, #1
  4026ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4026ee:	2700      	movs	r7, #0
  4026f0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4026f4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4026f6:	1c4a      	adds	r2, r1, #1
  4026f8:	f000 8265 	beq.w	402bc6 <_svfprintf_r+0x6be>
  4026fc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  402700:	9207      	str	r2, [sp, #28]
  402702:	ea54 0205 	orrs.w	r2, r4, r5
  402706:	f040 8264 	bne.w	402bd2 <_svfprintf_r+0x6ca>
  40270a:	2900      	cmp	r1, #0
  40270c:	f040 843c 	bne.w	402f88 <_svfprintf_r+0xa80>
  402710:	2b00      	cmp	r3, #0
  402712:	f040 84d7 	bne.w	4030c4 <_svfprintf_r+0xbbc>
  402716:	f01b 0301 	ands.w	r3, fp, #1
  40271a:	930e      	str	r3, [sp, #56]	; 0x38
  40271c:	f000 8604 	beq.w	403328 <_svfprintf_r+0xe20>
  402720:	ae42      	add	r6, sp, #264	; 0x108
  402722:	2330      	movs	r3, #48	; 0x30
  402724:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40272a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40272c:	4293      	cmp	r3, r2
  40272e:	bfb8      	it	lt
  402730:	4613      	movlt	r3, r2
  402732:	9308      	str	r3, [sp, #32]
  402734:	2300      	movs	r3, #0
  402736:	9312      	str	r3, [sp, #72]	; 0x48
  402738:	b117      	cbz	r7, 402740 <_svfprintf_r+0x238>
  40273a:	9b08      	ldr	r3, [sp, #32]
  40273c:	3301      	adds	r3, #1
  40273e:	9308      	str	r3, [sp, #32]
  402740:	9b07      	ldr	r3, [sp, #28]
  402742:	f013 0302 	ands.w	r3, r3, #2
  402746:	9310      	str	r3, [sp, #64]	; 0x40
  402748:	d002      	beq.n	402750 <_svfprintf_r+0x248>
  40274a:	9b08      	ldr	r3, [sp, #32]
  40274c:	3302      	adds	r3, #2
  40274e:	9308      	str	r3, [sp, #32]
  402750:	9b07      	ldr	r3, [sp, #28]
  402752:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  402756:	f040 830e 	bne.w	402d76 <_svfprintf_r+0x86e>
  40275a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40275c:	9a08      	ldr	r2, [sp, #32]
  40275e:	eba3 0b02 	sub.w	fp, r3, r2
  402762:	f1bb 0f00 	cmp.w	fp, #0
  402766:	f340 8306 	ble.w	402d76 <_svfprintf_r+0x86e>
  40276a:	f1bb 0f10 	cmp.w	fp, #16
  40276e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402770:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402772:	dd29      	ble.n	4027c8 <_svfprintf_r+0x2c0>
  402774:	4643      	mov	r3, r8
  402776:	4621      	mov	r1, r4
  402778:	46a8      	mov	r8, r5
  40277a:	2710      	movs	r7, #16
  40277c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40277e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402780:	e006      	b.n	402790 <_svfprintf_r+0x288>
  402782:	f1ab 0b10 	sub.w	fp, fp, #16
  402786:	f1bb 0f10 	cmp.w	fp, #16
  40278a:	f103 0308 	add.w	r3, r3, #8
  40278e:	dd18      	ble.n	4027c2 <_svfprintf_r+0x2ba>
  402790:	3201      	adds	r2, #1
  402792:	48b7      	ldr	r0, [pc, #732]	; (402a70 <_svfprintf_r+0x568>)
  402794:	9226      	str	r2, [sp, #152]	; 0x98
  402796:	3110      	adds	r1, #16
  402798:	2a07      	cmp	r2, #7
  40279a:	9127      	str	r1, [sp, #156]	; 0x9c
  40279c:	e883 0081 	stmia.w	r3, {r0, r7}
  4027a0:	ddef      	ble.n	402782 <_svfprintf_r+0x27a>
  4027a2:	aa25      	add	r2, sp, #148	; 0x94
  4027a4:	4629      	mov	r1, r5
  4027a6:	4620      	mov	r0, r4
  4027a8:	f003 f818 	bl	4057dc <__ssprint_r>
  4027ac:	2800      	cmp	r0, #0
  4027ae:	f47f af7d 	bne.w	4026ac <_svfprintf_r+0x1a4>
  4027b2:	f1ab 0b10 	sub.w	fp, fp, #16
  4027b6:	f1bb 0f10 	cmp.w	fp, #16
  4027ba:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4027bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4027be:	464b      	mov	r3, r9
  4027c0:	dce6      	bgt.n	402790 <_svfprintf_r+0x288>
  4027c2:	4645      	mov	r5, r8
  4027c4:	460c      	mov	r4, r1
  4027c6:	4698      	mov	r8, r3
  4027c8:	3201      	adds	r2, #1
  4027ca:	4ba9      	ldr	r3, [pc, #676]	; (402a70 <_svfprintf_r+0x568>)
  4027cc:	9226      	str	r2, [sp, #152]	; 0x98
  4027ce:	445c      	add	r4, fp
  4027d0:	2a07      	cmp	r2, #7
  4027d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4027d4:	e888 0808 	stmia.w	r8, {r3, fp}
  4027d8:	f300 8498 	bgt.w	40310c <_svfprintf_r+0xc04>
  4027dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4027e0:	f108 0808 	add.w	r8, r8, #8
  4027e4:	b177      	cbz	r7, 402804 <_svfprintf_r+0x2fc>
  4027e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027e8:	3301      	adds	r3, #1
  4027ea:	3401      	adds	r4, #1
  4027ec:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4027f0:	2201      	movs	r2, #1
  4027f2:	2b07      	cmp	r3, #7
  4027f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4027f6:	9326      	str	r3, [sp, #152]	; 0x98
  4027f8:	e888 0006 	stmia.w	r8, {r1, r2}
  4027fc:	f300 83db 	bgt.w	402fb6 <_svfprintf_r+0xaae>
  402800:	f108 0808 	add.w	r8, r8, #8
  402804:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402806:	b16b      	cbz	r3, 402824 <_svfprintf_r+0x31c>
  402808:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40280a:	3301      	adds	r3, #1
  40280c:	3402      	adds	r4, #2
  40280e:	a91e      	add	r1, sp, #120	; 0x78
  402810:	2202      	movs	r2, #2
  402812:	2b07      	cmp	r3, #7
  402814:	9427      	str	r4, [sp, #156]	; 0x9c
  402816:	9326      	str	r3, [sp, #152]	; 0x98
  402818:	e888 0006 	stmia.w	r8, {r1, r2}
  40281c:	f300 83d6 	bgt.w	402fcc <_svfprintf_r+0xac4>
  402820:	f108 0808 	add.w	r8, r8, #8
  402824:	2d80      	cmp	r5, #128	; 0x80
  402826:	f000 8315 	beq.w	402e54 <_svfprintf_r+0x94c>
  40282a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40282c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40282e:	1a9f      	subs	r7, r3, r2
  402830:	2f00      	cmp	r7, #0
  402832:	dd36      	ble.n	4028a2 <_svfprintf_r+0x39a>
  402834:	2f10      	cmp	r7, #16
  402836:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402838:	4d8e      	ldr	r5, [pc, #568]	; (402a74 <_svfprintf_r+0x56c>)
  40283a:	dd27      	ble.n	40288c <_svfprintf_r+0x384>
  40283c:	4642      	mov	r2, r8
  40283e:	4621      	mov	r1, r4
  402840:	46b0      	mov	r8, r6
  402842:	f04f 0b10 	mov.w	fp, #16
  402846:	462e      	mov	r6, r5
  402848:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40284a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40284c:	e004      	b.n	402858 <_svfprintf_r+0x350>
  40284e:	3f10      	subs	r7, #16
  402850:	2f10      	cmp	r7, #16
  402852:	f102 0208 	add.w	r2, r2, #8
  402856:	dd15      	ble.n	402884 <_svfprintf_r+0x37c>
  402858:	3301      	adds	r3, #1
  40285a:	3110      	adds	r1, #16
  40285c:	2b07      	cmp	r3, #7
  40285e:	9127      	str	r1, [sp, #156]	; 0x9c
  402860:	9326      	str	r3, [sp, #152]	; 0x98
  402862:	e882 0840 	stmia.w	r2, {r6, fp}
  402866:	ddf2      	ble.n	40284e <_svfprintf_r+0x346>
  402868:	aa25      	add	r2, sp, #148	; 0x94
  40286a:	4629      	mov	r1, r5
  40286c:	4620      	mov	r0, r4
  40286e:	f002 ffb5 	bl	4057dc <__ssprint_r>
  402872:	2800      	cmp	r0, #0
  402874:	f47f af1a 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402878:	3f10      	subs	r7, #16
  40287a:	2f10      	cmp	r7, #16
  40287c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40287e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402880:	464a      	mov	r2, r9
  402882:	dce9      	bgt.n	402858 <_svfprintf_r+0x350>
  402884:	4635      	mov	r5, r6
  402886:	460c      	mov	r4, r1
  402888:	4646      	mov	r6, r8
  40288a:	4690      	mov	r8, r2
  40288c:	3301      	adds	r3, #1
  40288e:	443c      	add	r4, r7
  402890:	2b07      	cmp	r3, #7
  402892:	9427      	str	r4, [sp, #156]	; 0x9c
  402894:	9326      	str	r3, [sp, #152]	; 0x98
  402896:	e888 00a0 	stmia.w	r8, {r5, r7}
  40289a:	f300 8381 	bgt.w	402fa0 <_svfprintf_r+0xa98>
  40289e:	f108 0808 	add.w	r8, r8, #8
  4028a2:	9b07      	ldr	r3, [sp, #28]
  4028a4:	05df      	lsls	r7, r3, #23
  4028a6:	f100 8268 	bmi.w	402d7a <_svfprintf_r+0x872>
  4028aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028ac:	990e      	ldr	r1, [sp, #56]	; 0x38
  4028ae:	f8c8 6000 	str.w	r6, [r8]
  4028b2:	3301      	adds	r3, #1
  4028b4:	440c      	add	r4, r1
  4028b6:	2b07      	cmp	r3, #7
  4028b8:	9427      	str	r4, [sp, #156]	; 0x9c
  4028ba:	f8c8 1004 	str.w	r1, [r8, #4]
  4028be:	9326      	str	r3, [sp, #152]	; 0x98
  4028c0:	f300 834d 	bgt.w	402f5e <_svfprintf_r+0xa56>
  4028c4:	f108 0808 	add.w	r8, r8, #8
  4028c8:	9b07      	ldr	r3, [sp, #28]
  4028ca:	075b      	lsls	r3, r3, #29
  4028cc:	d53a      	bpl.n	402944 <_svfprintf_r+0x43c>
  4028ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4028d0:	9a08      	ldr	r2, [sp, #32]
  4028d2:	1a9d      	subs	r5, r3, r2
  4028d4:	2d00      	cmp	r5, #0
  4028d6:	dd35      	ble.n	402944 <_svfprintf_r+0x43c>
  4028d8:	2d10      	cmp	r5, #16
  4028da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028dc:	dd20      	ble.n	402920 <_svfprintf_r+0x418>
  4028de:	2610      	movs	r6, #16
  4028e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4028e2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4028e6:	e004      	b.n	4028f2 <_svfprintf_r+0x3ea>
  4028e8:	3d10      	subs	r5, #16
  4028ea:	2d10      	cmp	r5, #16
  4028ec:	f108 0808 	add.w	r8, r8, #8
  4028f0:	dd16      	ble.n	402920 <_svfprintf_r+0x418>
  4028f2:	3301      	adds	r3, #1
  4028f4:	4a5e      	ldr	r2, [pc, #376]	; (402a70 <_svfprintf_r+0x568>)
  4028f6:	9326      	str	r3, [sp, #152]	; 0x98
  4028f8:	3410      	adds	r4, #16
  4028fa:	2b07      	cmp	r3, #7
  4028fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4028fe:	e888 0044 	stmia.w	r8, {r2, r6}
  402902:	ddf1      	ble.n	4028e8 <_svfprintf_r+0x3e0>
  402904:	aa25      	add	r2, sp, #148	; 0x94
  402906:	4659      	mov	r1, fp
  402908:	4638      	mov	r0, r7
  40290a:	f002 ff67 	bl	4057dc <__ssprint_r>
  40290e:	2800      	cmp	r0, #0
  402910:	f47f aecc 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402914:	3d10      	subs	r5, #16
  402916:	2d10      	cmp	r5, #16
  402918:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40291a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40291c:	46c8      	mov	r8, r9
  40291e:	dce8      	bgt.n	4028f2 <_svfprintf_r+0x3ea>
  402920:	3301      	adds	r3, #1
  402922:	4a53      	ldr	r2, [pc, #332]	; (402a70 <_svfprintf_r+0x568>)
  402924:	9326      	str	r3, [sp, #152]	; 0x98
  402926:	442c      	add	r4, r5
  402928:	2b07      	cmp	r3, #7
  40292a:	9427      	str	r4, [sp, #156]	; 0x9c
  40292c:	e888 0024 	stmia.w	r8, {r2, r5}
  402930:	dd08      	ble.n	402944 <_svfprintf_r+0x43c>
  402932:	aa25      	add	r2, sp, #148	; 0x94
  402934:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402936:	980c      	ldr	r0, [sp, #48]	; 0x30
  402938:	f002 ff50 	bl	4057dc <__ssprint_r>
  40293c:	2800      	cmp	r0, #0
  40293e:	f47f aeb5 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402942:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402944:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402948:	9908      	ldr	r1, [sp, #32]
  40294a:	428a      	cmp	r2, r1
  40294c:	bfac      	ite	ge
  40294e:	189b      	addge	r3, r3, r2
  402950:	185b      	addlt	r3, r3, r1
  402952:	9309      	str	r3, [sp, #36]	; 0x24
  402954:	2c00      	cmp	r4, #0
  402956:	f040 830d 	bne.w	402f74 <_svfprintf_r+0xa6c>
  40295a:	2300      	movs	r3, #0
  40295c:	9326      	str	r3, [sp, #152]	; 0x98
  40295e:	46c8      	mov	r8, r9
  402960:	e5f9      	b.n	402556 <_svfprintf_r+0x4e>
  402962:	9311      	str	r3, [sp, #68]	; 0x44
  402964:	f01b 0320 	ands.w	r3, fp, #32
  402968:	f040 81e3 	bne.w	402d32 <_svfprintf_r+0x82a>
  40296c:	f01b 0210 	ands.w	r2, fp, #16
  402970:	f040 842e 	bne.w	4031d0 <_svfprintf_r+0xcc8>
  402974:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402978:	f000 842a 	beq.w	4031d0 <_svfprintf_r+0xcc8>
  40297c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40297e:	4613      	mov	r3, r2
  402980:	460a      	mov	r2, r1
  402982:	3204      	adds	r2, #4
  402984:	880c      	ldrh	r4, [r1, #0]
  402986:	920f      	str	r2, [sp, #60]	; 0x3c
  402988:	2500      	movs	r5, #0
  40298a:	e6b0      	b.n	4026ee <_svfprintf_r+0x1e6>
  40298c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40298e:	9311      	str	r3, [sp, #68]	; 0x44
  402990:	6816      	ldr	r6, [r2, #0]
  402992:	2400      	movs	r4, #0
  402994:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  402998:	1d15      	adds	r5, r2, #4
  40299a:	2e00      	cmp	r6, #0
  40299c:	f000 86a7 	beq.w	4036ee <_svfprintf_r+0x11e6>
  4029a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4029a2:	1c53      	adds	r3, r2, #1
  4029a4:	f000 8609 	beq.w	4035ba <_svfprintf_r+0x10b2>
  4029a8:	4621      	mov	r1, r4
  4029aa:	4630      	mov	r0, r6
  4029ac:	f002 fa88 	bl	404ec0 <memchr>
  4029b0:	2800      	cmp	r0, #0
  4029b2:	f000 86e1 	beq.w	403778 <_svfprintf_r+0x1270>
  4029b6:	1b83      	subs	r3, r0, r6
  4029b8:	930e      	str	r3, [sp, #56]	; 0x38
  4029ba:	940a      	str	r4, [sp, #40]	; 0x28
  4029bc:	950f      	str	r5, [sp, #60]	; 0x3c
  4029be:	f8cd b01c 	str.w	fp, [sp, #28]
  4029c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4029c6:	9308      	str	r3, [sp, #32]
  4029c8:	9412      	str	r4, [sp, #72]	; 0x48
  4029ca:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4029ce:	e6b3      	b.n	402738 <_svfprintf_r+0x230>
  4029d0:	f89a 3000 	ldrb.w	r3, [sl]
  4029d4:	2201      	movs	r2, #1
  4029d6:	212b      	movs	r1, #43	; 0x2b
  4029d8:	e5ee      	b.n	4025b8 <_svfprintf_r+0xb0>
  4029da:	f04b 0b20 	orr.w	fp, fp, #32
  4029de:	f89a 3000 	ldrb.w	r3, [sl]
  4029e2:	e5e9      	b.n	4025b8 <_svfprintf_r+0xb0>
  4029e4:	9311      	str	r3, [sp, #68]	; 0x44
  4029e6:	2a00      	cmp	r2, #0
  4029e8:	f040 8795 	bne.w	403916 <_svfprintf_r+0x140e>
  4029ec:	4b22      	ldr	r3, [pc, #136]	; (402a78 <_svfprintf_r+0x570>)
  4029ee:	9318      	str	r3, [sp, #96]	; 0x60
  4029f0:	f01b 0f20 	tst.w	fp, #32
  4029f4:	f040 8111 	bne.w	402c1a <_svfprintf_r+0x712>
  4029f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4029fa:	f01b 0f10 	tst.w	fp, #16
  4029fe:	4613      	mov	r3, r2
  402a00:	f040 83e1 	bne.w	4031c6 <_svfprintf_r+0xcbe>
  402a04:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402a08:	f000 83dd 	beq.w	4031c6 <_svfprintf_r+0xcbe>
  402a0c:	3304      	adds	r3, #4
  402a0e:	8814      	ldrh	r4, [r2, #0]
  402a10:	930f      	str	r3, [sp, #60]	; 0x3c
  402a12:	2500      	movs	r5, #0
  402a14:	f01b 0f01 	tst.w	fp, #1
  402a18:	f000 810c 	beq.w	402c34 <_svfprintf_r+0x72c>
  402a1c:	ea54 0305 	orrs.w	r3, r4, r5
  402a20:	f000 8108 	beq.w	402c34 <_svfprintf_r+0x72c>
  402a24:	2330      	movs	r3, #48	; 0x30
  402a26:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402a2a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402a2e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  402a32:	f04b 0b02 	orr.w	fp, fp, #2
  402a36:	2302      	movs	r3, #2
  402a38:	e659      	b.n	4026ee <_svfprintf_r+0x1e6>
  402a3a:	f89a 3000 	ldrb.w	r3, [sl]
  402a3e:	2900      	cmp	r1, #0
  402a40:	f47f adba 	bne.w	4025b8 <_svfprintf_r+0xb0>
  402a44:	2201      	movs	r2, #1
  402a46:	2120      	movs	r1, #32
  402a48:	e5b6      	b.n	4025b8 <_svfprintf_r+0xb0>
  402a4a:	f04b 0b01 	orr.w	fp, fp, #1
  402a4e:	f89a 3000 	ldrb.w	r3, [sl]
  402a52:	e5b1      	b.n	4025b8 <_svfprintf_r+0xb0>
  402a54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402a56:	6823      	ldr	r3, [r4, #0]
  402a58:	930d      	str	r3, [sp, #52]	; 0x34
  402a5a:	4618      	mov	r0, r3
  402a5c:	2800      	cmp	r0, #0
  402a5e:	4623      	mov	r3, r4
  402a60:	f103 0304 	add.w	r3, r3, #4
  402a64:	f6ff ae0a 	blt.w	40267c <_svfprintf_r+0x174>
  402a68:	930f      	str	r3, [sp, #60]	; 0x3c
  402a6a:	f89a 3000 	ldrb.w	r3, [sl]
  402a6e:	e5a3      	b.n	4025b8 <_svfprintf_r+0xb0>
  402a70:	0040749c 	.word	0x0040749c
  402a74:	004074ac 	.word	0x004074ac
  402a78:	0040747c 	.word	0x0040747c
  402a7c:	f04b 0b10 	orr.w	fp, fp, #16
  402a80:	f01b 0f20 	tst.w	fp, #32
  402a84:	9311      	str	r3, [sp, #68]	; 0x44
  402a86:	f43f ae23 	beq.w	4026d0 <_svfprintf_r+0x1c8>
  402a8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402a8c:	3507      	adds	r5, #7
  402a8e:	f025 0307 	bic.w	r3, r5, #7
  402a92:	f103 0208 	add.w	r2, r3, #8
  402a96:	e9d3 4500 	ldrd	r4, r5, [r3]
  402a9a:	920f      	str	r2, [sp, #60]	; 0x3c
  402a9c:	2301      	movs	r3, #1
  402a9e:	e626      	b.n	4026ee <_svfprintf_r+0x1e6>
  402aa0:	f89a 3000 	ldrb.w	r3, [sl]
  402aa4:	2b2a      	cmp	r3, #42	; 0x2a
  402aa6:	f10a 0401 	add.w	r4, sl, #1
  402aaa:	f000 8727 	beq.w	4038fc <_svfprintf_r+0x13f4>
  402aae:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402ab2:	2809      	cmp	r0, #9
  402ab4:	46a2      	mov	sl, r4
  402ab6:	f200 86ad 	bhi.w	403814 <_svfprintf_r+0x130c>
  402aba:	2300      	movs	r3, #0
  402abc:	461c      	mov	r4, r3
  402abe:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402ac2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402ac6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402aca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402ace:	2809      	cmp	r0, #9
  402ad0:	d9f5      	bls.n	402abe <_svfprintf_r+0x5b6>
  402ad2:	940a      	str	r4, [sp, #40]	; 0x28
  402ad4:	e572      	b.n	4025bc <_svfprintf_r+0xb4>
  402ad6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  402ada:	f89a 3000 	ldrb.w	r3, [sl]
  402ade:	e56b      	b.n	4025b8 <_svfprintf_r+0xb0>
  402ae0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  402ae4:	f89a 3000 	ldrb.w	r3, [sl]
  402ae8:	e566      	b.n	4025b8 <_svfprintf_r+0xb0>
  402aea:	f89a 3000 	ldrb.w	r3, [sl]
  402aee:	2b6c      	cmp	r3, #108	; 0x6c
  402af0:	bf03      	ittte	eq
  402af2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  402af6:	f04b 0b20 	orreq.w	fp, fp, #32
  402afa:	f10a 0a01 	addeq.w	sl, sl, #1
  402afe:	f04b 0b10 	orrne.w	fp, fp, #16
  402b02:	e559      	b.n	4025b8 <_svfprintf_r+0xb0>
  402b04:	2a00      	cmp	r2, #0
  402b06:	f040 8711 	bne.w	40392c <_svfprintf_r+0x1424>
  402b0a:	f01b 0f20 	tst.w	fp, #32
  402b0e:	f040 84f9 	bne.w	403504 <_svfprintf_r+0xffc>
  402b12:	f01b 0f10 	tst.w	fp, #16
  402b16:	f040 84ac 	bne.w	403472 <_svfprintf_r+0xf6a>
  402b1a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402b1e:	f000 84a8 	beq.w	403472 <_svfprintf_r+0xf6a>
  402b22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402b24:	6813      	ldr	r3, [r2, #0]
  402b26:	3204      	adds	r2, #4
  402b28:	920f      	str	r2, [sp, #60]	; 0x3c
  402b2a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  402b2e:	801a      	strh	r2, [r3, #0]
  402b30:	e511      	b.n	402556 <_svfprintf_r+0x4e>
  402b32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402b34:	4bb3      	ldr	r3, [pc, #716]	; (402e04 <_svfprintf_r+0x8fc>)
  402b36:	680c      	ldr	r4, [r1, #0]
  402b38:	9318      	str	r3, [sp, #96]	; 0x60
  402b3a:	2230      	movs	r2, #48	; 0x30
  402b3c:	2378      	movs	r3, #120	; 0x78
  402b3e:	3104      	adds	r1, #4
  402b40:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  402b44:	9311      	str	r3, [sp, #68]	; 0x44
  402b46:	f04b 0b02 	orr.w	fp, fp, #2
  402b4a:	910f      	str	r1, [sp, #60]	; 0x3c
  402b4c:	2500      	movs	r5, #0
  402b4e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  402b52:	2302      	movs	r3, #2
  402b54:	e5cb      	b.n	4026ee <_svfprintf_r+0x1e6>
  402b56:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402b58:	9311      	str	r3, [sp, #68]	; 0x44
  402b5a:	680a      	ldr	r2, [r1, #0]
  402b5c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402b60:	2300      	movs	r3, #0
  402b62:	460a      	mov	r2, r1
  402b64:	461f      	mov	r7, r3
  402b66:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402b6a:	3204      	adds	r2, #4
  402b6c:	2301      	movs	r3, #1
  402b6e:	9308      	str	r3, [sp, #32]
  402b70:	f8cd b01c 	str.w	fp, [sp, #28]
  402b74:	970a      	str	r7, [sp, #40]	; 0x28
  402b76:	9712      	str	r7, [sp, #72]	; 0x48
  402b78:	920f      	str	r2, [sp, #60]	; 0x3c
  402b7a:	930e      	str	r3, [sp, #56]	; 0x38
  402b7c:	ae28      	add	r6, sp, #160	; 0xa0
  402b7e:	e5df      	b.n	402740 <_svfprintf_r+0x238>
  402b80:	9311      	str	r3, [sp, #68]	; 0x44
  402b82:	2a00      	cmp	r2, #0
  402b84:	f040 86ea 	bne.w	40395c <_svfprintf_r+0x1454>
  402b88:	f01b 0f20 	tst.w	fp, #32
  402b8c:	d15d      	bne.n	402c4a <_svfprintf_r+0x742>
  402b8e:	f01b 0f10 	tst.w	fp, #16
  402b92:	f040 8308 	bne.w	4031a6 <_svfprintf_r+0xc9e>
  402b96:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402b9a:	f000 8304 	beq.w	4031a6 <_svfprintf_r+0xc9e>
  402b9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402ba0:	f9b1 4000 	ldrsh.w	r4, [r1]
  402ba4:	3104      	adds	r1, #4
  402ba6:	17e5      	asrs	r5, r4, #31
  402ba8:	4622      	mov	r2, r4
  402baa:	462b      	mov	r3, r5
  402bac:	910f      	str	r1, [sp, #60]	; 0x3c
  402bae:	2a00      	cmp	r2, #0
  402bb0:	f173 0300 	sbcs.w	r3, r3, #0
  402bb4:	db58      	blt.n	402c68 <_svfprintf_r+0x760>
  402bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
  402bb8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402bbc:	1c4a      	adds	r2, r1, #1
  402bbe:	f04f 0301 	mov.w	r3, #1
  402bc2:	f47f ad9b 	bne.w	4026fc <_svfprintf_r+0x1f4>
  402bc6:	ea54 0205 	orrs.w	r2, r4, r5
  402bca:	f000 81df 	beq.w	402f8c <_svfprintf_r+0xa84>
  402bce:	f8cd b01c 	str.w	fp, [sp, #28]
  402bd2:	2b01      	cmp	r3, #1
  402bd4:	f000 827b 	beq.w	4030ce <_svfprintf_r+0xbc6>
  402bd8:	2b02      	cmp	r3, #2
  402bda:	f040 8206 	bne.w	402fea <_svfprintf_r+0xae2>
  402bde:	9818      	ldr	r0, [sp, #96]	; 0x60
  402be0:	464e      	mov	r6, r9
  402be2:	0923      	lsrs	r3, r4, #4
  402be4:	f004 010f 	and.w	r1, r4, #15
  402be8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402bec:	092a      	lsrs	r2, r5, #4
  402bee:	461c      	mov	r4, r3
  402bf0:	4615      	mov	r5, r2
  402bf2:	5c43      	ldrb	r3, [r0, r1]
  402bf4:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402bf8:	ea54 0305 	orrs.w	r3, r4, r5
  402bfc:	d1f1      	bne.n	402be2 <_svfprintf_r+0x6da>
  402bfe:	eba9 0306 	sub.w	r3, r9, r6
  402c02:	930e      	str	r3, [sp, #56]	; 0x38
  402c04:	e590      	b.n	402728 <_svfprintf_r+0x220>
  402c06:	9311      	str	r3, [sp, #68]	; 0x44
  402c08:	2a00      	cmp	r2, #0
  402c0a:	f040 86a3 	bne.w	403954 <_svfprintf_r+0x144c>
  402c0e:	4b7e      	ldr	r3, [pc, #504]	; (402e08 <_svfprintf_r+0x900>)
  402c10:	9318      	str	r3, [sp, #96]	; 0x60
  402c12:	f01b 0f20 	tst.w	fp, #32
  402c16:	f43f aeef 	beq.w	4029f8 <_svfprintf_r+0x4f0>
  402c1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402c1c:	3507      	adds	r5, #7
  402c1e:	f025 0307 	bic.w	r3, r5, #7
  402c22:	f103 0208 	add.w	r2, r3, #8
  402c26:	f01b 0f01 	tst.w	fp, #1
  402c2a:	920f      	str	r2, [sp, #60]	; 0x3c
  402c2c:	e9d3 4500 	ldrd	r4, r5, [r3]
  402c30:	f47f aef4 	bne.w	402a1c <_svfprintf_r+0x514>
  402c34:	2302      	movs	r3, #2
  402c36:	e55a      	b.n	4026ee <_svfprintf_r+0x1e6>
  402c38:	9311      	str	r3, [sp, #68]	; 0x44
  402c3a:	2a00      	cmp	r2, #0
  402c3c:	f040 8686 	bne.w	40394c <_svfprintf_r+0x1444>
  402c40:	f04b 0b10 	orr.w	fp, fp, #16
  402c44:	f01b 0f20 	tst.w	fp, #32
  402c48:	d0a1      	beq.n	402b8e <_svfprintf_r+0x686>
  402c4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402c4c:	3507      	adds	r5, #7
  402c4e:	f025 0507 	bic.w	r5, r5, #7
  402c52:	e9d5 2300 	ldrd	r2, r3, [r5]
  402c56:	2a00      	cmp	r2, #0
  402c58:	f105 0108 	add.w	r1, r5, #8
  402c5c:	461d      	mov	r5, r3
  402c5e:	f173 0300 	sbcs.w	r3, r3, #0
  402c62:	910f      	str	r1, [sp, #60]	; 0x3c
  402c64:	4614      	mov	r4, r2
  402c66:	daa6      	bge.n	402bb6 <_svfprintf_r+0x6ae>
  402c68:	272d      	movs	r7, #45	; 0x2d
  402c6a:	4264      	negs	r4, r4
  402c6c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402c70:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402c74:	2301      	movs	r3, #1
  402c76:	e53d      	b.n	4026f4 <_svfprintf_r+0x1ec>
  402c78:	9311      	str	r3, [sp, #68]	; 0x44
  402c7a:	2a00      	cmp	r2, #0
  402c7c:	f040 8662 	bne.w	403944 <_svfprintf_r+0x143c>
  402c80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402c82:	3507      	adds	r5, #7
  402c84:	f025 0307 	bic.w	r3, r5, #7
  402c88:	f103 0208 	add.w	r2, r3, #8
  402c8c:	920f      	str	r2, [sp, #60]	; 0x3c
  402c8e:	681a      	ldr	r2, [r3, #0]
  402c90:	9215      	str	r2, [sp, #84]	; 0x54
  402c92:	685b      	ldr	r3, [r3, #4]
  402c94:	9314      	str	r3, [sp, #80]	; 0x50
  402c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402c98:	9d15      	ldr	r5, [sp, #84]	; 0x54
  402c9a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402c9e:	4628      	mov	r0, r5
  402ca0:	4621      	mov	r1, r4
  402ca2:	f04f 32ff 	mov.w	r2, #4294967295
  402ca6:	4b59      	ldr	r3, [pc, #356]	; (402e0c <_svfprintf_r+0x904>)
  402ca8:	f003 fe5e 	bl	406968 <__aeabi_dcmpun>
  402cac:	2800      	cmp	r0, #0
  402cae:	f040 834a 	bne.w	403346 <_svfprintf_r+0xe3e>
  402cb2:	4628      	mov	r0, r5
  402cb4:	4621      	mov	r1, r4
  402cb6:	f04f 32ff 	mov.w	r2, #4294967295
  402cba:	4b54      	ldr	r3, [pc, #336]	; (402e0c <_svfprintf_r+0x904>)
  402cbc:	f003 fe36 	bl	40692c <__aeabi_dcmple>
  402cc0:	2800      	cmp	r0, #0
  402cc2:	f040 8340 	bne.w	403346 <_svfprintf_r+0xe3e>
  402cc6:	a815      	add	r0, sp, #84	; 0x54
  402cc8:	c80d      	ldmia	r0, {r0, r2, r3}
  402cca:	9914      	ldr	r1, [sp, #80]	; 0x50
  402ccc:	f003 fe24 	bl	406918 <__aeabi_dcmplt>
  402cd0:	2800      	cmp	r0, #0
  402cd2:	f040 8530 	bne.w	403736 <_svfprintf_r+0x122e>
  402cd6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402cda:	4e4d      	ldr	r6, [pc, #308]	; (402e10 <_svfprintf_r+0x908>)
  402cdc:	4b4d      	ldr	r3, [pc, #308]	; (402e14 <_svfprintf_r+0x90c>)
  402cde:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  402ce2:	9007      	str	r0, [sp, #28]
  402ce4:	9811      	ldr	r0, [sp, #68]	; 0x44
  402ce6:	2203      	movs	r2, #3
  402ce8:	2100      	movs	r1, #0
  402cea:	9208      	str	r2, [sp, #32]
  402cec:	910a      	str	r1, [sp, #40]	; 0x28
  402cee:	2847      	cmp	r0, #71	; 0x47
  402cf0:	bfd8      	it	le
  402cf2:	461e      	movle	r6, r3
  402cf4:	920e      	str	r2, [sp, #56]	; 0x38
  402cf6:	9112      	str	r1, [sp, #72]	; 0x48
  402cf8:	e51e      	b.n	402738 <_svfprintf_r+0x230>
  402cfa:	f04b 0b08 	orr.w	fp, fp, #8
  402cfe:	f89a 3000 	ldrb.w	r3, [sl]
  402d02:	e459      	b.n	4025b8 <_svfprintf_r+0xb0>
  402d04:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402d08:	2300      	movs	r3, #0
  402d0a:	461c      	mov	r4, r3
  402d0c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402d10:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402d14:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402d18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402d1c:	2809      	cmp	r0, #9
  402d1e:	d9f5      	bls.n	402d0c <_svfprintf_r+0x804>
  402d20:	940d      	str	r4, [sp, #52]	; 0x34
  402d22:	e44b      	b.n	4025bc <_svfprintf_r+0xb4>
  402d24:	f04b 0b10 	orr.w	fp, fp, #16
  402d28:	9311      	str	r3, [sp, #68]	; 0x44
  402d2a:	f01b 0320 	ands.w	r3, fp, #32
  402d2e:	f43f ae1d 	beq.w	40296c <_svfprintf_r+0x464>
  402d32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402d34:	3507      	adds	r5, #7
  402d36:	f025 0307 	bic.w	r3, r5, #7
  402d3a:	f103 0208 	add.w	r2, r3, #8
  402d3e:	e9d3 4500 	ldrd	r4, r5, [r3]
  402d42:	920f      	str	r2, [sp, #60]	; 0x3c
  402d44:	2300      	movs	r3, #0
  402d46:	e4d2      	b.n	4026ee <_svfprintf_r+0x1e6>
  402d48:	9311      	str	r3, [sp, #68]	; 0x44
  402d4a:	2a00      	cmp	r2, #0
  402d4c:	f040 85e7 	bne.w	40391e <_svfprintf_r+0x1416>
  402d50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d52:	2a00      	cmp	r2, #0
  402d54:	f43f aca3 	beq.w	40269e <_svfprintf_r+0x196>
  402d58:	2300      	movs	r3, #0
  402d5a:	2101      	movs	r1, #1
  402d5c:	461f      	mov	r7, r3
  402d5e:	9108      	str	r1, [sp, #32]
  402d60:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402d64:	f8cd b01c 	str.w	fp, [sp, #28]
  402d68:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402d6c:	930a      	str	r3, [sp, #40]	; 0x28
  402d6e:	9312      	str	r3, [sp, #72]	; 0x48
  402d70:	910e      	str	r1, [sp, #56]	; 0x38
  402d72:	ae28      	add	r6, sp, #160	; 0xa0
  402d74:	e4e4      	b.n	402740 <_svfprintf_r+0x238>
  402d76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d78:	e534      	b.n	4027e4 <_svfprintf_r+0x2dc>
  402d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402d7c:	2b65      	cmp	r3, #101	; 0x65
  402d7e:	f340 80a7 	ble.w	402ed0 <_svfprintf_r+0x9c8>
  402d82:	a815      	add	r0, sp, #84	; 0x54
  402d84:	c80d      	ldmia	r0, {r0, r2, r3}
  402d86:	9914      	ldr	r1, [sp, #80]	; 0x50
  402d88:	f003 fdbc 	bl	406904 <__aeabi_dcmpeq>
  402d8c:	2800      	cmp	r0, #0
  402d8e:	f000 8150 	beq.w	403032 <_svfprintf_r+0xb2a>
  402d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d94:	4a20      	ldr	r2, [pc, #128]	; (402e18 <_svfprintf_r+0x910>)
  402d96:	f8c8 2000 	str.w	r2, [r8]
  402d9a:	3301      	adds	r3, #1
  402d9c:	3401      	adds	r4, #1
  402d9e:	2201      	movs	r2, #1
  402da0:	2b07      	cmp	r3, #7
  402da2:	9427      	str	r4, [sp, #156]	; 0x9c
  402da4:	9326      	str	r3, [sp, #152]	; 0x98
  402da6:	f8c8 2004 	str.w	r2, [r8, #4]
  402daa:	f300 836a 	bgt.w	403482 <_svfprintf_r+0xf7a>
  402dae:	f108 0808 	add.w	r8, r8, #8
  402db2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402db4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402db6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402db8:	4293      	cmp	r3, r2
  402dba:	db03      	blt.n	402dc4 <_svfprintf_r+0x8bc>
  402dbc:	9b07      	ldr	r3, [sp, #28]
  402dbe:	07dd      	lsls	r5, r3, #31
  402dc0:	f57f ad82 	bpl.w	4028c8 <_svfprintf_r+0x3c0>
  402dc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402dc6:	9919      	ldr	r1, [sp, #100]	; 0x64
  402dc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402dca:	f8c8 2000 	str.w	r2, [r8]
  402dce:	3301      	adds	r3, #1
  402dd0:	440c      	add	r4, r1
  402dd2:	2b07      	cmp	r3, #7
  402dd4:	f8c8 1004 	str.w	r1, [r8, #4]
  402dd8:	9427      	str	r4, [sp, #156]	; 0x9c
  402dda:	9326      	str	r3, [sp, #152]	; 0x98
  402ddc:	f300 839e 	bgt.w	40351c <_svfprintf_r+0x1014>
  402de0:	f108 0808 	add.w	r8, r8, #8
  402de4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402de6:	1e5e      	subs	r6, r3, #1
  402de8:	2e00      	cmp	r6, #0
  402dea:	f77f ad6d 	ble.w	4028c8 <_svfprintf_r+0x3c0>
  402dee:	2e10      	cmp	r6, #16
  402df0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402df2:	4d0a      	ldr	r5, [pc, #40]	; (402e1c <_svfprintf_r+0x914>)
  402df4:	f340 81f5 	ble.w	4031e2 <_svfprintf_r+0xcda>
  402df8:	4622      	mov	r2, r4
  402dfa:	2710      	movs	r7, #16
  402dfc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402e00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402e02:	e013      	b.n	402e2c <_svfprintf_r+0x924>
  402e04:	0040747c 	.word	0x0040747c
  402e08:	00407468 	.word	0x00407468
  402e0c:	7fefffff 	.word	0x7fefffff
  402e10:	0040745c 	.word	0x0040745c
  402e14:	00407458 	.word	0x00407458
  402e18:	00407498 	.word	0x00407498
  402e1c:	004074ac 	.word	0x004074ac
  402e20:	f108 0808 	add.w	r8, r8, #8
  402e24:	3e10      	subs	r6, #16
  402e26:	2e10      	cmp	r6, #16
  402e28:	f340 81da 	ble.w	4031e0 <_svfprintf_r+0xcd8>
  402e2c:	3301      	adds	r3, #1
  402e2e:	3210      	adds	r2, #16
  402e30:	2b07      	cmp	r3, #7
  402e32:	9227      	str	r2, [sp, #156]	; 0x9c
  402e34:	9326      	str	r3, [sp, #152]	; 0x98
  402e36:	e888 00a0 	stmia.w	r8, {r5, r7}
  402e3a:	ddf1      	ble.n	402e20 <_svfprintf_r+0x918>
  402e3c:	aa25      	add	r2, sp, #148	; 0x94
  402e3e:	4621      	mov	r1, r4
  402e40:	4658      	mov	r0, fp
  402e42:	f002 fccb 	bl	4057dc <__ssprint_r>
  402e46:	2800      	cmp	r0, #0
  402e48:	f47f ac30 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402e4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402e4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e50:	46c8      	mov	r8, r9
  402e52:	e7e7      	b.n	402e24 <_svfprintf_r+0x91c>
  402e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402e56:	9a08      	ldr	r2, [sp, #32]
  402e58:	1a9f      	subs	r7, r3, r2
  402e5a:	2f00      	cmp	r7, #0
  402e5c:	f77f ace5 	ble.w	40282a <_svfprintf_r+0x322>
  402e60:	2f10      	cmp	r7, #16
  402e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e64:	4db6      	ldr	r5, [pc, #728]	; (403140 <_svfprintf_r+0xc38>)
  402e66:	dd27      	ble.n	402eb8 <_svfprintf_r+0x9b0>
  402e68:	4642      	mov	r2, r8
  402e6a:	4621      	mov	r1, r4
  402e6c:	46b0      	mov	r8, r6
  402e6e:	f04f 0b10 	mov.w	fp, #16
  402e72:	462e      	mov	r6, r5
  402e74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402e76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402e78:	e004      	b.n	402e84 <_svfprintf_r+0x97c>
  402e7a:	3f10      	subs	r7, #16
  402e7c:	2f10      	cmp	r7, #16
  402e7e:	f102 0208 	add.w	r2, r2, #8
  402e82:	dd15      	ble.n	402eb0 <_svfprintf_r+0x9a8>
  402e84:	3301      	adds	r3, #1
  402e86:	3110      	adds	r1, #16
  402e88:	2b07      	cmp	r3, #7
  402e8a:	9127      	str	r1, [sp, #156]	; 0x9c
  402e8c:	9326      	str	r3, [sp, #152]	; 0x98
  402e8e:	e882 0840 	stmia.w	r2, {r6, fp}
  402e92:	ddf2      	ble.n	402e7a <_svfprintf_r+0x972>
  402e94:	aa25      	add	r2, sp, #148	; 0x94
  402e96:	4629      	mov	r1, r5
  402e98:	4620      	mov	r0, r4
  402e9a:	f002 fc9f 	bl	4057dc <__ssprint_r>
  402e9e:	2800      	cmp	r0, #0
  402ea0:	f47f ac04 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402ea4:	3f10      	subs	r7, #16
  402ea6:	2f10      	cmp	r7, #16
  402ea8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402eac:	464a      	mov	r2, r9
  402eae:	dce9      	bgt.n	402e84 <_svfprintf_r+0x97c>
  402eb0:	4635      	mov	r5, r6
  402eb2:	460c      	mov	r4, r1
  402eb4:	4646      	mov	r6, r8
  402eb6:	4690      	mov	r8, r2
  402eb8:	3301      	adds	r3, #1
  402eba:	443c      	add	r4, r7
  402ebc:	2b07      	cmp	r3, #7
  402ebe:	9427      	str	r4, [sp, #156]	; 0x9c
  402ec0:	9326      	str	r3, [sp, #152]	; 0x98
  402ec2:	e888 00a0 	stmia.w	r8, {r5, r7}
  402ec6:	f300 8232 	bgt.w	40332e <_svfprintf_r+0xe26>
  402eca:	f108 0808 	add.w	r8, r8, #8
  402ece:	e4ac      	b.n	40282a <_svfprintf_r+0x322>
  402ed0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402ed2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402ed4:	2b01      	cmp	r3, #1
  402ed6:	f340 81fe 	ble.w	4032d6 <_svfprintf_r+0xdce>
  402eda:	3701      	adds	r7, #1
  402edc:	3401      	adds	r4, #1
  402ede:	2301      	movs	r3, #1
  402ee0:	2f07      	cmp	r7, #7
  402ee2:	9427      	str	r4, [sp, #156]	; 0x9c
  402ee4:	9726      	str	r7, [sp, #152]	; 0x98
  402ee6:	f8c8 6000 	str.w	r6, [r8]
  402eea:	f8c8 3004 	str.w	r3, [r8, #4]
  402eee:	f300 8203 	bgt.w	4032f8 <_svfprintf_r+0xdf0>
  402ef2:	f108 0808 	add.w	r8, r8, #8
  402ef6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402ef8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402efa:	f8c8 3000 	str.w	r3, [r8]
  402efe:	3701      	adds	r7, #1
  402f00:	4414      	add	r4, r2
  402f02:	2f07      	cmp	r7, #7
  402f04:	9427      	str	r4, [sp, #156]	; 0x9c
  402f06:	9726      	str	r7, [sp, #152]	; 0x98
  402f08:	f8c8 2004 	str.w	r2, [r8, #4]
  402f0c:	f300 8200 	bgt.w	403310 <_svfprintf_r+0xe08>
  402f10:	f108 0808 	add.w	r8, r8, #8
  402f14:	a815      	add	r0, sp, #84	; 0x54
  402f16:	c80d      	ldmia	r0, {r0, r2, r3}
  402f18:	9914      	ldr	r1, [sp, #80]	; 0x50
  402f1a:	f003 fcf3 	bl	406904 <__aeabi_dcmpeq>
  402f1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402f20:	2800      	cmp	r0, #0
  402f22:	f040 8101 	bne.w	403128 <_svfprintf_r+0xc20>
  402f26:	3b01      	subs	r3, #1
  402f28:	3701      	adds	r7, #1
  402f2a:	3601      	adds	r6, #1
  402f2c:	441c      	add	r4, r3
  402f2e:	2f07      	cmp	r7, #7
  402f30:	9726      	str	r7, [sp, #152]	; 0x98
  402f32:	9427      	str	r4, [sp, #156]	; 0x9c
  402f34:	f8c8 6000 	str.w	r6, [r8]
  402f38:	f8c8 3004 	str.w	r3, [r8, #4]
  402f3c:	f300 8127 	bgt.w	40318e <_svfprintf_r+0xc86>
  402f40:	f108 0808 	add.w	r8, r8, #8
  402f44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402f46:	f8c8 2004 	str.w	r2, [r8, #4]
  402f4a:	3701      	adds	r7, #1
  402f4c:	4414      	add	r4, r2
  402f4e:	ab21      	add	r3, sp, #132	; 0x84
  402f50:	2f07      	cmp	r7, #7
  402f52:	9427      	str	r4, [sp, #156]	; 0x9c
  402f54:	9726      	str	r7, [sp, #152]	; 0x98
  402f56:	f8c8 3000 	str.w	r3, [r8]
  402f5a:	f77f acb3 	ble.w	4028c4 <_svfprintf_r+0x3bc>
  402f5e:	aa25      	add	r2, sp, #148	; 0x94
  402f60:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f62:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f64:	f002 fc3a 	bl	4057dc <__ssprint_r>
  402f68:	2800      	cmp	r0, #0
  402f6a:	f47f ab9f 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402f6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f70:	46c8      	mov	r8, r9
  402f72:	e4a9      	b.n	4028c8 <_svfprintf_r+0x3c0>
  402f74:	aa25      	add	r2, sp, #148	; 0x94
  402f76:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f78:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f7a:	f002 fc2f 	bl	4057dc <__ssprint_r>
  402f7e:	2800      	cmp	r0, #0
  402f80:	f43f aceb 	beq.w	40295a <_svfprintf_r+0x452>
  402f84:	f7ff bb92 	b.w	4026ac <_svfprintf_r+0x1a4>
  402f88:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402f8c:	2b01      	cmp	r3, #1
  402f8e:	f000 8134 	beq.w	4031fa <_svfprintf_r+0xcf2>
  402f92:	2b02      	cmp	r3, #2
  402f94:	d125      	bne.n	402fe2 <_svfprintf_r+0xada>
  402f96:	f8cd b01c 	str.w	fp, [sp, #28]
  402f9a:	2400      	movs	r4, #0
  402f9c:	2500      	movs	r5, #0
  402f9e:	e61e      	b.n	402bde <_svfprintf_r+0x6d6>
  402fa0:	aa25      	add	r2, sp, #148	; 0x94
  402fa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402fa4:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fa6:	f002 fc19 	bl	4057dc <__ssprint_r>
  402faa:	2800      	cmp	r0, #0
  402fac:	f47f ab7e 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402fb0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402fb2:	46c8      	mov	r8, r9
  402fb4:	e475      	b.n	4028a2 <_svfprintf_r+0x39a>
  402fb6:	aa25      	add	r2, sp, #148	; 0x94
  402fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402fba:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fbc:	f002 fc0e 	bl	4057dc <__ssprint_r>
  402fc0:	2800      	cmp	r0, #0
  402fc2:	f47f ab73 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402fc6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402fc8:	46c8      	mov	r8, r9
  402fca:	e41b      	b.n	402804 <_svfprintf_r+0x2fc>
  402fcc:	aa25      	add	r2, sp, #148	; 0x94
  402fce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402fd0:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fd2:	f002 fc03 	bl	4057dc <__ssprint_r>
  402fd6:	2800      	cmp	r0, #0
  402fd8:	f47f ab68 	bne.w	4026ac <_svfprintf_r+0x1a4>
  402fdc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402fde:	46c8      	mov	r8, r9
  402fe0:	e420      	b.n	402824 <_svfprintf_r+0x31c>
  402fe2:	f8cd b01c 	str.w	fp, [sp, #28]
  402fe6:	2400      	movs	r4, #0
  402fe8:	2500      	movs	r5, #0
  402fea:	4649      	mov	r1, r9
  402fec:	e000      	b.n	402ff0 <_svfprintf_r+0xae8>
  402fee:	4631      	mov	r1, r6
  402ff0:	08e2      	lsrs	r2, r4, #3
  402ff2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402ff6:	08e8      	lsrs	r0, r5, #3
  402ff8:	f004 0307 	and.w	r3, r4, #7
  402ffc:	4605      	mov	r5, r0
  402ffe:	4614      	mov	r4, r2
  403000:	3330      	adds	r3, #48	; 0x30
  403002:	ea54 0205 	orrs.w	r2, r4, r5
  403006:	f801 3c01 	strb.w	r3, [r1, #-1]
  40300a:	f101 36ff 	add.w	r6, r1, #4294967295
  40300e:	d1ee      	bne.n	402fee <_svfprintf_r+0xae6>
  403010:	9a07      	ldr	r2, [sp, #28]
  403012:	07d2      	lsls	r2, r2, #31
  403014:	f57f adf3 	bpl.w	402bfe <_svfprintf_r+0x6f6>
  403018:	2b30      	cmp	r3, #48	; 0x30
  40301a:	f43f adf0 	beq.w	402bfe <_svfprintf_r+0x6f6>
  40301e:	3902      	subs	r1, #2
  403020:	2330      	movs	r3, #48	; 0x30
  403022:	f806 3c01 	strb.w	r3, [r6, #-1]
  403026:	eba9 0301 	sub.w	r3, r9, r1
  40302a:	930e      	str	r3, [sp, #56]	; 0x38
  40302c:	460e      	mov	r6, r1
  40302e:	f7ff bb7b 	b.w	402728 <_svfprintf_r+0x220>
  403032:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403034:	2900      	cmp	r1, #0
  403036:	f340 822e 	ble.w	403496 <_svfprintf_r+0xf8e>
  40303a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40303c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40303e:	4293      	cmp	r3, r2
  403040:	bfa8      	it	ge
  403042:	4613      	movge	r3, r2
  403044:	2b00      	cmp	r3, #0
  403046:	461f      	mov	r7, r3
  403048:	dd0d      	ble.n	403066 <_svfprintf_r+0xb5e>
  40304a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40304c:	f8c8 6000 	str.w	r6, [r8]
  403050:	3301      	adds	r3, #1
  403052:	443c      	add	r4, r7
  403054:	2b07      	cmp	r3, #7
  403056:	9427      	str	r4, [sp, #156]	; 0x9c
  403058:	f8c8 7004 	str.w	r7, [r8, #4]
  40305c:	9326      	str	r3, [sp, #152]	; 0x98
  40305e:	f300 831f 	bgt.w	4036a0 <_svfprintf_r+0x1198>
  403062:	f108 0808 	add.w	r8, r8, #8
  403066:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403068:	2f00      	cmp	r7, #0
  40306a:	bfa8      	it	ge
  40306c:	1bdb      	subge	r3, r3, r7
  40306e:	2b00      	cmp	r3, #0
  403070:	461f      	mov	r7, r3
  403072:	f340 80d6 	ble.w	403222 <_svfprintf_r+0xd1a>
  403076:	2f10      	cmp	r7, #16
  403078:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40307a:	4d31      	ldr	r5, [pc, #196]	; (403140 <_svfprintf_r+0xc38>)
  40307c:	f340 81ed 	ble.w	40345a <_svfprintf_r+0xf52>
  403080:	4642      	mov	r2, r8
  403082:	4621      	mov	r1, r4
  403084:	46b0      	mov	r8, r6
  403086:	f04f 0b10 	mov.w	fp, #16
  40308a:	462e      	mov	r6, r5
  40308c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40308e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403090:	e004      	b.n	40309c <_svfprintf_r+0xb94>
  403092:	3208      	adds	r2, #8
  403094:	3f10      	subs	r7, #16
  403096:	2f10      	cmp	r7, #16
  403098:	f340 81db 	ble.w	403452 <_svfprintf_r+0xf4a>
  40309c:	3301      	adds	r3, #1
  40309e:	3110      	adds	r1, #16
  4030a0:	2b07      	cmp	r3, #7
  4030a2:	9127      	str	r1, [sp, #156]	; 0x9c
  4030a4:	9326      	str	r3, [sp, #152]	; 0x98
  4030a6:	e882 0840 	stmia.w	r2, {r6, fp}
  4030aa:	ddf2      	ble.n	403092 <_svfprintf_r+0xb8a>
  4030ac:	aa25      	add	r2, sp, #148	; 0x94
  4030ae:	4629      	mov	r1, r5
  4030b0:	4620      	mov	r0, r4
  4030b2:	f002 fb93 	bl	4057dc <__ssprint_r>
  4030b6:	2800      	cmp	r0, #0
  4030b8:	f47f aaf8 	bne.w	4026ac <_svfprintf_r+0x1a4>
  4030bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4030be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4030c0:	464a      	mov	r2, r9
  4030c2:	e7e7      	b.n	403094 <_svfprintf_r+0xb8c>
  4030c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030c6:	930e      	str	r3, [sp, #56]	; 0x38
  4030c8:	464e      	mov	r6, r9
  4030ca:	f7ff bb2d 	b.w	402728 <_svfprintf_r+0x220>
  4030ce:	2d00      	cmp	r5, #0
  4030d0:	bf08      	it	eq
  4030d2:	2c0a      	cmpeq	r4, #10
  4030d4:	f0c0 808f 	bcc.w	4031f6 <_svfprintf_r+0xcee>
  4030d8:	464e      	mov	r6, r9
  4030da:	4620      	mov	r0, r4
  4030dc:	4629      	mov	r1, r5
  4030de:	220a      	movs	r2, #10
  4030e0:	2300      	movs	r3, #0
  4030e2:	f7fe ffed 	bl	4020c0 <__aeabi_uldivmod>
  4030e6:	3230      	adds	r2, #48	; 0x30
  4030e8:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4030ec:	4620      	mov	r0, r4
  4030ee:	4629      	mov	r1, r5
  4030f0:	2300      	movs	r3, #0
  4030f2:	220a      	movs	r2, #10
  4030f4:	f7fe ffe4 	bl	4020c0 <__aeabi_uldivmod>
  4030f8:	4604      	mov	r4, r0
  4030fa:	460d      	mov	r5, r1
  4030fc:	ea54 0305 	orrs.w	r3, r4, r5
  403100:	d1eb      	bne.n	4030da <_svfprintf_r+0xbd2>
  403102:	eba9 0306 	sub.w	r3, r9, r6
  403106:	930e      	str	r3, [sp, #56]	; 0x38
  403108:	f7ff bb0e 	b.w	402728 <_svfprintf_r+0x220>
  40310c:	aa25      	add	r2, sp, #148	; 0x94
  40310e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403110:	980c      	ldr	r0, [sp, #48]	; 0x30
  403112:	f002 fb63 	bl	4057dc <__ssprint_r>
  403116:	2800      	cmp	r0, #0
  403118:	f47f aac8 	bne.w	4026ac <_svfprintf_r+0x1a4>
  40311c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403120:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403122:	46c8      	mov	r8, r9
  403124:	f7ff bb5e 	b.w	4027e4 <_svfprintf_r+0x2dc>
  403128:	1e5e      	subs	r6, r3, #1
  40312a:	2e00      	cmp	r6, #0
  40312c:	f77f af0a 	ble.w	402f44 <_svfprintf_r+0xa3c>
  403130:	2e10      	cmp	r6, #16
  403132:	4d03      	ldr	r5, [pc, #12]	; (403140 <_svfprintf_r+0xc38>)
  403134:	dd22      	ble.n	40317c <_svfprintf_r+0xc74>
  403136:	4622      	mov	r2, r4
  403138:	f04f 0b10 	mov.w	fp, #16
  40313c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40313e:	e006      	b.n	40314e <_svfprintf_r+0xc46>
  403140:	004074ac 	.word	0x004074ac
  403144:	3e10      	subs	r6, #16
  403146:	2e10      	cmp	r6, #16
  403148:	f108 0808 	add.w	r8, r8, #8
  40314c:	dd15      	ble.n	40317a <_svfprintf_r+0xc72>
  40314e:	3701      	adds	r7, #1
  403150:	3210      	adds	r2, #16
  403152:	2f07      	cmp	r7, #7
  403154:	9227      	str	r2, [sp, #156]	; 0x9c
  403156:	9726      	str	r7, [sp, #152]	; 0x98
  403158:	e888 0820 	stmia.w	r8, {r5, fp}
  40315c:	ddf2      	ble.n	403144 <_svfprintf_r+0xc3c>
  40315e:	aa25      	add	r2, sp, #148	; 0x94
  403160:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403162:	4620      	mov	r0, r4
  403164:	f002 fb3a 	bl	4057dc <__ssprint_r>
  403168:	2800      	cmp	r0, #0
  40316a:	f47f aa9f 	bne.w	4026ac <_svfprintf_r+0x1a4>
  40316e:	3e10      	subs	r6, #16
  403170:	2e10      	cmp	r6, #16
  403172:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403174:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403176:	46c8      	mov	r8, r9
  403178:	dce9      	bgt.n	40314e <_svfprintf_r+0xc46>
  40317a:	4614      	mov	r4, r2
  40317c:	3701      	adds	r7, #1
  40317e:	4434      	add	r4, r6
  403180:	2f07      	cmp	r7, #7
  403182:	9427      	str	r4, [sp, #156]	; 0x9c
  403184:	9726      	str	r7, [sp, #152]	; 0x98
  403186:	e888 0060 	stmia.w	r8, {r5, r6}
  40318a:	f77f aed9 	ble.w	402f40 <_svfprintf_r+0xa38>
  40318e:	aa25      	add	r2, sp, #148	; 0x94
  403190:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403192:	980c      	ldr	r0, [sp, #48]	; 0x30
  403194:	f002 fb22 	bl	4057dc <__ssprint_r>
  403198:	2800      	cmp	r0, #0
  40319a:	f47f aa87 	bne.w	4026ac <_svfprintf_r+0x1a4>
  40319e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4031a0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4031a2:	46c8      	mov	r8, r9
  4031a4:	e6ce      	b.n	402f44 <_svfprintf_r+0xa3c>
  4031a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4031a8:	6814      	ldr	r4, [r2, #0]
  4031aa:	4613      	mov	r3, r2
  4031ac:	3304      	adds	r3, #4
  4031ae:	17e5      	asrs	r5, r4, #31
  4031b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4031b2:	4622      	mov	r2, r4
  4031b4:	462b      	mov	r3, r5
  4031b6:	e4fa      	b.n	402bae <_svfprintf_r+0x6a6>
  4031b8:	3204      	adds	r2, #4
  4031ba:	681c      	ldr	r4, [r3, #0]
  4031bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4031be:	2301      	movs	r3, #1
  4031c0:	2500      	movs	r5, #0
  4031c2:	f7ff ba94 	b.w	4026ee <_svfprintf_r+0x1e6>
  4031c6:	681c      	ldr	r4, [r3, #0]
  4031c8:	3304      	adds	r3, #4
  4031ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4031cc:	2500      	movs	r5, #0
  4031ce:	e421      	b.n	402a14 <_svfprintf_r+0x50c>
  4031d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4031d2:	460a      	mov	r2, r1
  4031d4:	3204      	adds	r2, #4
  4031d6:	680c      	ldr	r4, [r1, #0]
  4031d8:	920f      	str	r2, [sp, #60]	; 0x3c
  4031da:	2500      	movs	r5, #0
  4031dc:	f7ff ba87 	b.w	4026ee <_svfprintf_r+0x1e6>
  4031e0:	4614      	mov	r4, r2
  4031e2:	3301      	adds	r3, #1
  4031e4:	4434      	add	r4, r6
  4031e6:	2b07      	cmp	r3, #7
  4031e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4031ea:	9326      	str	r3, [sp, #152]	; 0x98
  4031ec:	e888 0060 	stmia.w	r8, {r5, r6}
  4031f0:	f77f ab68 	ble.w	4028c4 <_svfprintf_r+0x3bc>
  4031f4:	e6b3      	b.n	402f5e <_svfprintf_r+0xa56>
  4031f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4031fa:	f8cd b01c 	str.w	fp, [sp, #28]
  4031fe:	ae42      	add	r6, sp, #264	; 0x108
  403200:	3430      	adds	r4, #48	; 0x30
  403202:	2301      	movs	r3, #1
  403204:	f806 4d41 	strb.w	r4, [r6, #-65]!
  403208:	930e      	str	r3, [sp, #56]	; 0x38
  40320a:	f7ff ba8d 	b.w	402728 <_svfprintf_r+0x220>
  40320e:	aa25      	add	r2, sp, #148	; 0x94
  403210:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403212:	980c      	ldr	r0, [sp, #48]	; 0x30
  403214:	f002 fae2 	bl	4057dc <__ssprint_r>
  403218:	2800      	cmp	r0, #0
  40321a:	f47f aa47 	bne.w	4026ac <_svfprintf_r+0x1a4>
  40321e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403220:	46c8      	mov	r8, r9
  403222:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403226:	429a      	cmp	r2, r3
  403228:	db44      	blt.n	4032b4 <_svfprintf_r+0xdac>
  40322a:	9b07      	ldr	r3, [sp, #28]
  40322c:	07d9      	lsls	r1, r3, #31
  40322e:	d441      	bmi.n	4032b4 <_svfprintf_r+0xdac>
  403230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403232:	9812      	ldr	r0, [sp, #72]	; 0x48
  403234:	1a9a      	subs	r2, r3, r2
  403236:	1a1d      	subs	r5, r3, r0
  403238:	4295      	cmp	r5, r2
  40323a:	bfa8      	it	ge
  40323c:	4615      	movge	r5, r2
  40323e:	2d00      	cmp	r5, #0
  403240:	dd0e      	ble.n	403260 <_svfprintf_r+0xd58>
  403242:	9926      	ldr	r1, [sp, #152]	; 0x98
  403244:	f8c8 5004 	str.w	r5, [r8, #4]
  403248:	3101      	adds	r1, #1
  40324a:	4406      	add	r6, r0
  40324c:	442c      	add	r4, r5
  40324e:	2907      	cmp	r1, #7
  403250:	f8c8 6000 	str.w	r6, [r8]
  403254:	9427      	str	r4, [sp, #156]	; 0x9c
  403256:	9126      	str	r1, [sp, #152]	; 0x98
  403258:	f300 823b 	bgt.w	4036d2 <_svfprintf_r+0x11ca>
  40325c:	f108 0808 	add.w	r8, r8, #8
  403260:	2d00      	cmp	r5, #0
  403262:	bfac      	ite	ge
  403264:	1b56      	subge	r6, r2, r5
  403266:	4616      	movlt	r6, r2
  403268:	2e00      	cmp	r6, #0
  40326a:	f77f ab2d 	ble.w	4028c8 <_svfprintf_r+0x3c0>
  40326e:	2e10      	cmp	r6, #16
  403270:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403272:	4db0      	ldr	r5, [pc, #704]	; (403534 <_svfprintf_r+0x102c>)
  403274:	ddb5      	ble.n	4031e2 <_svfprintf_r+0xcda>
  403276:	4622      	mov	r2, r4
  403278:	2710      	movs	r7, #16
  40327a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40327e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403280:	e004      	b.n	40328c <_svfprintf_r+0xd84>
  403282:	f108 0808 	add.w	r8, r8, #8
  403286:	3e10      	subs	r6, #16
  403288:	2e10      	cmp	r6, #16
  40328a:	dda9      	ble.n	4031e0 <_svfprintf_r+0xcd8>
  40328c:	3301      	adds	r3, #1
  40328e:	3210      	adds	r2, #16
  403290:	2b07      	cmp	r3, #7
  403292:	9227      	str	r2, [sp, #156]	; 0x9c
  403294:	9326      	str	r3, [sp, #152]	; 0x98
  403296:	e888 00a0 	stmia.w	r8, {r5, r7}
  40329a:	ddf2      	ble.n	403282 <_svfprintf_r+0xd7a>
  40329c:	aa25      	add	r2, sp, #148	; 0x94
  40329e:	4621      	mov	r1, r4
  4032a0:	4658      	mov	r0, fp
  4032a2:	f002 fa9b 	bl	4057dc <__ssprint_r>
  4032a6:	2800      	cmp	r0, #0
  4032a8:	f47f aa00 	bne.w	4026ac <_svfprintf_r+0x1a4>
  4032ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4032ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4032b0:	46c8      	mov	r8, r9
  4032b2:	e7e8      	b.n	403286 <_svfprintf_r+0xd7e>
  4032b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4032b6:	9819      	ldr	r0, [sp, #100]	; 0x64
  4032b8:	991a      	ldr	r1, [sp, #104]	; 0x68
  4032ba:	f8c8 1000 	str.w	r1, [r8]
  4032be:	3301      	adds	r3, #1
  4032c0:	4404      	add	r4, r0
  4032c2:	2b07      	cmp	r3, #7
  4032c4:	9427      	str	r4, [sp, #156]	; 0x9c
  4032c6:	f8c8 0004 	str.w	r0, [r8, #4]
  4032ca:	9326      	str	r3, [sp, #152]	; 0x98
  4032cc:	f300 81f5 	bgt.w	4036ba <_svfprintf_r+0x11b2>
  4032d0:	f108 0808 	add.w	r8, r8, #8
  4032d4:	e7ac      	b.n	403230 <_svfprintf_r+0xd28>
  4032d6:	9b07      	ldr	r3, [sp, #28]
  4032d8:	07da      	lsls	r2, r3, #31
  4032da:	f53f adfe 	bmi.w	402eda <_svfprintf_r+0x9d2>
  4032de:	3701      	adds	r7, #1
  4032e0:	3401      	adds	r4, #1
  4032e2:	2301      	movs	r3, #1
  4032e4:	2f07      	cmp	r7, #7
  4032e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4032e8:	9726      	str	r7, [sp, #152]	; 0x98
  4032ea:	f8c8 6000 	str.w	r6, [r8]
  4032ee:	f8c8 3004 	str.w	r3, [r8, #4]
  4032f2:	f77f ae25 	ble.w	402f40 <_svfprintf_r+0xa38>
  4032f6:	e74a      	b.n	40318e <_svfprintf_r+0xc86>
  4032f8:	aa25      	add	r2, sp, #148	; 0x94
  4032fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032fc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032fe:	f002 fa6d 	bl	4057dc <__ssprint_r>
  403302:	2800      	cmp	r0, #0
  403304:	f47f a9d2 	bne.w	4026ac <_svfprintf_r+0x1a4>
  403308:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40330a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40330c:	46c8      	mov	r8, r9
  40330e:	e5f2      	b.n	402ef6 <_svfprintf_r+0x9ee>
  403310:	aa25      	add	r2, sp, #148	; 0x94
  403312:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403314:	980c      	ldr	r0, [sp, #48]	; 0x30
  403316:	f002 fa61 	bl	4057dc <__ssprint_r>
  40331a:	2800      	cmp	r0, #0
  40331c:	f47f a9c6 	bne.w	4026ac <_svfprintf_r+0x1a4>
  403320:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403322:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403324:	46c8      	mov	r8, r9
  403326:	e5f5      	b.n	402f14 <_svfprintf_r+0xa0c>
  403328:	464e      	mov	r6, r9
  40332a:	f7ff b9fd 	b.w	402728 <_svfprintf_r+0x220>
  40332e:	aa25      	add	r2, sp, #148	; 0x94
  403330:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403332:	980c      	ldr	r0, [sp, #48]	; 0x30
  403334:	f002 fa52 	bl	4057dc <__ssprint_r>
  403338:	2800      	cmp	r0, #0
  40333a:	f47f a9b7 	bne.w	4026ac <_svfprintf_r+0x1a4>
  40333e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403340:	46c8      	mov	r8, r9
  403342:	f7ff ba72 	b.w	40282a <_svfprintf_r+0x322>
  403346:	9c15      	ldr	r4, [sp, #84]	; 0x54
  403348:	4622      	mov	r2, r4
  40334a:	4620      	mov	r0, r4
  40334c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40334e:	4623      	mov	r3, r4
  403350:	4621      	mov	r1, r4
  403352:	f003 fb09 	bl	406968 <__aeabi_dcmpun>
  403356:	2800      	cmp	r0, #0
  403358:	f040 8286 	bne.w	403868 <_svfprintf_r+0x1360>
  40335c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40335e:	3301      	adds	r3, #1
  403360:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403362:	f023 0320 	bic.w	r3, r3, #32
  403366:	930e      	str	r3, [sp, #56]	; 0x38
  403368:	f000 81e2 	beq.w	403730 <_svfprintf_r+0x1228>
  40336c:	2b47      	cmp	r3, #71	; 0x47
  40336e:	f000 811e 	beq.w	4035ae <_svfprintf_r+0x10a6>
  403372:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  403376:	9307      	str	r3, [sp, #28]
  403378:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40337a:	1e1f      	subs	r7, r3, #0
  40337c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40337e:	9308      	str	r3, [sp, #32]
  403380:	bfbb      	ittet	lt
  403382:	463b      	movlt	r3, r7
  403384:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  403388:	2300      	movge	r3, #0
  40338a:	232d      	movlt	r3, #45	; 0x2d
  40338c:	9310      	str	r3, [sp, #64]	; 0x40
  40338e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403390:	2b66      	cmp	r3, #102	; 0x66
  403392:	f000 81bb 	beq.w	40370c <_svfprintf_r+0x1204>
  403396:	2b46      	cmp	r3, #70	; 0x46
  403398:	f000 80df 	beq.w	40355a <_svfprintf_r+0x1052>
  40339c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40339e:	9a08      	ldr	r2, [sp, #32]
  4033a0:	2b45      	cmp	r3, #69	; 0x45
  4033a2:	bf0c      	ite	eq
  4033a4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4033a6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4033a8:	a823      	add	r0, sp, #140	; 0x8c
  4033aa:	a920      	add	r1, sp, #128	; 0x80
  4033ac:	bf08      	it	eq
  4033ae:	1c5d      	addeq	r5, r3, #1
  4033b0:	9004      	str	r0, [sp, #16]
  4033b2:	9103      	str	r1, [sp, #12]
  4033b4:	a81f      	add	r0, sp, #124	; 0x7c
  4033b6:	2102      	movs	r1, #2
  4033b8:	463b      	mov	r3, r7
  4033ba:	9002      	str	r0, [sp, #8]
  4033bc:	9501      	str	r5, [sp, #4]
  4033be:	9100      	str	r1, [sp, #0]
  4033c0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4033c2:	f000 fb75 	bl	403ab0 <_dtoa_r>
  4033c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4033c8:	2b67      	cmp	r3, #103	; 0x67
  4033ca:	4606      	mov	r6, r0
  4033cc:	f040 81e0 	bne.w	403790 <_svfprintf_r+0x1288>
  4033d0:	f01b 0f01 	tst.w	fp, #1
  4033d4:	f000 8246 	beq.w	403864 <_svfprintf_r+0x135c>
  4033d8:	1974      	adds	r4, r6, r5
  4033da:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4033dc:	9808      	ldr	r0, [sp, #32]
  4033de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4033e0:	4639      	mov	r1, r7
  4033e2:	f003 fa8f 	bl	406904 <__aeabi_dcmpeq>
  4033e6:	2800      	cmp	r0, #0
  4033e8:	f040 8165 	bne.w	4036b6 <_svfprintf_r+0x11ae>
  4033ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4033ee:	42a3      	cmp	r3, r4
  4033f0:	d206      	bcs.n	403400 <_svfprintf_r+0xef8>
  4033f2:	2130      	movs	r1, #48	; 0x30
  4033f4:	1c5a      	adds	r2, r3, #1
  4033f6:	9223      	str	r2, [sp, #140]	; 0x8c
  4033f8:	7019      	strb	r1, [r3, #0]
  4033fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4033fc:	429c      	cmp	r4, r3
  4033fe:	d8f9      	bhi.n	4033f4 <_svfprintf_r+0xeec>
  403400:	1b9b      	subs	r3, r3, r6
  403402:	9313      	str	r3, [sp, #76]	; 0x4c
  403404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403406:	2b47      	cmp	r3, #71	; 0x47
  403408:	f000 80e9 	beq.w	4035de <_svfprintf_r+0x10d6>
  40340c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40340e:	2b65      	cmp	r3, #101	; 0x65
  403410:	f340 81cd 	ble.w	4037ae <_svfprintf_r+0x12a6>
  403414:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403416:	2b66      	cmp	r3, #102	; 0x66
  403418:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40341a:	9312      	str	r3, [sp, #72]	; 0x48
  40341c:	f000 819e 	beq.w	40375c <_svfprintf_r+0x1254>
  403420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403422:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403424:	4619      	mov	r1, r3
  403426:	4291      	cmp	r1, r2
  403428:	f300 818a 	bgt.w	403740 <_svfprintf_r+0x1238>
  40342c:	f01b 0f01 	tst.w	fp, #1
  403430:	f040 8213 	bne.w	40385a <_svfprintf_r+0x1352>
  403434:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403438:	9308      	str	r3, [sp, #32]
  40343a:	2367      	movs	r3, #103	; 0x67
  40343c:	920e      	str	r2, [sp, #56]	; 0x38
  40343e:	9311      	str	r3, [sp, #68]	; 0x44
  403440:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403442:	2b00      	cmp	r3, #0
  403444:	f040 80c4 	bne.w	4035d0 <_svfprintf_r+0x10c8>
  403448:	930a      	str	r3, [sp, #40]	; 0x28
  40344a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40344e:	f7ff b973 	b.w	402738 <_svfprintf_r+0x230>
  403452:	4635      	mov	r5, r6
  403454:	460c      	mov	r4, r1
  403456:	4646      	mov	r6, r8
  403458:	4690      	mov	r8, r2
  40345a:	3301      	adds	r3, #1
  40345c:	443c      	add	r4, r7
  40345e:	2b07      	cmp	r3, #7
  403460:	9427      	str	r4, [sp, #156]	; 0x9c
  403462:	9326      	str	r3, [sp, #152]	; 0x98
  403464:	e888 00a0 	stmia.w	r8, {r5, r7}
  403468:	f73f aed1 	bgt.w	40320e <_svfprintf_r+0xd06>
  40346c:	f108 0808 	add.w	r8, r8, #8
  403470:	e6d7      	b.n	403222 <_svfprintf_r+0xd1a>
  403472:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403474:	6813      	ldr	r3, [r2, #0]
  403476:	3204      	adds	r2, #4
  403478:	920f      	str	r2, [sp, #60]	; 0x3c
  40347a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40347c:	601a      	str	r2, [r3, #0]
  40347e:	f7ff b86a 	b.w	402556 <_svfprintf_r+0x4e>
  403482:	aa25      	add	r2, sp, #148	; 0x94
  403484:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403486:	980c      	ldr	r0, [sp, #48]	; 0x30
  403488:	f002 f9a8 	bl	4057dc <__ssprint_r>
  40348c:	2800      	cmp	r0, #0
  40348e:	f47f a90d 	bne.w	4026ac <_svfprintf_r+0x1a4>
  403492:	46c8      	mov	r8, r9
  403494:	e48d      	b.n	402db2 <_svfprintf_r+0x8aa>
  403496:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403498:	4a27      	ldr	r2, [pc, #156]	; (403538 <_svfprintf_r+0x1030>)
  40349a:	f8c8 2000 	str.w	r2, [r8]
  40349e:	3301      	adds	r3, #1
  4034a0:	3401      	adds	r4, #1
  4034a2:	2201      	movs	r2, #1
  4034a4:	2b07      	cmp	r3, #7
  4034a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4034a8:	9326      	str	r3, [sp, #152]	; 0x98
  4034aa:	f8c8 2004 	str.w	r2, [r8, #4]
  4034ae:	dc72      	bgt.n	403596 <_svfprintf_r+0x108e>
  4034b0:	f108 0808 	add.w	r8, r8, #8
  4034b4:	b929      	cbnz	r1, 4034c2 <_svfprintf_r+0xfba>
  4034b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4034b8:	b91b      	cbnz	r3, 4034c2 <_svfprintf_r+0xfba>
  4034ba:	9b07      	ldr	r3, [sp, #28]
  4034bc:	07d8      	lsls	r0, r3, #31
  4034be:	f57f aa03 	bpl.w	4028c8 <_svfprintf_r+0x3c0>
  4034c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4034c4:	9819      	ldr	r0, [sp, #100]	; 0x64
  4034c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4034c8:	f8c8 2000 	str.w	r2, [r8]
  4034cc:	3301      	adds	r3, #1
  4034ce:	4602      	mov	r2, r0
  4034d0:	4422      	add	r2, r4
  4034d2:	2b07      	cmp	r3, #7
  4034d4:	9227      	str	r2, [sp, #156]	; 0x9c
  4034d6:	f8c8 0004 	str.w	r0, [r8, #4]
  4034da:	9326      	str	r3, [sp, #152]	; 0x98
  4034dc:	f300 818d 	bgt.w	4037fa <_svfprintf_r+0x12f2>
  4034e0:	f108 0808 	add.w	r8, r8, #8
  4034e4:	2900      	cmp	r1, #0
  4034e6:	f2c0 8165 	blt.w	4037b4 <_svfprintf_r+0x12ac>
  4034ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4034ec:	f8c8 6000 	str.w	r6, [r8]
  4034f0:	3301      	adds	r3, #1
  4034f2:	188c      	adds	r4, r1, r2
  4034f4:	2b07      	cmp	r3, #7
  4034f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4034f8:	9326      	str	r3, [sp, #152]	; 0x98
  4034fa:	f8c8 1004 	str.w	r1, [r8, #4]
  4034fe:	f77f a9e1 	ble.w	4028c4 <_svfprintf_r+0x3bc>
  403502:	e52c      	b.n	402f5e <_svfprintf_r+0xa56>
  403504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403506:	9909      	ldr	r1, [sp, #36]	; 0x24
  403508:	6813      	ldr	r3, [r2, #0]
  40350a:	17cd      	asrs	r5, r1, #31
  40350c:	4608      	mov	r0, r1
  40350e:	3204      	adds	r2, #4
  403510:	4629      	mov	r1, r5
  403512:	920f      	str	r2, [sp, #60]	; 0x3c
  403514:	e9c3 0100 	strd	r0, r1, [r3]
  403518:	f7ff b81d 	b.w	402556 <_svfprintf_r+0x4e>
  40351c:	aa25      	add	r2, sp, #148	; 0x94
  40351e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403520:	980c      	ldr	r0, [sp, #48]	; 0x30
  403522:	f002 f95b 	bl	4057dc <__ssprint_r>
  403526:	2800      	cmp	r0, #0
  403528:	f47f a8c0 	bne.w	4026ac <_svfprintf_r+0x1a4>
  40352c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40352e:	46c8      	mov	r8, r9
  403530:	e458      	b.n	402de4 <_svfprintf_r+0x8dc>
  403532:	bf00      	nop
  403534:	004074ac 	.word	0x004074ac
  403538:	00407498 	.word	0x00407498
  40353c:	2140      	movs	r1, #64	; 0x40
  40353e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403540:	f001 fa0c 	bl	40495c <_malloc_r>
  403544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403546:	6010      	str	r0, [r2, #0]
  403548:	6110      	str	r0, [r2, #16]
  40354a:	2800      	cmp	r0, #0
  40354c:	f000 81f2 	beq.w	403934 <_svfprintf_r+0x142c>
  403550:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403552:	2340      	movs	r3, #64	; 0x40
  403554:	6153      	str	r3, [r2, #20]
  403556:	f7fe bfee 	b.w	402536 <_svfprintf_r+0x2e>
  40355a:	a823      	add	r0, sp, #140	; 0x8c
  40355c:	a920      	add	r1, sp, #128	; 0x80
  40355e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403560:	9004      	str	r0, [sp, #16]
  403562:	9103      	str	r1, [sp, #12]
  403564:	a81f      	add	r0, sp, #124	; 0x7c
  403566:	2103      	movs	r1, #3
  403568:	9002      	str	r0, [sp, #8]
  40356a:	9a08      	ldr	r2, [sp, #32]
  40356c:	9401      	str	r4, [sp, #4]
  40356e:	463b      	mov	r3, r7
  403570:	9100      	str	r1, [sp, #0]
  403572:	980c      	ldr	r0, [sp, #48]	; 0x30
  403574:	f000 fa9c 	bl	403ab0 <_dtoa_r>
  403578:	4625      	mov	r5, r4
  40357a:	4606      	mov	r6, r0
  40357c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40357e:	2b46      	cmp	r3, #70	; 0x46
  403580:	eb06 0405 	add.w	r4, r6, r5
  403584:	f47f af29 	bne.w	4033da <_svfprintf_r+0xed2>
  403588:	7833      	ldrb	r3, [r6, #0]
  40358a:	2b30      	cmp	r3, #48	; 0x30
  40358c:	f000 8178 	beq.w	403880 <_svfprintf_r+0x1378>
  403590:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  403592:	442c      	add	r4, r5
  403594:	e721      	b.n	4033da <_svfprintf_r+0xed2>
  403596:	aa25      	add	r2, sp, #148	; 0x94
  403598:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40359a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40359c:	f002 f91e 	bl	4057dc <__ssprint_r>
  4035a0:	2800      	cmp	r0, #0
  4035a2:	f47f a883 	bne.w	4026ac <_svfprintf_r+0x1a4>
  4035a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4035a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4035aa:	46c8      	mov	r8, r9
  4035ac:	e782      	b.n	4034b4 <_svfprintf_r+0xfac>
  4035ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4035b0:	2b00      	cmp	r3, #0
  4035b2:	bf08      	it	eq
  4035b4:	2301      	moveq	r3, #1
  4035b6:	930a      	str	r3, [sp, #40]	; 0x28
  4035b8:	e6db      	b.n	403372 <_svfprintf_r+0xe6a>
  4035ba:	4630      	mov	r0, r6
  4035bc:	940a      	str	r4, [sp, #40]	; 0x28
  4035be:	f002 f89f 	bl	405700 <strlen>
  4035c2:	950f      	str	r5, [sp, #60]	; 0x3c
  4035c4:	900e      	str	r0, [sp, #56]	; 0x38
  4035c6:	f8cd b01c 	str.w	fp, [sp, #28]
  4035ca:	4603      	mov	r3, r0
  4035cc:	f7ff b9f9 	b.w	4029c2 <_svfprintf_r+0x4ba>
  4035d0:	272d      	movs	r7, #45	; 0x2d
  4035d2:	2300      	movs	r3, #0
  4035d4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4035d8:	930a      	str	r3, [sp, #40]	; 0x28
  4035da:	f7ff b8ae 	b.w	40273a <_svfprintf_r+0x232>
  4035de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4035e0:	9312      	str	r3, [sp, #72]	; 0x48
  4035e2:	461a      	mov	r2, r3
  4035e4:	3303      	adds	r3, #3
  4035e6:	db04      	blt.n	4035f2 <_svfprintf_r+0x10ea>
  4035e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4035ea:	4619      	mov	r1, r3
  4035ec:	4291      	cmp	r1, r2
  4035ee:	f6bf af17 	bge.w	403420 <_svfprintf_r+0xf18>
  4035f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4035f4:	3b02      	subs	r3, #2
  4035f6:	9311      	str	r3, [sp, #68]	; 0x44
  4035f8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4035fc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  403600:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403602:	3b01      	subs	r3, #1
  403604:	2b00      	cmp	r3, #0
  403606:	931f      	str	r3, [sp, #124]	; 0x7c
  403608:	bfbd      	ittte	lt
  40360a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40360c:	f1c3 0301 	rsblt	r3, r3, #1
  403610:	222d      	movlt	r2, #45	; 0x2d
  403612:	222b      	movge	r2, #43	; 0x2b
  403614:	2b09      	cmp	r3, #9
  403616:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40361a:	f340 8116 	ble.w	40384a <_svfprintf_r+0x1342>
  40361e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  403622:	4620      	mov	r0, r4
  403624:	4dab      	ldr	r5, [pc, #684]	; (4038d4 <_svfprintf_r+0x13cc>)
  403626:	e000      	b.n	40362a <_svfprintf_r+0x1122>
  403628:	4610      	mov	r0, r2
  40362a:	fb85 1203 	smull	r1, r2, r5, r3
  40362e:	17d9      	asrs	r1, r3, #31
  403630:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403634:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403638:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40363c:	3230      	adds	r2, #48	; 0x30
  40363e:	2909      	cmp	r1, #9
  403640:	f800 2c01 	strb.w	r2, [r0, #-1]
  403644:	460b      	mov	r3, r1
  403646:	f100 32ff 	add.w	r2, r0, #4294967295
  40364a:	dced      	bgt.n	403628 <_svfprintf_r+0x1120>
  40364c:	3330      	adds	r3, #48	; 0x30
  40364e:	3802      	subs	r0, #2
  403650:	b2d9      	uxtb	r1, r3
  403652:	4284      	cmp	r4, r0
  403654:	f802 1c01 	strb.w	r1, [r2, #-1]
  403658:	f240 8165 	bls.w	403926 <_svfprintf_r+0x141e>
  40365c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  403660:	4613      	mov	r3, r2
  403662:	e001      	b.n	403668 <_svfprintf_r+0x1160>
  403664:	f813 1b01 	ldrb.w	r1, [r3], #1
  403668:	f800 1b01 	strb.w	r1, [r0], #1
  40366c:	42a3      	cmp	r3, r4
  40366e:	d1f9      	bne.n	403664 <_svfprintf_r+0x115c>
  403670:	3301      	adds	r3, #1
  403672:	1a9b      	subs	r3, r3, r2
  403674:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  403678:	4413      	add	r3, r2
  40367a:	aa21      	add	r2, sp, #132	; 0x84
  40367c:	1a9b      	subs	r3, r3, r2
  40367e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403680:	931b      	str	r3, [sp, #108]	; 0x6c
  403682:	2a01      	cmp	r2, #1
  403684:	4413      	add	r3, r2
  403686:	930e      	str	r3, [sp, #56]	; 0x38
  403688:	f340 8119 	ble.w	4038be <_svfprintf_r+0x13b6>
  40368c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40368e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403690:	4413      	add	r3, r2
  403692:	930e      	str	r3, [sp, #56]	; 0x38
  403694:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403698:	9308      	str	r3, [sp, #32]
  40369a:	2300      	movs	r3, #0
  40369c:	9312      	str	r3, [sp, #72]	; 0x48
  40369e:	e6cf      	b.n	403440 <_svfprintf_r+0xf38>
  4036a0:	aa25      	add	r2, sp, #148	; 0x94
  4036a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4036a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4036a6:	f002 f899 	bl	4057dc <__ssprint_r>
  4036aa:	2800      	cmp	r0, #0
  4036ac:	f47e affe 	bne.w	4026ac <_svfprintf_r+0x1a4>
  4036b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4036b2:	46c8      	mov	r8, r9
  4036b4:	e4d7      	b.n	403066 <_svfprintf_r+0xb5e>
  4036b6:	4623      	mov	r3, r4
  4036b8:	e6a2      	b.n	403400 <_svfprintf_r+0xef8>
  4036ba:	aa25      	add	r2, sp, #148	; 0x94
  4036bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4036be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4036c0:	f002 f88c 	bl	4057dc <__ssprint_r>
  4036c4:	2800      	cmp	r0, #0
  4036c6:	f47e aff1 	bne.w	4026ac <_svfprintf_r+0x1a4>
  4036ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4036cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4036ce:	46c8      	mov	r8, r9
  4036d0:	e5ae      	b.n	403230 <_svfprintf_r+0xd28>
  4036d2:	aa25      	add	r2, sp, #148	; 0x94
  4036d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4036d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4036d8:	f002 f880 	bl	4057dc <__ssprint_r>
  4036dc:	2800      	cmp	r0, #0
  4036de:	f47e afe5 	bne.w	4026ac <_svfprintf_r+0x1a4>
  4036e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4036e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4036e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4036e8:	1a9a      	subs	r2, r3, r2
  4036ea:	46c8      	mov	r8, r9
  4036ec:	e5b8      	b.n	403260 <_svfprintf_r+0xd58>
  4036ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036f0:	9612      	str	r6, [sp, #72]	; 0x48
  4036f2:	2b06      	cmp	r3, #6
  4036f4:	bf28      	it	cs
  4036f6:	2306      	movcs	r3, #6
  4036f8:	960a      	str	r6, [sp, #40]	; 0x28
  4036fa:	4637      	mov	r7, r6
  4036fc:	9308      	str	r3, [sp, #32]
  4036fe:	950f      	str	r5, [sp, #60]	; 0x3c
  403700:	f8cd b01c 	str.w	fp, [sp, #28]
  403704:	930e      	str	r3, [sp, #56]	; 0x38
  403706:	4e74      	ldr	r6, [pc, #464]	; (4038d8 <_svfprintf_r+0x13d0>)
  403708:	f7ff b816 	b.w	402738 <_svfprintf_r+0x230>
  40370c:	a823      	add	r0, sp, #140	; 0x8c
  40370e:	a920      	add	r1, sp, #128	; 0x80
  403710:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403712:	9004      	str	r0, [sp, #16]
  403714:	9103      	str	r1, [sp, #12]
  403716:	a81f      	add	r0, sp, #124	; 0x7c
  403718:	2103      	movs	r1, #3
  40371a:	9002      	str	r0, [sp, #8]
  40371c:	9a08      	ldr	r2, [sp, #32]
  40371e:	9501      	str	r5, [sp, #4]
  403720:	463b      	mov	r3, r7
  403722:	9100      	str	r1, [sp, #0]
  403724:	980c      	ldr	r0, [sp, #48]	; 0x30
  403726:	f000 f9c3 	bl	403ab0 <_dtoa_r>
  40372a:	4606      	mov	r6, r0
  40372c:	1944      	adds	r4, r0, r5
  40372e:	e72b      	b.n	403588 <_svfprintf_r+0x1080>
  403730:	2306      	movs	r3, #6
  403732:	930a      	str	r3, [sp, #40]	; 0x28
  403734:	e61d      	b.n	403372 <_svfprintf_r+0xe6a>
  403736:	272d      	movs	r7, #45	; 0x2d
  403738:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40373c:	f7ff bacd 	b.w	402cda <_svfprintf_r+0x7d2>
  403740:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403742:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403744:	4413      	add	r3, r2
  403746:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403748:	930e      	str	r3, [sp, #56]	; 0x38
  40374a:	2a00      	cmp	r2, #0
  40374c:	f340 80b0 	ble.w	4038b0 <_svfprintf_r+0x13a8>
  403750:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403754:	9308      	str	r3, [sp, #32]
  403756:	2367      	movs	r3, #103	; 0x67
  403758:	9311      	str	r3, [sp, #68]	; 0x44
  40375a:	e671      	b.n	403440 <_svfprintf_r+0xf38>
  40375c:	2b00      	cmp	r3, #0
  40375e:	f340 80c3 	ble.w	4038e8 <_svfprintf_r+0x13e0>
  403762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403764:	2a00      	cmp	r2, #0
  403766:	f040 8099 	bne.w	40389c <_svfprintf_r+0x1394>
  40376a:	f01b 0f01 	tst.w	fp, #1
  40376e:	f040 8095 	bne.w	40389c <_svfprintf_r+0x1394>
  403772:	9308      	str	r3, [sp, #32]
  403774:	930e      	str	r3, [sp, #56]	; 0x38
  403776:	e663      	b.n	403440 <_svfprintf_r+0xf38>
  403778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40377a:	9308      	str	r3, [sp, #32]
  40377c:	930e      	str	r3, [sp, #56]	; 0x38
  40377e:	900a      	str	r0, [sp, #40]	; 0x28
  403780:	950f      	str	r5, [sp, #60]	; 0x3c
  403782:	f8cd b01c 	str.w	fp, [sp, #28]
  403786:	9012      	str	r0, [sp, #72]	; 0x48
  403788:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40378c:	f7fe bfd4 	b.w	402738 <_svfprintf_r+0x230>
  403790:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403792:	2b47      	cmp	r3, #71	; 0x47
  403794:	f47f ae20 	bne.w	4033d8 <_svfprintf_r+0xed0>
  403798:	f01b 0f01 	tst.w	fp, #1
  40379c:	f47f aeee 	bne.w	40357c <_svfprintf_r+0x1074>
  4037a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4037a2:	1b9b      	subs	r3, r3, r6
  4037a4:	9313      	str	r3, [sp, #76]	; 0x4c
  4037a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4037a8:	2b47      	cmp	r3, #71	; 0x47
  4037aa:	f43f af18 	beq.w	4035de <_svfprintf_r+0x10d6>
  4037ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4037b0:	9312      	str	r3, [sp, #72]	; 0x48
  4037b2:	e721      	b.n	4035f8 <_svfprintf_r+0x10f0>
  4037b4:	424f      	negs	r7, r1
  4037b6:	3110      	adds	r1, #16
  4037b8:	4d48      	ldr	r5, [pc, #288]	; (4038dc <_svfprintf_r+0x13d4>)
  4037ba:	da2f      	bge.n	40381c <_svfprintf_r+0x1314>
  4037bc:	2410      	movs	r4, #16
  4037be:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4037c2:	e004      	b.n	4037ce <_svfprintf_r+0x12c6>
  4037c4:	f108 0808 	add.w	r8, r8, #8
  4037c8:	3f10      	subs	r7, #16
  4037ca:	2f10      	cmp	r7, #16
  4037cc:	dd26      	ble.n	40381c <_svfprintf_r+0x1314>
  4037ce:	3301      	adds	r3, #1
  4037d0:	3210      	adds	r2, #16
  4037d2:	2b07      	cmp	r3, #7
  4037d4:	9227      	str	r2, [sp, #156]	; 0x9c
  4037d6:	9326      	str	r3, [sp, #152]	; 0x98
  4037d8:	f8c8 5000 	str.w	r5, [r8]
  4037dc:	f8c8 4004 	str.w	r4, [r8, #4]
  4037e0:	ddf0      	ble.n	4037c4 <_svfprintf_r+0x12bc>
  4037e2:	aa25      	add	r2, sp, #148	; 0x94
  4037e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037e6:	4658      	mov	r0, fp
  4037e8:	f001 fff8 	bl	4057dc <__ssprint_r>
  4037ec:	2800      	cmp	r0, #0
  4037ee:	f47e af5d 	bne.w	4026ac <_svfprintf_r+0x1a4>
  4037f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4037f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4037f6:	46c8      	mov	r8, r9
  4037f8:	e7e6      	b.n	4037c8 <_svfprintf_r+0x12c0>
  4037fa:	aa25      	add	r2, sp, #148	; 0x94
  4037fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037fe:	980c      	ldr	r0, [sp, #48]	; 0x30
  403800:	f001 ffec 	bl	4057dc <__ssprint_r>
  403804:	2800      	cmp	r0, #0
  403806:	f47e af51 	bne.w	4026ac <_svfprintf_r+0x1a4>
  40380a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40380c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40380e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403810:	46c8      	mov	r8, r9
  403812:	e667      	b.n	4034e4 <_svfprintf_r+0xfdc>
  403814:	2000      	movs	r0, #0
  403816:	900a      	str	r0, [sp, #40]	; 0x28
  403818:	f7fe bed0 	b.w	4025bc <_svfprintf_r+0xb4>
  40381c:	3301      	adds	r3, #1
  40381e:	443a      	add	r2, r7
  403820:	2b07      	cmp	r3, #7
  403822:	e888 00a0 	stmia.w	r8, {r5, r7}
  403826:	9227      	str	r2, [sp, #156]	; 0x9c
  403828:	9326      	str	r3, [sp, #152]	; 0x98
  40382a:	f108 0808 	add.w	r8, r8, #8
  40382e:	f77f ae5c 	ble.w	4034ea <_svfprintf_r+0xfe2>
  403832:	aa25      	add	r2, sp, #148	; 0x94
  403834:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403836:	980c      	ldr	r0, [sp, #48]	; 0x30
  403838:	f001 ffd0 	bl	4057dc <__ssprint_r>
  40383c:	2800      	cmp	r0, #0
  40383e:	f47e af35 	bne.w	4026ac <_svfprintf_r+0x1a4>
  403842:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403844:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403846:	46c8      	mov	r8, r9
  403848:	e64f      	b.n	4034ea <_svfprintf_r+0xfe2>
  40384a:	3330      	adds	r3, #48	; 0x30
  40384c:	2230      	movs	r2, #48	; 0x30
  40384e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  403852:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403856:	ab22      	add	r3, sp, #136	; 0x88
  403858:	e70f      	b.n	40367a <_svfprintf_r+0x1172>
  40385a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40385c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40385e:	4413      	add	r3, r2
  403860:	930e      	str	r3, [sp, #56]	; 0x38
  403862:	e775      	b.n	403750 <_svfprintf_r+0x1248>
  403864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403866:	e5cb      	b.n	403400 <_svfprintf_r+0xef8>
  403868:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40386a:	4e1d      	ldr	r6, [pc, #116]	; (4038e0 <_svfprintf_r+0x13d8>)
  40386c:	2b00      	cmp	r3, #0
  40386e:	bfb6      	itet	lt
  403870:	272d      	movlt	r7, #45	; 0x2d
  403872:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  403876:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40387a:	4b1a      	ldr	r3, [pc, #104]	; (4038e4 <_svfprintf_r+0x13dc>)
  40387c:	f7ff ba2f 	b.w	402cde <_svfprintf_r+0x7d6>
  403880:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403882:	9808      	ldr	r0, [sp, #32]
  403884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403886:	4639      	mov	r1, r7
  403888:	f003 f83c 	bl	406904 <__aeabi_dcmpeq>
  40388c:	2800      	cmp	r0, #0
  40388e:	f47f ae7f 	bne.w	403590 <_svfprintf_r+0x1088>
  403892:	f1c5 0501 	rsb	r5, r5, #1
  403896:	951f      	str	r5, [sp, #124]	; 0x7c
  403898:	442c      	add	r4, r5
  40389a:	e59e      	b.n	4033da <_svfprintf_r+0xed2>
  40389c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40389e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4038a0:	4413      	add	r3, r2
  4038a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4038a4:	441a      	add	r2, r3
  4038a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4038aa:	920e      	str	r2, [sp, #56]	; 0x38
  4038ac:	9308      	str	r3, [sp, #32]
  4038ae:	e5c7      	b.n	403440 <_svfprintf_r+0xf38>
  4038b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4038b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4038b4:	f1c3 0301 	rsb	r3, r3, #1
  4038b8:	441a      	add	r2, r3
  4038ba:	4613      	mov	r3, r2
  4038bc:	e7d0      	b.n	403860 <_svfprintf_r+0x1358>
  4038be:	f01b 0301 	ands.w	r3, fp, #1
  4038c2:	9312      	str	r3, [sp, #72]	; 0x48
  4038c4:	f47f aee2 	bne.w	40368c <_svfprintf_r+0x1184>
  4038c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4038ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4038ce:	9308      	str	r3, [sp, #32]
  4038d0:	e5b6      	b.n	403440 <_svfprintf_r+0xf38>
  4038d2:	bf00      	nop
  4038d4:	66666667 	.word	0x66666667
  4038d8:	00407490 	.word	0x00407490
  4038dc:	004074ac 	.word	0x004074ac
  4038e0:	00407464 	.word	0x00407464
  4038e4:	00407460 	.word	0x00407460
  4038e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038ea:	b913      	cbnz	r3, 4038f2 <_svfprintf_r+0x13ea>
  4038ec:	f01b 0f01 	tst.w	fp, #1
  4038f0:	d002      	beq.n	4038f8 <_svfprintf_r+0x13f0>
  4038f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4038f4:	3301      	adds	r3, #1
  4038f6:	e7d4      	b.n	4038a2 <_svfprintf_r+0x139a>
  4038f8:	2301      	movs	r3, #1
  4038fa:	e73a      	b.n	403772 <_svfprintf_r+0x126a>
  4038fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4038fe:	f89a 3001 	ldrb.w	r3, [sl, #1]
  403902:	6828      	ldr	r0, [r5, #0]
  403904:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  403908:	900a      	str	r0, [sp, #40]	; 0x28
  40390a:	4628      	mov	r0, r5
  40390c:	3004      	adds	r0, #4
  40390e:	46a2      	mov	sl, r4
  403910:	900f      	str	r0, [sp, #60]	; 0x3c
  403912:	f7fe be51 	b.w	4025b8 <_svfprintf_r+0xb0>
  403916:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40391a:	f7ff b867 	b.w	4029ec <_svfprintf_r+0x4e4>
  40391e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403922:	f7ff ba15 	b.w	402d50 <_svfprintf_r+0x848>
  403926:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40392a:	e6a6      	b.n	40367a <_svfprintf_r+0x1172>
  40392c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403930:	f7ff b8eb 	b.w	402b0a <_svfprintf_r+0x602>
  403934:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403936:	230c      	movs	r3, #12
  403938:	6013      	str	r3, [r2, #0]
  40393a:	f04f 33ff 	mov.w	r3, #4294967295
  40393e:	9309      	str	r3, [sp, #36]	; 0x24
  403940:	f7fe bebd 	b.w	4026be <_svfprintf_r+0x1b6>
  403944:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403948:	f7ff b99a 	b.w	402c80 <_svfprintf_r+0x778>
  40394c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403950:	f7ff b976 	b.w	402c40 <_svfprintf_r+0x738>
  403954:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403958:	f7ff b959 	b.w	402c0e <_svfprintf_r+0x706>
  40395c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403960:	f7ff b912 	b.w	402b88 <_svfprintf_r+0x680>

00403964 <register_fini>:
  403964:	4b02      	ldr	r3, [pc, #8]	; (403970 <register_fini+0xc>)
  403966:	b113      	cbz	r3, 40396e <register_fini+0xa>
  403968:	4802      	ldr	r0, [pc, #8]	; (403974 <register_fini+0x10>)
  40396a:	f000 b805 	b.w	403978 <atexit>
  40396e:	4770      	bx	lr
  403970:	00000000 	.word	0x00000000
  403974:	00404905 	.word	0x00404905

00403978 <atexit>:
  403978:	2300      	movs	r3, #0
  40397a:	4601      	mov	r1, r0
  40397c:	461a      	mov	r2, r3
  40397e:	4618      	mov	r0, r3
  403980:	f001 bfaa 	b.w	4058d8 <__register_exitproc>

00403984 <quorem>:
  403984:	6902      	ldr	r2, [r0, #16]
  403986:	690b      	ldr	r3, [r1, #16]
  403988:	4293      	cmp	r3, r2
  40398a:	f300 808d 	bgt.w	403aa8 <quorem+0x124>
  40398e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403992:	f103 38ff 	add.w	r8, r3, #4294967295
  403996:	f101 0714 	add.w	r7, r1, #20
  40399a:	f100 0b14 	add.w	fp, r0, #20
  40399e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4039a2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4039a6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4039aa:	b083      	sub	sp, #12
  4039ac:	3201      	adds	r2, #1
  4039ae:	fbb3 f9f2 	udiv	r9, r3, r2
  4039b2:	eb0b 0304 	add.w	r3, fp, r4
  4039b6:	9400      	str	r4, [sp, #0]
  4039b8:	eb07 0a04 	add.w	sl, r7, r4
  4039bc:	9301      	str	r3, [sp, #4]
  4039be:	f1b9 0f00 	cmp.w	r9, #0
  4039c2:	d039      	beq.n	403a38 <quorem+0xb4>
  4039c4:	2500      	movs	r5, #0
  4039c6:	462e      	mov	r6, r5
  4039c8:	46bc      	mov	ip, r7
  4039ca:	46de      	mov	lr, fp
  4039cc:	f85c 4b04 	ldr.w	r4, [ip], #4
  4039d0:	f8de 3000 	ldr.w	r3, [lr]
  4039d4:	b2a2      	uxth	r2, r4
  4039d6:	fb09 5502 	mla	r5, r9, r2, r5
  4039da:	0c22      	lsrs	r2, r4, #16
  4039dc:	0c2c      	lsrs	r4, r5, #16
  4039de:	fb09 4202 	mla	r2, r9, r2, r4
  4039e2:	b2ad      	uxth	r5, r5
  4039e4:	1b75      	subs	r5, r6, r5
  4039e6:	b296      	uxth	r6, r2
  4039e8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4039ec:	fa15 f383 	uxtah	r3, r5, r3
  4039f0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4039f4:	b29b      	uxth	r3, r3
  4039f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4039fa:	45e2      	cmp	sl, ip
  4039fc:	ea4f 4512 	mov.w	r5, r2, lsr #16
  403a00:	f84e 3b04 	str.w	r3, [lr], #4
  403a04:	ea4f 4626 	mov.w	r6, r6, asr #16
  403a08:	d2e0      	bcs.n	4039cc <quorem+0x48>
  403a0a:	9b00      	ldr	r3, [sp, #0]
  403a0c:	f85b 3003 	ldr.w	r3, [fp, r3]
  403a10:	b993      	cbnz	r3, 403a38 <quorem+0xb4>
  403a12:	9c01      	ldr	r4, [sp, #4]
  403a14:	1f23      	subs	r3, r4, #4
  403a16:	459b      	cmp	fp, r3
  403a18:	d20c      	bcs.n	403a34 <quorem+0xb0>
  403a1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403a1e:	b94b      	cbnz	r3, 403a34 <quorem+0xb0>
  403a20:	f1a4 0308 	sub.w	r3, r4, #8
  403a24:	e002      	b.n	403a2c <quorem+0xa8>
  403a26:	681a      	ldr	r2, [r3, #0]
  403a28:	3b04      	subs	r3, #4
  403a2a:	b91a      	cbnz	r2, 403a34 <quorem+0xb0>
  403a2c:	459b      	cmp	fp, r3
  403a2e:	f108 38ff 	add.w	r8, r8, #4294967295
  403a32:	d3f8      	bcc.n	403a26 <quorem+0xa2>
  403a34:	f8c0 8010 	str.w	r8, [r0, #16]
  403a38:	4604      	mov	r4, r0
  403a3a:	f001 fd35 	bl	4054a8 <__mcmp>
  403a3e:	2800      	cmp	r0, #0
  403a40:	db2e      	blt.n	403aa0 <quorem+0x11c>
  403a42:	f109 0901 	add.w	r9, r9, #1
  403a46:	465d      	mov	r5, fp
  403a48:	2300      	movs	r3, #0
  403a4a:	f857 1b04 	ldr.w	r1, [r7], #4
  403a4e:	6828      	ldr	r0, [r5, #0]
  403a50:	b28a      	uxth	r2, r1
  403a52:	1a9a      	subs	r2, r3, r2
  403a54:	0c0b      	lsrs	r3, r1, #16
  403a56:	fa12 f280 	uxtah	r2, r2, r0
  403a5a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  403a5e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  403a62:	b292      	uxth	r2, r2
  403a64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403a68:	45ba      	cmp	sl, r7
  403a6a:	f845 2b04 	str.w	r2, [r5], #4
  403a6e:	ea4f 4323 	mov.w	r3, r3, asr #16
  403a72:	d2ea      	bcs.n	403a4a <quorem+0xc6>
  403a74:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403a78:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  403a7c:	b982      	cbnz	r2, 403aa0 <quorem+0x11c>
  403a7e:	1f1a      	subs	r2, r3, #4
  403a80:	4593      	cmp	fp, r2
  403a82:	d20b      	bcs.n	403a9c <quorem+0x118>
  403a84:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403a88:	b942      	cbnz	r2, 403a9c <quorem+0x118>
  403a8a:	3b08      	subs	r3, #8
  403a8c:	e002      	b.n	403a94 <quorem+0x110>
  403a8e:	681a      	ldr	r2, [r3, #0]
  403a90:	3b04      	subs	r3, #4
  403a92:	b91a      	cbnz	r2, 403a9c <quorem+0x118>
  403a94:	459b      	cmp	fp, r3
  403a96:	f108 38ff 	add.w	r8, r8, #4294967295
  403a9a:	d3f8      	bcc.n	403a8e <quorem+0x10a>
  403a9c:	f8c4 8010 	str.w	r8, [r4, #16]
  403aa0:	4648      	mov	r0, r9
  403aa2:	b003      	add	sp, #12
  403aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403aa8:	2000      	movs	r0, #0
  403aaa:	4770      	bx	lr
  403aac:	0000      	movs	r0, r0
	...

00403ab0 <_dtoa_r>:
  403ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ab4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403ab6:	b09b      	sub	sp, #108	; 0x6c
  403ab8:	4604      	mov	r4, r0
  403aba:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  403abc:	4692      	mov	sl, r2
  403abe:	469b      	mov	fp, r3
  403ac0:	b141      	cbz	r1, 403ad4 <_dtoa_r+0x24>
  403ac2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  403ac4:	604a      	str	r2, [r1, #4]
  403ac6:	2301      	movs	r3, #1
  403ac8:	4093      	lsls	r3, r2
  403aca:	608b      	str	r3, [r1, #8]
  403acc:	f001 fb14 	bl	4050f8 <_Bfree>
  403ad0:	2300      	movs	r3, #0
  403ad2:	6423      	str	r3, [r4, #64]	; 0x40
  403ad4:	f1bb 0f00 	cmp.w	fp, #0
  403ad8:	465d      	mov	r5, fp
  403ada:	db35      	blt.n	403b48 <_dtoa_r+0x98>
  403adc:	2300      	movs	r3, #0
  403ade:	6033      	str	r3, [r6, #0]
  403ae0:	4b9d      	ldr	r3, [pc, #628]	; (403d58 <_dtoa_r+0x2a8>)
  403ae2:	43ab      	bics	r3, r5
  403ae4:	d015      	beq.n	403b12 <_dtoa_r+0x62>
  403ae6:	4650      	mov	r0, sl
  403ae8:	4659      	mov	r1, fp
  403aea:	2200      	movs	r2, #0
  403aec:	2300      	movs	r3, #0
  403aee:	f002 ff09 	bl	406904 <__aeabi_dcmpeq>
  403af2:	4680      	mov	r8, r0
  403af4:	2800      	cmp	r0, #0
  403af6:	d02d      	beq.n	403b54 <_dtoa_r+0xa4>
  403af8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403afa:	2301      	movs	r3, #1
  403afc:	6013      	str	r3, [r2, #0]
  403afe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403b00:	2b00      	cmp	r3, #0
  403b02:	f000 80bd 	beq.w	403c80 <_dtoa_r+0x1d0>
  403b06:	4895      	ldr	r0, [pc, #596]	; (403d5c <_dtoa_r+0x2ac>)
  403b08:	6018      	str	r0, [r3, #0]
  403b0a:	3801      	subs	r0, #1
  403b0c:	b01b      	add	sp, #108	; 0x6c
  403b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b12:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403b14:	f242 730f 	movw	r3, #9999	; 0x270f
  403b18:	6013      	str	r3, [r2, #0]
  403b1a:	f1ba 0f00 	cmp.w	sl, #0
  403b1e:	d10d      	bne.n	403b3c <_dtoa_r+0x8c>
  403b20:	f3c5 0513 	ubfx	r5, r5, #0, #20
  403b24:	b955      	cbnz	r5, 403b3c <_dtoa_r+0x8c>
  403b26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403b28:	488d      	ldr	r0, [pc, #564]	; (403d60 <_dtoa_r+0x2b0>)
  403b2a:	2b00      	cmp	r3, #0
  403b2c:	d0ee      	beq.n	403b0c <_dtoa_r+0x5c>
  403b2e:	f100 0308 	add.w	r3, r0, #8
  403b32:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  403b34:	6013      	str	r3, [r2, #0]
  403b36:	b01b      	add	sp, #108	; 0x6c
  403b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403b3e:	4889      	ldr	r0, [pc, #548]	; (403d64 <_dtoa_r+0x2b4>)
  403b40:	2b00      	cmp	r3, #0
  403b42:	d0e3      	beq.n	403b0c <_dtoa_r+0x5c>
  403b44:	1cc3      	adds	r3, r0, #3
  403b46:	e7f4      	b.n	403b32 <_dtoa_r+0x82>
  403b48:	2301      	movs	r3, #1
  403b4a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  403b4e:	6033      	str	r3, [r6, #0]
  403b50:	46ab      	mov	fp, r5
  403b52:	e7c5      	b.n	403ae0 <_dtoa_r+0x30>
  403b54:	aa18      	add	r2, sp, #96	; 0x60
  403b56:	ab19      	add	r3, sp, #100	; 0x64
  403b58:	9201      	str	r2, [sp, #4]
  403b5a:	9300      	str	r3, [sp, #0]
  403b5c:	4652      	mov	r2, sl
  403b5e:	465b      	mov	r3, fp
  403b60:	4620      	mov	r0, r4
  403b62:	f001 fd41 	bl	4055e8 <__d2b>
  403b66:	0d2b      	lsrs	r3, r5, #20
  403b68:	4681      	mov	r9, r0
  403b6a:	d071      	beq.n	403c50 <_dtoa_r+0x1a0>
  403b6c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  403b70:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  403b74:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403b76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  403b7a:	4650      	mov	r0, sl
  403b7c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  403b80:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403b84:	2200      	movs	r2, #0
  403b86:	4b78      	ldr	r3, [pc, #480]	; (403d68 <_dtoa_r+0x2b8>)
  403b88:	f002 faa0 	bl	4060cc <__aeabi_dsub>
  403b8c:	a36c      	add	r3, pc, #432	; (adr r3, 403d40 <_dtoa_r+0x290>)
  403b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b92:	f002 fc4f 	bl	406434 <__aeabi_dmul>
  403b96:	a36c      	add	r3, pc, #432	; (adr r3, 403d48 <_dtoa_r+0x298>)
  403b98:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b9c:	f002 fa98 	bl	4060d0 <__adddf3>
  403ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ba4:	4630      	mov	r0, r6
  403ba6:	f002 fbdf 	bl	406368 <__aeabi_i2d>
  403baa:	a369      	add	r3, pc, #420	; (adr r3, 403d50 <_dtoa_r+0x2a0>)
  403bac:	e9d3 2300 	ldrd	r2, r3, [r3]
  403bb0:	f002 fc40 	bl	406434 <__aeabi_dmul>
  403bb4:	4602      	mov	r2, r0
  403bb6:	460b      	mov	r3, r1
  403bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403bbc:	f002 fa88 	bl	4060d0 <__adddf3>
  403bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403bc4:	f002 fee6 	bl	406994 <__aeabi_d2iz>
  403bc8:	2200      	movs	r2, #0
  403bca:	9002      	str	r0, [sp, #8]
  403bcc:	2300      	movs	r3, #0
  403bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403bd2:	f002 fea1 	bl	406918 <__aeabi_dcmplt>
  403bd6:	2800      	cmp	r0, #0
  403bd8:	f040 8173 	bne.w	403ec2 <_dtoa_r+0x412>
  403bdc:	9d02      	ldr	r5, [sp, #8]
  403bde:	2d16      	cmp	r5, #22
  403be0:	f200 815d 	bhi.w	403e9e <_dtoa_r+0x3ee>
  403be4:	4b61      	ldr	r3, [pc, #388]	; (403d6c <_dtoa_r+0x2bc>)
  403be6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  403bea:	e9d3 0100 	ldrd	r0, r1, [r3]
  403bee:	4652      	mov	r2, sl
  403bf0:	465b      	mov	r3, fp
  403bf2:	f002 feaf 	bl	406954 <__aeabi_dcmpgt>
  403bf6:	2800      	cmp	r0, #0
  403bf8:	f000 81c5 	beq.w	403f86 <_dtoa_r+0x4d6>
  403bfc:	1e6b      	subs	r3, r5, #1
  403bfe:	9302      	str	r3, [sp, #8]
  403c00:	2300      	movs	r3, #0
  403c02:	930e      	str	r3, [sp, #56]	; 0x38
  403c04:	1bbf      	subs	r7, r7, r6
  403c06:	1e7b      	subs	r3, r7, #1
  403c08:	9306      	str	r3, [sp, #24]
  403c0a:	f100 8154 	bmi.w	403eb6 <_dtoa_r+0x406>
  403c0e:	2300      	movs	r3, #0
  403c10:	9308      	str	r3, [sp, #32]
  403c12:	9b02      	ldr	r3, [sp, #8]
  403c14:	2b00      	cmp	r3, #0
  403c16:	f2c0 8145 	blt.w	403ea4 <_dtoa_r+0x3f4>
  403c1a:	9a06      	ldr	r2, [sp, #24]
  403c1c:	930d      	str	r3, [sp, #52]	; 0x34
  403c1e:	4611      	mov	r1, r2
  403c20:	4419      	add	r1, r3
  403c22:	2300      	movs	r3, #0
  403c24:	9106      	str	r1, [sp, #24]
  403c26:	930c      	str	r3, [sp, #48]	; 0x30
  403c28:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c2a:	2b09      	cmp	r3, #9
  403c2c:	d82a      	bhi.n	403c84 <_dtoa_r+0x1d4>
  403c2e:	2b05      	cmp	r3, #5
  403c30:	f340 865b 	ble.w	4048ea <_dtoa_r+0xe3a>
  403c34:	3b04      	subs	r3, #4
  403c36:	9324      	str	r3, [sp, #144]	; 0x90
  403c38:	2500      	movs	r5, #0
  403c3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c3c:	3b02      	subs	r3, #2
  403c3e:	2b03      	cmp	r3, #3
  403c40:	f200 8642 	bhi.w	4048c8 <_dtoa_r+0xe18>
  403c44:	e8df f013 	tbh	[pc, r3, lsl #1]
  403c48:	02c903d4 	.word	0x02c903d4
  403c4c:	046103df 	.word	0x046103df
  403c50:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403c52:	9e19      	ldr	r6, [sp, #100]	; 0x64
  403c54:	443e      	add	r6, r7
  403c56:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403c5a:	2b20      	cmp	r3, #32
  403c5c:	f340 818e 	ble.w	403f7c <_dtoa_r+0x4cc>
  403c60:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403c64:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403c68:	409d      	lsls	r5, r3
  403c6a:	fa2a f000 	lsr.w	r0, sl, r0
  403c6e:	4328      	orrs	r0, r5
  403c70:	f002 fb6a 	bl	406348 <__aeabi_ui2d>
  403c74:	2301      	movs	r3, #1
  403c76:	3e01      	subs	r6, #1
  403c78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403c7c:	9314      	str	r3, [sp, #80]	; 0x50
  403c7e:	e781      	b.n	403b84 <_dtoa_r+0xd4>
  403c80:	483b      	ldr	r0, [pc, #236]	; (403d70 <_dtoa_r+0x2c0>)
  403c82:	e743      	b.n	403b0c <_dtoa_r+0x5c>
  403c84:	2100      	movs	r1, #0
  403c86:	6461      	str	r1, [r4, #68]	; 0x44
  403c88:	4620      	mov	r0, r4
  403c8a:	9125      	str	r1, [sp, #148]	; 0x94
  403c8c:	f001 fa0e 	bl	4050ac <_Balloc>
  403c90:	f04f 33ff 	mov.w	r3, #4294967295
  403c94:	930a      	str	r3, [sp, #40]	; 0x28
  403c96:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403c98:	930f      	str	r3, [sp, #60]	; 0x3c
  403c9a:	2301      	movs	r3, #1
  403c9c:	9004      	str	r0, [sp, #16]
  403c9e:	6420      	str	r0, [r4, #64]	; 0x40
  403ca0:	9224      	str	r2, [sp, #144]	; 0x90
  403ca2:	930b      	str	r3, [sp, #44]	; 0x2c
  403ca4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ca6:	2b00      	cmp	r3, #0
  403ca8:	f2c0 80d9 	blt.w	403e5e <_dtoa_r+0x3ae>
  403cac:	9a02      	ldr	r2, [sp, #8]
  403cae:	2a0e      	cmp	r2, #14
  403cb0:	f300 80d5 	bgt.w	403e5e <_dtoa_r+0x3ae>
  403cb4:	4b2d      	ldr	r3, [pc, #180]	; (403d6c <_dtoa_r+0x2bc>)
  403cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403cba:	e9d3 2300 	ldrd	r2, r3, [r3]
  403cbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
  403cc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403cc4:	2b00      	cmp	r3, #0
  403cc6:	f2c0 83ba 	blt.w	40443e <_dtoa_r+0x98e>
  403cca:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  403cce:	4650      	mov	r0, sl
  403cd0:	462a      	mov	r2, r5
  403cd2:	4633      	mov	r3, r6
  403cd4:	4659      	mov	r1, fp
  403cd6:	f002 fcd7 	bl	406688 <__aeabi_ddiv>
  403cda:	f002 fe5b 	bl	406994 <__aeabi_d2iz>
  403cde:	4680      	mov	r8, r0
  403ce0:	f002 fb42 	bl	406368 <__aeabi_i2d>
  403ce4:	462a      	mov	r2, r5
  403ce6:	4633      	mov	r3, r6
  403ce8:	f002 fba4 	bl	406434 <__aeabi_dmul>
  403cec:	460b      	mov	r3, r1
  403cee:	4602      	mov	r2, r0
  403cf0:	4659      	mov	r1, fp
  403cf2:	4650      	mov	r0, sl
  403cf4:	f002 f9ea 	bl	4060cc <__aeabi_dsub>
  403cf8:	9d04      	ldr	r5, [sp, #16]
  403cfa:	f108 0330 	add.w	r3, r8, #48	; 0x30
  403cfe:	702b      	strb	r3, [r5, #0]
  403d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d02:	2b01      	cmp	r3, #1
  403d04:	4606      	mov	r6, r0
  403d06:	460f      	mov	r7, r1
  403d08:	f105 0501 	add.w	r5, r5, #1
  403d0c:	d068      	beq.n	403de0 <_dtoa_r+0x330>
  403d0e:	2200      	movs	r2, #0
  403d10:	4b18      	ldr	r3, [pc, #96]	; (403d74 <_dtoa_r+0x2c4>)
  403d12:	f002 fb8f 	bl	406434 <__aeabi_dmul>
  403d16:	2200      	movs	r2, #0
  403d18:	2300      	movs	r3, #0
  403d1a:	4606      	mov	r6, r0
  403d1c:	460f      	mov	r7, r1
  403d1e:	f002 fdf1 	bl	406904 <__aeabi_dcmpeq>
  403d22:	2800      	cmp	r0, #0
  403d24:	f040 8088 	bne.w	403e38 <_dtoa_r+0x388>
  403d28:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  403d2c:	f04f 0a00 	mov.w	sl, #0
  403d30:	f8df b040 	ldr.w	fp, [pc, #64]	; 403d74 <_dtoa_r+0x2c4>
  403d34:	940c      	str	r4, [sp, #48]	; 0x30
  403d36:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  403d3a:	e028      	b.n	403d8e <_dtoa_r+0x2de>
  403d3c:	f3af 8000 	nop.w
  403d40:	636f4361 	.word	0x636f4361
  403d44:	3fd287a7 	.word	0x3fd287a7
  403d48:	8b60c8b3 	.word	0x8b60c8b3
  403d4c:	3fc68a28 	.word	0x3fc68a28
  403d50:	509f79fb 	.word	0x509f79fb
  403d54:	3fd34413 	.word	0x3fd34413
  403d58:	7ff00000 	.word	0x7ff00000
  403d5c:	00407499 	.word	0x00407499
  403d60:	004074bc 	.word	0x004074bc
  403d64:	004074c8 	.word	0x004074c8
  403d68:	3ff80000 	.word	0x3ff80000
  403d6c:	004074f8 	.word	0x004074f8
  403d70:	00407498 	.word	0x00407498
  403d74:	40240000 	.word	0x40240000
  403d78:	f002 fb5c 	bl	406434 <__aeabi_dmul>
  403d7c:	2200      	movs	r2, #0
  403d7e:	2300      	movs	r3, #0
  403d80:	4606      	mov	r6, r0
  403d82:	460f      	mov	r7, r1
  403d84:	f002 fdbe 	bl	406904 <__aeabi_dcmpeq>
  403d88:	2800      	cmp	r0, #0
  403d8a:	f040 83c1 	bne.w	404510 <_dtoa_r+0xa60>
  403d8e:	4642      	mov	r2, r8
  403d90:	464b      	mov	r3, r9
  403d92:	4630      	mov	r0, r6
  403d94:	4639      	mov	r1, r7
  403d96:	f002 fc77 	bl	406688 <__aeabi_ddiv>
  403d9a:	f002 fdfb 	bl	406994 <__aeabi_d2iz>
  403d9e:	4604      	mov	r4, r0
  403da0:	f002 fae2 	bl	406368 <__aeabi_i2d>
  403da4:	4642      	mov	r2, r8
  403da6:	464b      	mov	r3, r9
  403da8:	f002 fb44 	bl	406434 <__aeabi_dmul>
  403dac:	4602      	mov	r2, r0
  403dae:	460b      	mov	r3, r1
  403db0:	4630      	mov	r0, r6
  403db2:	4639      	mov	r1, r7
  403db4:	f002 f98a 	bl	4060cc <__aeabi_dsub>
  403db8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403dbc:	9e04      	ldr	r6, [sp, #16]
  403dbe:	f805 eb01 	strb.w	lr, [r5], #1
  403dc2:	eba5 0e06 	sub.w	lr, r5, r6
  403dc6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403dc8:	45b6      	cmp	lr, r6
  403dca:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403dce:	4652      	mov	r2, sl
  403dd0:	465b      	mov	r3, fp
  403dd2:	d1d1      	bne.n	403d78 <_dtoa_r+0x2c8>
  403dd4:	46a0      	mov	r8, r4
  403dd6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403dda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403ddc:	4606      	mov	r6, r0
  403dde:	460f      	mov	r7, r1
  403de0:	4632      	mov	r2, r6
  403de2:	463b      	mov	r3, r7
  403de4:	4630      	mov	r0, r6
  403de6:	4639      	mov	r1, r7
  403de8:	f002 f972 	bl	4060d0 <__adddf3>
  403dec:	4606      	mov	r6, r0
  403dee:	460f      	mov	r7, r1
  403df0:	4602      	mov	r2, r0
  403df2:	460b      	mov	r3, r1
  403df4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403df8:	f002 fd8e 	bl	406918 <__aeabi_dcmplt>
  403dfc:	b948      	cbnz	r0, 403e12 <_dtoa_r+0x362>
  403dfe:	4632      	mov	r2, r6
  403e00:	463b      	mov	r3, r7
  403e02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403e06:	f002 fd7d 	bl	406904 <__aeabi_dcmpeq>
  403e0a:	b1a8      	cbz	r0, 403e38 <_dtoa_r+0x388>
  403e0c:	f018 0f01 	tst.w	r8, #1
  403e10:	d012      	beq.n	403e38 <_dtoa_r+0x388>
  403e12:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  403e16:	9a04      	ldr	r2, [sp, #16]
  403e18:	1e6b      	subs	r3, r5, #1
  403e1a:	e004      	b.n	403e26 <_dtoa_r+0x376>
  403e1c:	429a      	cmp	r2, r3
  403e1e:	f000 8401 	beq.w	404624 <_dtoa_r+0xb74>
  403e22:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  403e26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403e2a:	f103 0501 	add.w	r5, r3, #1
  403e2e:	d0f5      	beq.n	403e1c <_dtoa_r+0x36c>
  403e30:	f108 0801 	add.w	r8, r8, #1
  403e34:	f883 8000 	strb.w	r8, [r3]
  403e38:	4649      	mov	r1, r9
  403e3a:	4620      	mov	r0, r4
  403e3c:	f001 f95c 	bl	4050f8 <_Bfree>
  403e40:	2200      	movs	r2, #0
  403e42:	9b02      	ldr	r3, [sp, #8]
  403e44:	702a      	strb	r2, [r5, #0]
  403e46:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403e48:	3301      	adds	r3, #1
  403e4a:	6013      	str	r3, [r2, #0]
  403e4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403e4e:	2b00      	cmp	r3, #0
  403e50:	f000 839e 	beq.w	404590 <_dtoa_r+0xae0>
  403e54:	9804      	ldr	r0, [sp, #16]
  403e56:	601d      	str	r5, [r3, #0]
  403e58:	b01b      	add	sp, #108	; 0x6c
  403e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403e60:	2a00      	cmp	r2, #0
  403e62:	d03e      	beq.n	403ee2 <_dtoa_r+0x432>
  403e64:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403e66:	2a01      	cmp	r2, #1
  403e68:	f340 8311 	ble.w	40448e <_dtoa_r+0x9de>
  403e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403e70:	1e5f      	subs	r7, r3, #1
  403e72:	42ba      	cmp	r2, r7
  403e74:	f2c0 838f 	blt.w	404596 <_dtoa_r+0xae6>
  403e78:	1bd7      	subs	r7, r2, r7
  403e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e7c:	2b00      	cmp	r3, #0
  403e7e:	f2c0 848b 	blt.w	404798 <_dtoa_r+0xce8>
  403e82:	9d08      	ldr	r5, [sp, #32]
  403e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e86:	9a08      	ldr	r2, [sp, #32]
  403e88:	441a      	add	r2, r3
  403e8a:	9208      	str	r2, [sp, #32]
  403e8c:	9a06      	ldr	r2, [sp, #24]
  403e8e:	2101      	movs	r1, #1
  403e90:	441a      	add	r2, r3
  403e92:	4620      	mov	r0, r4
  403e94:	9206      	str	r2, [sp, #24]
  403e96:	f001 f9c9 	bl	40522c <__i2b>
  403e9a:	4606      	mov	r6, r0
  403e9c:	e024      	b.n	403ee8 <_dtoa_r+0x438>
  403e9e:	2301      	movs	r3, #1
  403ea0:	930e      	str	r3, [sp, #56]	; 0x38
  403ea2:	e6af      	b.n	403c04 <_dtoa_r+0x154>
  403ea4:	9a08      	ldr	r2, [sp, #32]
  403ea6:	9b02      	ldr	r3, [sp, #8]
  403ea8:	1ad2      	subs	r2, r2, r3
  403eaa:	425b      	negs	r3, r3
  403eac:	930c      	str	r3, [sp, #48]	; 0x30
  403eae:	2300      	movs	r3, #0
  403eb0:	9208      	str	r2, [sp, #32]
  403eb2:	930d      	str	r3, [sp, #52]	; 0x34
  403eb4:	e6b8      	b.n	403c28 <_dtoa_r+0x178>
  403eb6:	f1c7 0301 	rsb	r3, r7, #1
  403eba:	9308      	str	r3, [sp, #32]
  403ebc:	2300      	movs	r3, #0
  403ebe:	9306      	str	r3, [sp, #24]
  403ec0:	e6a7      	b.n	403c12 <_dtoa_r+0x162>
  403ec2:	9d02      	ldr	r5, [sp, #8]
  403ec4:	4628      	mov	r0, r5
  403ec6:	f002 fa4f 	bl	406368 <__aeabi_i2d>
  403eca:	4602      	mov	r2, r0
  403ecc:	460b      	mov	r3, r1
  403ece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403ed2:	f002 fd17 	bl	406904 <__aeabi_dcmpeq>
  403ed6:	2800      	cmp	r0, #0
  403ed8:	f47f ae80 	bne.w	403bdc <_dtoa_r+0x12c>
  403edc:	1e6b      	subs	r3, r5, #1
  403ede:	9302      	str	r3, [sp, #8]
  403ee0:	e67c      	b.n	403bdc <_dtoa_r+0x12c>
  403ee2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403ee4:	9d08      	ldr	r5, [sp, #32]
  403ee6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403ee8:	2d00      	cmp	r5, #0
  403eea:	dd0c      	ble.n	403f06 <_dtoa_r+0x456>
  403eec:	9906      	ldr	r1, [sp, #24]
  403eee:	2900      	cmp	r1, #0
  403ef0:	460b      	mov	r3, r1
  403ef2:	dd08      	ble.n	403f06 <_dtoa_r+0x456>
  403ef4:	42a9      	cmp	r1, r5
  403ef6:	9a08      	ldr	r2, [sp, #32]
  403ef8:	bfa8      	it	ge
  403efa:	462b      	movge	r3, r5
  403efc:	1ad2      	subs	r2, r2, r3
  403efe:	1aed      	subs	r5, r5, r3
  403f00:	1acb      	subs	r3, r1, r3
  403f02:	9208      	str	r2, [sp, #32]
  403f04:	9306      	str	r3, [sp, #24]
  403f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403f08:	b1d3      	cbz	r3, 403f40 <_dtoa_r+0x490>
  403f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403f0c:	2b00      	cmp	r3, #0
  403f0e:	f000 82b7 	beq.w	404480 <_dtoa_r+0x9d0>
  403f12:	2f00      	cmp	r7, #0
  403f14:	dd10      	ble.n	403f38 <_dtoa_r+0x488>
  403f16:	4631      	mov	r1, r6
  403f18:	463a      	mov	r2, r7
  403f1a:	4620      	mov	r0, r4
  403f1c:	f001 fa22 	bl	405364 <__pow5mult>
  403f20:	464a      	mov	r2, r9
  403f22:	4601      	mov	r1, r0
  403f24:	4606      	mov	r6, r0
  403f26:	4620      	mov	r0, r4
  403f28:	f001 f98a 	bl	405240 <__multiply>
  403f2c:	4649      	mov	r1, r9
  403f2e:	4680      	mov	r8, r0
  403f30:	4620      	mov	r0, r4
  403f32:	f001 f8e1 	bl	4050f8 <_Bfree>
  403f36:	46c1      	mov	r9, r8
  403f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403f3a:	1bda      	subs	r2, r3, r7
  403f3c:	f040 82a1 	bne.w	404482 <_dtoa_r+0x9d2>
  403f40:	2101      	movs	r1, #1
  403f42:	4620      	mov	r0, r4
  403f44:	f001 f972 	bl	40522c <__i2b>
  403f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f4a:	2b00      	cmp	r3, #0
  403f4c:	4680      	mov	r8, r0
  403f4e:	dd1c      	ble.n	403f8a <_dtoa_r+0x4da>
  403f50:	4601      	mov	r1, r0
  403f52:	461a      	mov	r2, r3
  403f54:	4620      	mov	r0, r4
  403f56:	f001 fa05 	bl	405364 <__pow5mult>
  403f5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f5c:	2b01      	cmp	r3, #1
  403f5e:	4680      	mov	r8, r0
  403f60:	f340 8254 	ble.w	40440c <_dtoa_r+0x95c>
  403f64:	2300      	movs	r3, #0
  403f66:	930c      	str	r3, [sp, #48]	; 0x30
  403f68:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403f6c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403f70:	6918      	ldr	r0, [r3, #16]
  403f72:	f001 f90b 	bl	40518c <__hi0bits>
  403f76:	f1c0 0020 	rsb	r0, r0, #32
  403f7a:	e010      	b.n	403f9e <_dtoa_r+0x4ee>
  403f7c:	f1c3 0520 	rsb	r5, r3, #32
  403f80:	fa0a f005 	lsl.w	r0, sl, r5
  403f84:	e674      	b.n	403c70 <_dtoa_r+0x1c0>
  403f86:	900e      	str	r0, [sp, #56]	; 0x38
  403f88:	e63c      	b.n	403c04 <_dtoa_r+0x154>
  403f8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f8c:	2b01      	cmp	r3, #1
  403f8e:	f340 8287 	ble.w	4044a0 <_dtoa_r+0x9f0>
  403f92:	2300      	movs	r3, #0
  403f94:	930c      	str	r3, [sp, #48]	; 0x30
  403f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f98:	2001      	movs	r0, #1
  403f9a:	2b00      	cmp	r3, #0
  403f9c:	d1e4      	bne.n	403f68 <_dtoa_r+0x4b8>
  403f9e:	9a06      	ldr	r2, [sp, #24]
  403fa0:	4410      	add	r0, r2
  403fa2:	f010 001f 	ands.w	r0, r0, #31
  403fa6:	f000 80a1 	beq.w	4040ec <_dtoa_r+0x63c>
  403faa:	f1c0 0320 	rsb	r3, r0, #32
  403fae:	2b04      	cmp	r3, #4
  403fb0:	f340 849e 	ble.w	4048f0 <_dtoa_r+0xe40>
  403fb4:	9b08      	ldr	r3, [sp, #32]
  403fb6:	f1c0 001c 	rsb	r0, r0, #28
  403fba:	4403      	add	r3, r0
  403fbc:	9308      	str	r3, [sp, #32]
  403fbe:	4613      	mov	r3, r2
  403fc0:	4403      	add	r3, r0
  403fc2:	4405      	add	r5, r0
  403fc4:	9306      	str	r3, [sp, #24]
  403fc6:	9b08      	ldr	r3, [sp, #32]
  403fc8:	2b00      	cmp	r3, #0
  403fca:	dd05      	ble.n	403fd8 <_dtoa_r+0x528>
  403fcc:	4649      	mov	r1, r9
  403fce:	461a      	mov	r2, r3
  403fd0:	4620      	mov	r0, r4
  403fd2:	f001 fa17 	bl	405404 <__lshift>
  403fd6:	4681      	mov	r9, r0
  403fd8:	9b06      	ldr	r3, [sp, #24]
  403fda:	2b00      	cmp	r3, #0
  403fdc:	dd05      	ble.n	403fea <_dtoa_r+0x53a>
  403fde:	4641      	mov	r1, r8
  403fe0:	461a      	mov	r2, r3
  403fe2:	4620      	mov	r0, r4
  403fe4:	f001 fa0e 	bl	405404 <__lshift>
  403fe8:	4680      	mov	r8, r0
  403fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403fec:	2b00      	cmp	r3, #0
  403fee:	f040 8086 	bne.w	4040fe <_dtoa_r+0x64e>
  403ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ff4:	2b00      	cmp	r3, #0
  403ff6:	f340 8266 	ble.w	4044c6 <_dtoa_r+0xa16>
  403ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ffc:	2b00      	cmp	r3, #0
  403ffe:	f000 8098 	beq.w	404132 <_dtoa_r+0x682>
  404002:	2d00      	cmp	r5, #0
  404004:	dd05      	ble.n	404012 <_dtoa_r+0x562>
  404006:	4631      	mov	r1, r6
  404008:	462a      	mov	r2, r5
  40400a:	4620      	mov	r0, r4
  40400c:	f001 f9fa 	bl	405404 <__lshift>
  404010:	4606      	mov	r6, r0
  404012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404014:	2b00      	cmp	r3, #0
  404016:	f040 8337 	bne.w	404688 <_dtoa_r+0xbd8>
  40401a:	9606      	str	r6, [sp, #24]
  40401c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40401e:	9a04      	ldr	r2, [sp, #16]
  404020:	f8dd b018 	ldr.w	fp, [sp, #24]
  404024:	3b01      	subs	r3, #1
  404026:	18d3      	adds	r3, r2, r3
  404028:	930b      	str	r3, [sp, #44]	; 0x2c
  40402a:	f00a 0301 	and.w	r3, sl, #1
  40402e:	930c      	str	r3, [sp, #48]	; 0x30
  404030:	4617      	mov	r7, r2
  404032:	46c2      	mov	sl, r8
  404034:	4651      	mov	r1, sl
  404036:	4648      	mov	r0, r9
  404038:	f7ff fca4 	bl	403984 <quorem>
  40403c:	4631      	mov	r1, r6
  40403e:	4605      	mov	r5, r0
  404040:	4648      	mov	r0, r9
  404042:	f001 fa31 	bl	4054a8 <__mcmp>
  404046:	465a      	mov	r2, fp
  404048:	900a      	str	r0, [sp, #40]	; 0x28
  40404a:	4651      	mov	r1, sl
  40404c:	4620      	mov	r0, r4
  40404e:	f001 fa47 	bl	4054e0 <__mdiff>
  404052:	68c2      	ldr	r2, [r0, #12]
  404054:	4680      	mov	r8, r0
  404056:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40405a:	2a00      	cmp	r2, #0
  40405c:	f040 822b 	bne.w	4044b6 <_dtoa_r+0xa06>
  404060:	4601      	mov	r1, r0
  404062:	4648      	mov	r0, r9
  404064:	9308      	str	r3, [sp, #32]
  404066:	f001 fa1f 	bl	4054a8 <__mcmp>
  40406a:	4641      	mov	r1, r8
  40406c:	9006      	str	r0, [sp, #24]
  40406e:	4620      	mov	r0, r4
  404070:	f001 f842 	bl	4050f8 <_Bfree>
  404074:	9a06      	ldr	r2, [sp, #24]
  404076:	9b08      	ldr	r3, [sp, #32]
  404078:	b932      	cbnz	r2, 404088 <_dtoa_r+0x5d8>
  40407a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40407c:	b921      	cbnz	r1, 404088 <_dtoa_r+0x5d8>
  40407e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404080:	2a00      	cmp	r2, #0
  404082:	f000 83ef 	beq.w	404864 <_dtoa_r+0xdb4>
  404086:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404088:	990a      	ldr	r1, [sp, #40]	; 0x28
  40408a:	2900      	cmp	r1, #0
  40408c:	f2c0 829f 	blt.w	4045ce <_dtoa_r+0xb1e>
  404090:	d105      	bne.n	40409e <_dtoa_r+0x5ee>
  404092:	9924      	ldr	r1, [sp, #144]	; 0x90
  404094:	b919      	cbnz	r1, 40409e <_dtoa_r+0x5ee>
  404096:	990c      	ldr	r1, [sp, #48]	; 0x30
  404098:	2900      	cmp	r1, #0
  40409a:	f000 8298 	beq.w	4045ce <_dtoa_r+0xb1e>
  40409e:	2a00      	cmp	r2, #0
  4040a0:	f300 8306 	bgt.w	4046b0 <_dtoa_r+0xc00>
  4040a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4040a6:	703b      	strb	r3, [r7, #0]
  4040a8:	f107 0801 	add.w	r8, r7, #1
  4040ac:	4297      	cmp	r7, r2
  4040ae:	4645      	mov	r5, r8
  4040b0:	f000 830c 	beq.w	4046cc <_dtoa_r+0xc1c>
  4040b4:	4649      	mov	r1, r9
  4040b6:	2300      	movs	r3, #0
  4040b8:	220a      	movs	r2, #10
  4040ba:	4620      	mov	r0, r4
  4040bc:	f001 f826 	bl	40510c <__multadd>
  4040c0:	455e      	cmp	r6, fp
  4040c2:	4681      	mov	r9, r0
  4040c4:	4631      	mov	r1, r6
  4040c6:	f04f 0300 	mov.w	r3, #0
  4040ca:	f04f 020a 	mov.w	r2, #10
  4040ce:	4620      	mov	r0, r4
  4040d0:	f000 81eb 	beq.w	4044aa <_dtoa_r+0x9fa>
  4040d4:	f001 f81a 	bl	40510c <__multadd>
  4040d8:	4659      	mov	r1, fp
  4040da:	4606      	mov	r6, r0
  4040dc:	2300      	movs	r3, #0
  4040de:	220a      	movs	r2, #10
  4040e0:	4620      	mov	r0, r4
  4040e2:	f001 f813 	bl	40510c <__multadd>
  4040e6:	4647      	mov	r7, r8
  4040e8:	4683      	mov	fp, r0
  4040ea:	e7a3      	b.n	404034 <_dtoa_r+0x584>
  4040ec:	201c      	movs	r0, #28
  4040ee:	9b08      	ldr	r3, [sp, #32]
  4040f0:	4403      	add	r3, r0
  4040f2:	9308      	str	r3, [sp, #32]
  4040f4:	9b06      	ldr	r3, [sp, #24]
  4040f6:	4403      	add	r3, r0
  4040f8:	4405      	add	r5, r0
  4040fa:	9306      	str	r3, [sp, #24]
  4040fc:	e763      	b.n	403fc6 <_dtoa_r+0x516>
  4040fe:	4641      	mov	r1, r8
  404100:	4648      	mov	r0, r9
  404102:	f001 f9d1 	bl	4054a8 <__mcmp>
  404106:	2800      	cmp	r0, #0
  404108:	f6bf af73 	bge.w	403ff2 <_dtoa_r+0x542>
  40410c:	9f02      	ldr	r7, [sp, #8]
  40410e:	4649      	mov	r1, r9
  404110:	2300      	movs	r3, #0
  404112:	220a      	movs	r2, #10
  404114:	4620      	mov	r0, r4
  404116:	3f01      	subs	r7, #1
  404118:	9702      	str	r7, [sp, #8]
  40411a:	f000 fff7 	bl	40510c <__multadd>
  40411e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404120:	4681      	mov	r9, r0
  404122:	2b00      	cmp	r3, #0
  404124:	f040 83b6 	bne.w	404894 <_dtoa_r+0xde4>
  404128:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40412a:	2b00      	cmp	r3, #0
  40412c:	f340 83bf 	ble.w	4048ae <_dtoa_r+0xdfe>
  404130:	930a      	str	r3, [sp, #40]	; 0x28
  404132:	f8dd b010 	ldr.w	fp, [sp, #16]
  404136:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404138:	465d      	mov	r5, fp
  40413a:	e002      	b.n	404142 <_dtoa_r+0x692>
  40413c:	f000 ffe6 	bl	40510c <__multadd>
  404140:	4681      	mov	r9, r0
  404142:	4641      	mov	r1, r8
  404144:	4648      	mov	r0, r9
  404146:	f7ff fc1d 	bl	403984 <quorem>
  40414a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40414e:	f805 ab01 	strb.w	sl, [r5], #1
  404152:	eba5 030b 	sub.w	r3, r5, fp
  404156:	42bb      	cmp	r3, r7
  404158:	f04f 020a 	mov.w	r2, #10
  40415c:	f04f 0300 	mov.w	r3, #0
  404160:	4649      	mov	r1, r9
  404162:	4620      	mov	r0, r4
  404164:	dbea      	blt.n	40413c <_dtoa_r+0x68c>
  404166:	9b04      	ldr	r3, [sp, #16]
  404168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40416a:	2a01      	cmp	r2, #1
  40416c:	bfac      	ite	ge
  40416e:	189b      	addge	r3, r3, r2
  404170:	3301      	addlt	r3, #1
  404172:	461d      	mov	r5, r3
  404174:	f04f 0b00 	mov.w	fp, #0
  404178:	4649      	mov	r1, r9
  40417a:	2201      	movs	r2, #1
  40417c:	4620      	mov	r0, r4
  40417e:	f001 f941 	bl	405404 <__lshift>
  404182:	4641      	mov	r1, r8
  404184:	4681      	mov	r9, r0
  404186:	f001 f98f 	bl	4054a8 <__mcmp>
  40418a:	2800      	cmp	r0, #0
  40418c:	f340 823d 	ble.w	40460a <_dtoa_r+0xb5a>
  404190:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  404194:	9904      	ldr	r1, [sp, #16]
  404196:	1e6b      	subs	r3, r5, #1
  404198:	e004      	b.n	4041a4 <_dtoa_r+0x6f4>
  40419a:	428b      	cmp	r3, r1
  40419c:	f000 81ae 	beq.w	4044fc <_dtoa_r+0xa4c>
  4041a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4041a4:	2a39      	cmp	r2, #57	; 0x39
  4041a6:	f103 0501 	add.w	r5, r3, #1
  4041aa:	d0f6      	beq.n	40419a <_dtoa_r+0x6ea>
  4041ac:	3201      	adds	r2, #1
  4041ae:	701a      	strb	r2, [r3, #0]
  4041b0:	4641      	mov	r1, r8
  4041b2:	4620      	mov	r0, r4
  4041b4:	f000 ffa0 	bl	4050f8 <_Bfree>
  4041b8:	2e00      	cmp	r6, #0
  4041ba:	f43f ae3d 	beq.w	403e38 <_dtoa_r+0x388>
  4041be:	f1bb 0f00 	cmp.w	fp, #0
  4041c2:	d005      	beq.n	4041d0 <_dtoa_r+0x720>
  4041c4:	45b3      	cmp	fp, r6
  4041c6:	d003      	beq.n	4041d0 <_dtoa_r+0x720>
  4041c8:	4659      	mov	r1, fp
  4041ca:	4620      	mov	r0, r4
  4041cc:	f000 ff94 	bl	4050f8 <_Bfree>
  4041d0:	4631      	mov	r1, r6
  4041d2:	4620      	mov	r0, r4
  4041d4:	f000 ff90 	bl	4050f8 <_Bfree>
  4041d8:	e62e      	b.n	403e38 <_dtoa_r+0x388>
  4041da:	2300      	movs	r3, #0
  4041dc:	930b      	str	r3, [sp, #44]	; 0x2c
  4041de:	9b02      	ldr	r3, [sp, #8]
  4041e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4041e2:	4413      	add	r3, r2
  4041e4:	930f      	str	r3, [sp, #60]	; 0x3c
  4041e6:	3301      	adds	r3, #1
  4041e8:	2b01      	cmp	r3, #1
  4041ea:	461f      	mov	r7, r3
  4041ec:	461e      	mov	r6, r3
  4041ee:	930a      	str	r3, [sp, #40]	; 0x28
  4041f0:	bfb8      	it	lt
  4041f2:	2701      	movlt	r7, #1
  4041f4:	2100      	movs	r1, #0
  4041f6:	2f17      	cmp	r7, #23
  4041f8:	6461      	str	r1, [r4, #68]	; 0x44
  4041fa:	d90a      	bls.n	404212 <_dtoa_r+0x762>
  4041fc:	2201      	movs	r2, #1
  4041fe:	2304      	movs	r3, #4
  404200:	005b      	lsls	r3, r3, #1
  404202:	f103 0014 	add.w	r0, r3, #20
  404206:	4287      	cmp	r7, r0
  404208:	4611      	mov	r1, r2
  40420a:	f102 0201 	add.w	r2, r2, #1
  40420e:	d2f7      	bcs.n	404200 <_dtoa_r+0x750>
  404210:	6461      	str	r1, [r4, #68]	; 0x44
  404212:	4620      	mov	r0, r4
  404214:	f000 ff4a 	bl	4050ac <_Balloc>
  404218:	2e0e      	cmp	r6, #14
  40421a:	9004      	str	r0, [sp, #16]
  40421c:	6420      	str	r0, [r4, #64]	; 0x40
  40421e:	f63f ad41 	bhi.w	403ca4 <_dtoa_r+0x1f4>
  404222:	2d00      	cmp	r5, #0
  404224:	f43f ad3e 	beq.w	403ca4 <_dtoa_r+0x1f4>
  404228:	9902      	ldr	r1, [sp, #8]
  40422a:	2900      	cmp	r1, #0
  40422c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  404230:	f340 8202 	ble.w	404638 <_dtoa_r+0xb88>
  404234:	4bb8      	ldr	r3, [pc, #736]	; (404518 <_dtoa_r+0xa68>)
  404236:	f001 020f 	and.w	r2, r1, #15
  40423a:	110d      	asrs	r5, r1, #4
  40423c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404240:	06e9      	lsls	r1, r5, #27
  404242:	e9d3 6700 	ldrd	r6, r7, [r3]
  404246:	f140 81ae 	bpl.w	4045a6 <_dtoa_r+0xaf6>
  40424a:	4bb4      	ldr	r3, [pc, #720]	; (40451c <_dtoa_r+0xa6c>)
  40424c:	4650      	mov	r0, sl
  40424e:	4659      	mov	r1, fp
  404250:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404254:	f002 fa18 	bl	406688 <__aeabi_ddiv>
  404258:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40425c:	f005 050f 	and.w	r5, r5, #15
  404260:	f04f 0a03 	mov.w	sl, #3
  404264:	b18d      	cbz	r5, 40428a <_dtoa_r+0x7da>
  404266:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40451c <_dtoa_r+0xa6c>
  40426a:	07ea      	lsls	r2, r5, #31
  40426c:	d509      	bpl.n	404282 <_dtoa_r+0x7d2>
  40426e:	4630      	mov	r0, r6
  404270:	4639      	mov	r1, r7
  404272:	e9d8 2300 	ldrd	r2, r3, [r8]
  404276:	f002 f8dd 	bl	406434 <__aeabi_dmul>
  40427a:	f10a 0a01 	add.w	sl, sl, #1
  40427e:	4606      	mov	r6, r0
  404280:	460f      	mov	r7, r1
  404282:	106d      	asrs	r5, r5, #1
  404284:	f108 0808 	add.w	r8, r8, #8
  404288:	d1ef      	bne.n	40426a <_dtoa_r+0x7ba>
  40428a:	463b      	mov	r3, r7
  40428c:	4632      	mov	r2, r6
  40428e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404292:	f002 f9f9 	bl	406688 <__aeabi_ddiv>
  404296:	4607      	mov	r7, r0
  404298:	4688      	mov	r8, r1
  40429a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40429c:	b143      	cbz	r3, 4042b0 <_dtoa_r+0x800>
  40429e:	2200      	movs	r2, #0
  4042a0:	4b9f      	ldr	r3, [pc, #636]	; (404520 <_dtoa_r+0xa70>)
  4042a2:	4638      	mov	r0, r7
  4042a4:	4641      	mov	r1, r8
  4042a6:	f002 fb37 	bl	406918 <__aeabi_dcmplt>
  4042aa:	2800      	cmp	r0, #0
  4042ac:	f040 8286 	bne.w	4047bc <_dtoa_r+0xd0c>
  4042b0:	4650      	mov	r0, sl
  4042b2:	f002 f859 	bl	406368 <__aeabi_i2d>
  4042b6:	463a      	mov	r2, r7
  4042b8:	4643      	mov	r3, r8
  4042ba:	f002 f8bb 	bl	406434 <__aeabi_dmul>
  4042be:	4b99      	ldr	r3, [pc, #612]	; (404524 <_dtoa_r+0xa74>)
  4042c0:	2200      	movs	r2, #0
  4042c2:	f001 ff05 	bl	4060d0 <__adddf3>
  4042c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4042c8:	4605      	mov	r5, r0
  4042ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4042ce:	2b00      	cmp	r3, #0
  4042d0:	f000 813e 	beq.w	404550 <_dtoa_r+0xaa0>
  4042d4:	9b02      	ldr	r3, [sp, #8]
  4042d6:	9315      	str	r3, [sp, #84]	; 0x54
  4042d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4042da:	9312      	str	r3, [sp, #72]	; 0x48
  4042dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4042de:	2b00      	cmp	r3, #0
  4042e0:	f000 81fa 	beq.w	4046d8 <_dtoa_r+0xc28>
  4042e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4042e6:	4b8c      	ldr	r3, [pc, #560]	; (404518 <_dtoa_r+0xa68>)
  4042e8:	498f      	ldr	r1, [pc, #572]	; (404528 <_dtoa_r+0xa78>)
  4042ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4042ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4042f2:	2000      	movs	r0, #0
  4042f4:	f002 f9c8 	bl	406688 <__aeabi_ddiv>
  4042f8:	462a      	mov	r2, r5
  4042fa:	4633      	mov	r3, r6
  4042fc:	f001 fee6 	bl	4060cc <__aeabi_dsub>
  404300:	4682      	mov	sl, r0
  404302:	468b      	mov	fp, r1
  404304:	4638      	mov	r0, r7
  404306:	4641      	mov	r1, r8
  404308:	f002 fb44 	bl	406994 <__aeabi_d2iz>
  40430c:	4605      	mov	r5, r0
  40430e:	f002 f82b 	bl	406368 <__aeabi_i2d>
  404312:	4602      	mov	r2, r0
  404314:	460b      	mov	r3, r1
  404316:	4638      	mov	r0, r7
  404318:	4641      	mov	r1, r8
  40431a:	f001 fed7 	bl	4060cc <__aeabi_dsub>
  40431e:	3530      	adds	r5, #48	; 0x30
  404320:	fa5f f885 	uxtb.w	r8, r5
  404324:	9d04      	ldr	r5, [sp, #16]
  404326:	4606      	mov	r6, r0
  404328:	460f      	mov	r7, r1
  40432a:	f885 8000 	strb.w	r8, [r5]
  40432e:	4602      	mov	r2, r0
  404330:	460b      	mov	r3, r1
  404332:	4650      	mov	r0, sl
  404334:	4659      	mov	r1, fp
  404336:	3501      	adds	r5, #1
  404338:	f002 fb0c 	bl	406954 <__aeabi_dcmpgt>
  40433c:	2800      	cmp	r0, #0
  40433e:	d154      	bne.n	4043ea <_dtoa_r+0x93a>
  404340:	4632      	mov	r2, r6
  404342:	463b      	mov	r3, r7
  404344:	2000      	movs	r0, #0
  404346:	4976      	ldr	r1, [pc, #472]	; (404520 <_dtoa_r+0xa70>)
  404348:	f001 fec0 	bl	4060cc <__aeabi_dsub>
  40434c:	4602      	mov	r2, r0
  40434e:	460b      	mov	r3, r1
  404350:	4650      	mov	r0, sl
  404352:	4659      	mov	r1, fp
  404354:	f002 fafe 	bl	406954 <__aeabi_dcmpgt>
  404358:	2800      	cmp	r0, #0
  40435a:	f040 8270 	bne.w	40483e <_dtoa_r+0xd8e>
  40435e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404360:	2a01      	cmp	r2, #1
  404362:	f000 8111 	beq.w	404588 <_dtoa_r+0xad8>
  404366:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404368:	9a04      	ldr	r2, [sp, #16]
  40436a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40436e:	4413      	add	r3, r2
  404370:	4699      	mov	r9, r3
  404372:	e00d      	b.n	404390 <_dtoa_r+0x8e0>
  404374:	2000      	movs	r0, #0
  404376:	496a      	ldr	r1, [pc, #424]	; (404520 <_dtoa_r+0xa70>)
  404378:	f001 fea8 	bl	4060cc <__aeabi_dsub>
  40437c:	4652      	mov	r2, sl
  40437e:	465b      	mov	r3, fp
  404380:	f002 faca 	bl	406918 <__aeabi_dcmplt>
  404384:	2800      	cmp	r0, #0
  404386:	f040 8258 	bne.w	40483a <_dtoa_r+0xd8a>
  40438a:	454d      	cmp	r5, r9
  40438c:	f000 80fa 	beq.w	404584 <_dtoa_r+0xad4>
  404390:	4650      	mov	r0, sl
  404392:	4659      	mov	r1, fp
  404394:	2200      	movs	r2, #0
  404396:	4b65      	ldr	r3, [pc, #404]	; (40452c <_dtoa_r+0xa7c>)
  404398:	f002 f84c 	bl	406434 <__aeabi_dmul>
  40439c:	2200      	movs	r2, #0
  40439e:	4b63      	ldr	r3, [pc, #396]	; (40452c <_dtoa_r+0xa7c>)
  4043a0:	4682      	mov	sl, r0
  4043a2:	468b      	mov	fp, r1
  4043a4:	4630      	mov	r0, r6
  4043a6:	4639      	mov	r1, r7
  4043a8:	f002 f844 	bl	406434 <__aeabi_dmul>
  4043ac:	460f      	mov	r7, r1
  4043ae:	4606      	mov	r6, r0
  4043b0:	f002 faf0 	bl	406994 <__aeabi_d2iz>
  4043b4:	4680      	mov	r8, r0
  4043b6:	f001 ffd7 	bl	406368 <__aeabi_i2d>
  4043ba:	4602      	mov	r2, r0
  4043bc:	460b      	mov	r3, r1
  4043be:	4630      	mov	r0, r6
  4043c0:	4639      	mov	r1, r7
  4043c2:	f001 fe83 	bl	4060cc <__aeabi_dsub>
  4043c6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4043ca:	fa5f f888 	uxtb.w	r8, r8
  4043ce:	4652      	mov	r2, sl
  4043d0:	465b      	mov	r3, fp
  4043d2:	f805 8b01 	strb.w	r8, [r5], #1
  4043d6:	4606      	mov	r6, r0
  4043d8:	460f      	mov	r7, r1
  4043da:	f002 fa9d 	bl	406918 <__aeabi_dcmplt>
  4043de:	4632      	mov	r2, r6
  4043e0:	463b      	mov	r3, r7
  4043e2:	2800      	cmp	r0, #0
  4043e4:	d0c6      	beq.n	404374 <_dtoa_r+0x8c4>
  4043e6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4043ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4043ec:	9302      	str	r3, [sp, #8]
  4043ee:	e523      	b.n	403e38 <_dtoa_r+0x388>
  4043f0:	2300      	movs	r3, #0
  4043f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4043f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4043f6:	2b00      	cmp	r3, #0
  4043f8:	f340 80dc 	ble.w	4045b4 <_dtoa_r+0xb04>
  4043fc:	461f      	mov	r7, r3
  4043fe:	461e      	mov	r6, r3
  404400:	930f      	str	r3, [sp, #60]	; 0x3c
  404402:	930a      	str	r3, [sp, #40]	; 0x28
  404404:	e6f6      	b.n	4041f4 <_dtoa_r+0x744>
  404406:	2301      	movs	r3, #1
  404408:	930b      	str	r3, [sp, #44]	; 0x2c
  40440a:	e7f3      	b.n	4043f4 <_dtoa_r+0x944>
  40440c:	f1ba 0f00 	cmp.w	sl, #0
  404410:	f47f ada8 	bne.w	403f64 <_dtoa_r+0x4b4>
  404414:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404418:	2b00      	cmp	r3, #0
  40441a:	f47f adba 	bne.w	403f92 <_dtoa_r+0x4e2>
  40441e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  404422:	0d3f      	lsrs	r7, r7, #20
  404424:	053f      	lsls	r7, r7, #20
  404426:	2f00      	cmp	r7, #0
  404428:	f000 820d 	beq.w	404846 <_dtoa_r+0xd96>
  40442c:	9b08      	ldr	r3, [sp, #32]
  40442e:	3301      	adds	r3, #1
  404430:	9308      	str	r3, [sp, #32]
  404432:	9b06      	ldr	r3, [sp, #24]
  404434:	3301      	adds	r3, #1
  404436:	9306      	str	r3, [sp, #24]
  404438:	2301      	movs	r3, #1
  40443a:	930c      	str	r3, [sp, #48]	; 0x30
  40443c:	e5ab      	b.n	403f96 <_dtoa_r+0x4e6>
  40443e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404440:	2b00      	cmp	r3, #0
  404442:	f73f ac42 	bgt.w	403cca <_dtoa_r+0x21a>
  404446:	f040 8221 	bne.w	40488c <_dtoa_r+0xddc>
  40444a:	2200      	movs	r2, #0
  40444c:	4b38      	ldr	r3, [pc, #224]	; (404530 <_dtoa_r+0xa80>)
  40444e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404452:	f001 ffef 	bl	406434 <__aeabi_dmul>
  404456:	4652      	mov	r2, sl
  404458:	465b      	mov	r3, fp
  40445a:	f002 fa71 	bl	406940 <__aeabi_dcmpge>
  40445e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  404462:	4646      	mov	r6, r8
  404464:	2800      	cmp	r0, #0
  404466:	d041      	beq.n	4044ec <_dtoa_r+0xa3c>
  404468:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40446a:	9d04      	ldr	r5, [sp, #16]
  40446c:	43db      	mvns	r3, r3
  40446e:	9302      	str	r3, [sp, #8]
  404470:	4641      	mov	r1, r8
  404472:	4620      	mov	r0, r4
  404474:	f000 fe40 	bl	4050f8 <_Bfree>
  404478:	2e00      	cmp	r6, #0
  40447a:	f43f acdd 	beq.w	403e38 <_dtoa_r+0x388>
  40447e:	e6a7      	b.n	4041d0 <_dtoa_r+0x720>
  404480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404482:	4649      	mov	r1, r9
  404484:	4620      	mov	r0, r4
  404486:	f000 ff6d 	bl	405364 <__pow5mult>
  40448a:	4681      	mov	r9, r0
  40448c:	e558      	b.n	403f40 <_dtoa_r+0x490>
  40448e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404490:	2a00      	cmp	r2, #0
  404492:	f000 8187 	beq.w	4047a4 <_dtoa_r+0xcf4>
  404496:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40449a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40449c:	9d08      	ldr	r5, [sp, #32]
  40449e:	e4f2      	b.n	403e86 <_dtoa_r+0x3d6>
  4044a0:	f1ba 0f00 	cmp.w	sl, #0
  4044a4:	f47f ad75 	bne.w	403f92 <_dtoa_r+0x4e2>
  4044a8:	e7b4      	b.n	404414 <_dtoa_r+0x964>
  4044aa:	f000 fe2f 	bl	40510c <__multadd>
  4044ae:	4647      	mov	r7, r8
  4044b0:	4606      	mov	r6, r0
  4044b2:	4683      	mov	fp, r0
  4044b4:	e5be      	b.n	404034 <_dtoa_r+0x584>
  4044b6:	4601      	mov	r1, r0
  4044b8:	4620      	mov	r0, r4
  4044ba:	9306      	str	r3, [sp, #24]
  4044bc:	f000 fe1c 	bl	4050f8 <_Bfree>
  4044c0:	2201      	movs	r2, #1
  4044c2:	9b06      	ldr	r3, [sp, #24]
  4044c4:	e5e0      	b.n	404088 <_dtoa_r+0x5d8>
  4044c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044c8:	2b02      	cmp	r3, #2
  4044ca:	f77f ad96 	ble.w	403ffa <_dtoa_r+0x54a>
  4044ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4044d0:	2b00      	cmp	r3, #0
  4044d2:	d1c9      	bne.n	404468 <_dtoa_r+0x9b8>
  4044d4:	4641      	mov	r1, r8
  4044d6:	2205      	movs	r2, #5
  4044d8:	4620      	mov	r0, r4
  4044da:	f000 fe17 	bl	40510c <__multadd>
  4044de:	4601      	mov	r1, r0
  4044e0:	4680      	mov	r8, r0
  4044e2:	4648      	mov	r0, r9
  4044e4:	f000 ffe0 	bl	4054a8 <__mcmp>
  4044e8:	2800      	cmp	r0, #0
  4044ea:	ddbd      	ble.n	404468 <_dtoa_r+0x9b8>
  4044ec:	9a02      	ldr	r2, [sp, #8]
  4044ee:	9904      	ldr	r1, [sp, #16]
  4044f0:	2331      	movs	r3, #49	; 0x31
  4044f2:	3201      	adds	r2, #1
  4044f4:	9202      	str	r2, [sp, #8]
  4044f6:	700b      	strb	r3, [r1, #0]
  4044f8:	1c4d      	adds	r5, r1, #1
  4044fa:	e7b9      	b.n	404470 <_dtoa_r+0x9c0>
  4044fc:	9a02      	ldr	r2, [sp, #8]
  4044fe:	3201      	adds	r2, #1
  404500:	9202      	str	r2, [sp, #8]
  404502:	9a04      	ldr	r2, [sp, #16]
  404504:	2331      	movs	r3, #49	; 0x31
  404506:	7013      	strb	r3, [r2, #0]
  404508:	e652      	b.n	4041b0 <_dtoa_r+0x700>
  40450a:	2301      	movs	r3, #1
  40450c:	930b      	str	r3, [sp, #44]	; 0x2c
  40450e:	e666      	b.n	4041de <_dtoa_r+0x72e>
  404510:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404514:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404516:	e48f      	b.n	403e38 <_dtoa_r+0x388>
  404518:	004074f8 	.word	0x004074f8
  40451c:	004074d0 	.word	0x004074d0
  404520:	3ff00000 	.word	0x3ff00000
  404524:	401c0000 	.word	0x401c0000
  404528:	3fe00000 	.word	0x3fe00000
  40452c:	40240000 	.word	0x40240000
  404530:	40140000 	.word	0x40140000
  404534:	4650      	mov	r0, sl
  404536:	f001 ff17 	bl	406368 <__aeabi_i2d>
  40453a:	463a      	mov	r2, r7
  40453c:	4643      	mov	r3, r8
  40453e:	f001 ff79 	bl	406434 <__aeabi_dmul>
  404542:	2200      	movs	r2, #0
  404544:	4bc1      	ldr	r3, [pc, #772]	; (40484c <_dtoa_r+0xd9c>)
  404546:	f001 fdc3 	bl	4060d0 <__adddf3>
  40454a:	4605      	mov	r5, r0
  40454c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404550:	4641      	mov	r1, r8
  404552:	2200      	movs	r2, #0
  404554:	4bbe      	ldr	r3, [pc, #760]	; (404850 <_dtoa_r+0xda0>)
  404556:	4638      	mov	r0, r7
  404558:	f001 fdb8 	bl	4060cc <__aeabi_dsub>
  40455c:	462a      	mov	r2, r5
  40455e:	4633      	mov	r3, r6
  404560:	4682      	mov	sl, r0
  404562:	468b      	mov	fp, r1
  404564:	f002 f9f6 	bl	406954 <__aeabi_dcmpgt>
  404568:	4680      	mov	r8, r0
  40456a:	2800      	cmp	r0, #0
  40456c:	f040 8110 	bne.w	404790 <_dtoa_r+0xce0>
  404570:	462a      	mov	r2, r5
  404572:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  404576:	4650      	mov	r0, sl
  404578:	4659      	mov	r1, fp
  40457a:	f002 f9cd 	bl	406918 <__aeabi_dcmplt>
  40457e:	b118      	cbz	r0, 404588 <_dtoa_r+0xad8>
  404580:	4646      	mov	r6, r8
  404582:	e771      	b.n	404468 <_dtoa_r+0x9b8>
  404584:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404588:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40458c:	f7ff bb8a 	b.w	403ca4 <_dtoa_r+0x1f4>
  404590:	9804      	ldr	r0, [sp, #16]
  404592:	f7ff babb 	b.w	403b0c <_dtoa_r+0x5c>
  404596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40459a:	970c      	str	r7, [sp, #48]	; 0x30
  40459c:	1afb      	subs	r3, r7, r3
  40459e:	441a      	add	r2, r3
  4045a0:	920d      	str	r2, [sp, #52]	; 0x34
  4045a2:	2700      	movs	r7, #0
  4045a4:	e469      	b.n	403e7a <_dtoa_r+0x3ca>
  4045a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4045aa:	f04f 0a02 	mov.w	sl, #2
  4045ae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4045b2:	e657      	b.n	404264 <_dtoa_r+0x7b4>
  4045b4:	2100      	movs	r1, #0
  4045b6:	2301      	movs	r3, #1
  4045b8:	6461      	str	r1, [r4, #68]	; 0x44
  4045ba:	4620      	mov	r0, r4
  4045bc:	9325      	str	r3, [sp, #148]	; 0x94
  4045be:	f000 fd75 	bl	4050ac <_Balloc>
  4045c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4045c4:	9004      	str	r0, [sp, #16]
  4045c6:	6420      	str	r0, [r4, #64]	; 0x40
  4045c8:	930a      	str	r3, [sp, #40]	; 0x28
  4045ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4045cc:	e629      	b.n	404222 <_dtoa_r+0x772>
  4045ce:	2a00      	cmp	r2, #0
  4045d0:	46d0      	mov	r8, sl
  4045d2:	f8cd b018 	str.w	fp, [sp, #24]
  4045d6:	469a      	mov	sl, r3
  4045d8:	dd11      	ble.n	4045fe <_dtoa_r+0xb4e>
  4045da:	4649      	mov	r1, r9
  4045dc:	2201      	movs	r2, #1
  4045de:	4620      	mov	r0, r4
  4045e0:	f000 ff10 	bl	405404 <__lshift>
  4045e4:	4641      	mov	r1, r8
  4045e6:	4681      	mov	r9, r0
  4045e8:	f000 ff5e 	bl	4054a8 <__mcmp>
  4045ec:	2800      	cmp	r0, #0
  4045ee:	f340 8146 	ble.w	40487e <_dtoa_r+0xdce>
  4045f2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4045f6:	f000 8106 	beq.w	404806 <_dtoa_r+0xd56>
  4045fa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4045fe:	46b3      	mov	fp, r6
  404600:	f887 a000 	strb.w	sl, [r7]
  404604:	1c7d      	adds	r5, r7, #1
  404606:	9e06      	ldr	r6, [sp, #24]
  404608:	e5d2      	b.n	4041b0 <_dtoa_r+0x700>
  40460a:	d104      	bne.n	404616 <_dtoa_r+0xb66>
  40460c:	f01a 0f01 	tst.w	sl, #1
  404610:	d001      	beq.n	404616 <_dtoa_r+0xb66>
  404612:	e5bd      	b.n	404190 <_dtoa_r+0x6e0>
  404614:	4615      	mov	r5, r2
  404616:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40461a:	2b30      	cmp	r3, #48	; 0x30
  40461c:	f105 32ff 	add.w	r2, r5, #4294967295
  404620:	d0f8      	beq.n	404614 <_dtoa_r+0xb64>
  404622:	e5c5      	b.n	4041b0 <_dtoa_r+0x700>
  404624:	9904      	ldr	r1, [sp, #16]
  404626:	2230      	movs	r2, #48	; 0x30
  404628:	700a      	strb	r2, [r1, #0]
  40462a:	9a02      	ldr	r2, [sp, #8]
  40462c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404630:	3201      	adds	r2, #1
  404632:	9202      	str	r2, [sp, #8]
  404634:	f7ff bbfc 	b.w	403e30 <_dtoa_r+0x380>
  404638:	f000 80bb 	beq.w	4047b2 <_dtoa_r+0xd02>
  40463c:	9b02      	ldr	r3, [sp, #8]
  40463e:	425d      	negs	r5, r3
  404640:	4b84      	ldr	r3, [pc, #528]	; (404854 <_dtoa_r+0xda4>)
  404642:	f005 020f 	and.w	r2, r5, #15
  404646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40464a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40464e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  404652:	f001 feef 	bl	406434 <__aeabi_dmul>
  404656:	112d      	asrs	r5, r5, #4
  404658:	4607      	mov	r7, r0
  40465a:	4688      	mov	r8, r1
  40465c:	f000 812c 	beq.w	4048b8 <_dtoa_r+0xe08>
  404660:	4e7d      	ldr	r6, [pc, #500]	; (404858 <_dtoa_r+0xda8>)
  404662:	f04f 0a02 	mov.w	sl, #2
  404666:	07eb      	lsls	r3, r5, #31
  404668:	d509      	bpl.n	40467e <_dtoa_r+0xbce>
  40466a:	4638      	mov	r0, r7
  40466c:	4641      	mov	r1, r8
  40466e:	e9d6 2300 	ldrd	r2, r3, [r6]
  404672:	f001 fedf 	bl	406434 <__aeabi_dmul>
  404676:	f10a 0a01 	add.w	sl, sl, #1
  40467a:	4607      	mov	r7, r0
  40467c:	4688      	mov	r8, r1
  40467e:	106d      	asrs	r5, r5, #1
  404680:	f106 0608 	add.w	r6, r6, #8
  404684:	d1ef      	bne.n	404666 <_dtoa_r+0xbb6>
  404686:	e608      	b.n	40429a <_dtoa_r+0x7ea>
  404688:	6871      	ldr	r1, [r6, #4]
  40468a:	4620      	mov	r0, r4
  40468c:	f000 fd0e 	bl	4050ac <_Balloc>
  404690:	6933      	ldr	r3, [r6, #16]
  404692:	3302      	adds	r3, #2
  404694:	009a      	lsls	r2, r3, #2
  404696:	4605      	mov	r5, r0
  404698:	f106 010c 	add.w	r1, r6, #12
  40469c:	300c      	adds	r0, #12
  40469e:	f000 fc5f 	bl	404f60 <memcpy>
  4046a2:	4629      	mov	r1, r5
  4046a4:	2201      	movs	r2, #1
  4046a6:	4620      	mov	r0, r4
  4046a8:	f000 feac 	bl	405404 <__lshift>
  4046ac:	9006      	str	r0, [sp, #24]
  4046ae:	e4b5      	b.n	40401c <_dtoa_r+0x56c>
  4046b0:	2b39      	cmp	r3, #57	; 0x39
  4046b2:	f8cd b018 	str.w	fp, [sp, #24]
  4046b6:	46d0      	mov	r8, sl
  4046b8:	f000 80a5 	beq.w	404806 <_dtoa_r+0xd56>
  4046bc:	f103 0a01 	add.w	sl, r3, #1
  4046c0:	46b3      	mov	fp, r6
  4046c2:	f887 a000 	strb.w	sl, [r7]
  4046c6:	1c7d      	adds	r5, r7, #1
  4046c8:	9e06      	ldr	r6, [sp, #24]
  4046ca:	e571      	b.n	4041b0 <_dtoa_r+0x700>
  4046cc:	465a      	mov	r2, fp
  4046ce:	46d0      	mov	r8, sl
  4046d0:	46b3      	mov	fp, r6
  4046d2:	469a      	mov	sl, r3
  4046d4:	4616      	mov	r6, r2
  4046d6:	e54f      	b.n	404178 <_dtoa_r+0x6c8>
  4046d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046da:	495e      	ldr	r1, [pc, #376]	; (404854 <_dtoa_r+0xda4>)
  4046dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4046e0:	462a      	mov	r2, r5
  4046e2:	4633      	mov	r3, r6
  4046e4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4046e8:	f001 fea4 	bl	406434 <__aeabi_dmul>
  4046ec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4046f0:	4638      	mov	r0, r7
  4046f2:	4641      	mov	r1, r8
  4046f4:	f002 f94e 	bl	406994 <__aeabi_d2iz>
  4046f8:	4605      	mov	r5, r0
  4046fa:	f001 fe35 	bl	406368 <__aeabi_i2d>
  4046fe:	460b      	mov	r3, r1
  404700:	4602      	mov	r2, r0
  404702:	4641      	mov	r1, r8
  404704:	4638      	mov	r0, r7
  404706:	f001 fce1 	bl	4060cc <__aeabi_dsub>
  40470a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40470c:	460f      	mov	r7, r1
  40470e:	9904      	ldr	r1, [sp, #16]
  404710:	3530      	adds	r5, #48	; 0x30
  404712:	2b01      	cmp	r3, #1
  404714:	700d      	strb	r5, [r1, #0]
  404716:	4606      	mov	r6, r0
  404718:	f101 0501 	add.w	r5, r1, #1
  40471c:	d026      	beq.n	40476c <_dtoa_r+0xcbc>
  40471e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404720:	9a04      	ldr	r2, [sp, #16]
  404722:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404860 <_dtoa_r+0xdb0>
  404726:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40472a:	4413      	add	r3, r2
  40472c:	f04f 0a00 	mov.w	sl, #0
  404730:	4699      	mov	r9, r3
  404732:	4652      	mov	r2, sl
  404734:	465b      	mov	r3, fp
  404736:	4630      	mov	r0, r6
  404738:	4639      	mov	r1, r7
  40473a:	f001 fe7b 	bl	406434 <__aeabi_dmul>
  40473e:	460f      	mov	r7, r1
  404740:	4606      	mov	r6, r0
  404742:	f002 f927 	bl	406994 <__aeabi_d2iz>
  404746:	4680      	mov	r8, r0
  404748:	f001 fe0e 	bl	406368 <__aeabi_i2d>
  40474c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404750:	4602      	mov	r2, r0
  404752:	460b      	mov	r3, r1
  404754:	4630      	mov	r0, r6
  404756:	4639      	mov	r1, r7
  404758:	f001 fcb8 	bl	4060cc <__aeabi_dsub>
  40475c:	f805 8b01 	strb.w	r8, [r5], #1
  404760:	454d      	cmp	r5, r9
  404762:	4606      	mov	r6, r0
  404764:	460f      	mov	r7, r1
  404766:	d1e4      	bne.n	404732 <_dtoa_r+0xc82>
  404768:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40476c:	4b3b      	ldr	r3, [pc, #236]	; (40485c <_dtoa_r+0xdac>)
  40476e:	2200      	movs	r2, #0
  404770:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404774:	f001 fcac 	bl	4060d0 <__adddf3>
  404778:	4632      	mov	r2, r6
  40477a:	463b      	mov	r3, r7
  40477c:	f002 f8cc 	bl	406918 <__aeabi_dcmplt>
  404780:	2800      	cmp	r0, #0
  404782:	d046      	beq.n	404812 <_dtoa_r+0xd62>
  404784:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404786:	9302      	str	r3, [sp, #8]
  404788:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40478c:	f7ff bb43 	b.w	403e16 <_dtoa_r+0x366>
  404790:	f04f 0800 	mov.w	r8, #0
  404794:	4646      	mov	r6, r8
  404796:	e6a9      	b.n	4044ec <_dtoa_r+0xa3c>
  404798:	9b08      	ldr	r3, [sp, #32]
  40479a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40479c:	1a9d      	subs	r5, r3, r2
  40479e:	2300      	movs	r3, #0
  4047a0:	f7ff bb71 	b.w	403e86 <_dtoa_r+0x3d6>
  4047a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4047a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4047a8:	9d08      	ldr	r5, [sp, #32]
  4047aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4047ae:	f7ff bb6a 	b.w	403e86 <_dtoa_r+0x3d6>
  4047b2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4047b6:	f04f 0a02 	mov.w	sl, #2
  4047ba:	e56e      	b.n	40429a <_dtoa_r+0x7ea>
  4047bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047be:	2b00      	cmp	r3, #0
  4047c0:	f43f aeb8 	beq.w	404534 <_dtoa_r+0xa84>
  4047c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4047c6:	2b00      	cmp	r3, #0
  4047c8:	f77f aede 	ble.w	404588 <_dtoa_r+0xad8>
  4047cc:	2200      	movs	r2, #0
  4047ce:	4b24      	ldr	r3, [pc, #144]	; (404860 <_dtoa_r+0xdb0>)
  4047d0:	4638      	mov	r0, r7
  4047d2:	4641      	mov	r1, r8
  4047d4:	f001 fe2e 	bl	406434 <__aeabi_dmul>
  4047d8:	4607      	mov	r7, r0
  4047da:	4688      	mov	r8, r1
  4047dc:	f10a 0001 	add.w	r0, sl, #1
  4047e0:	f001 fdc2 	bl	406368 <__aeabi_i2d>
  4047e4:	463a      	mov	r2, r7
  4047e6:	4643      	mov	r3, r8
  4047e8:	f001 fe24 	bl	406434 <__aeabi_dmul>
  4047ec:	2200      	movs	r2, #0
  4047ee:	4b17      	ldr	r3, [pc, #92]	; (40484c <_dtoa_r+0xd9c>)
  4047f0:	f001 fc6e 	bl	4060d0 <__adddf3>
  4047f4:	9a02      	ldr	r2, [sp, #8]
  4047f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4047f8:	9312      	str	r3, [sp, #72]	; 0x48
  4047fa:	3a01      	subs	r2, #1
  4047fc:	4605      	mov	r5, r0
  4047fe:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404802:	9215      	str	r2, [sp, #84]	; 0x54
  404804:	e56a      	b.n	4042dc <_dtoa_r+0x82c>
  404806:	2239      	movs	r2, #57	; 0x39
  404808:	46b3      	mov	fp, r6
  40480a:	703a      	strb	r2, [r7, #0]
  40480c:	9e06      	ldr	r6, [sp, #24]
  40480e:	1c7d      	adds	r5, r7, #1
  404810:	e4c0      	b.n	404194 <_dtoa_r+0x6e4>
  404812:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404816:	2000      	movs	r0, #0
  404818:	4910      	ldr	r1, [pc, #64]	; (40485c <_dtoa_r+0xdac>)
  40481a:	f001 fc57 	bl	4060cc <__aeabi_dsub>
  40481e:	4632      	mov	r2, r6
  404820:	463b      	mov	r3, r7
  404822:	f002 f897 	bl	406954 <__aeabi_dcmpgt>
  404826:	b908      	cbnz	r0, 40482c <_dtoa_r+0xd7c>
  404828:	e6ae      	b.n	404588 <_dtoa_r+0xad8>
  40482a:	4615      	mov	r5, r2
  40482c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404830:	2b30      	cmp	r3, #48	; 0x30
  404832:	f105 32ff 	add.w	r2, r5, #4294967295
  404836:	d0f8      	beq.n	40482a <_dtoa_r+0xd7a>
  404838:	e5d7      	b.n	4043ea <_dtoa_r+0x93a>
  40483a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40483e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404840:	9302      	str	r3, [sp, #8]
  404842:	f7ff bae8 	b.w	403e16 <_dtoa_r+0x366>
  404846:	970c      	str	r7, [sp, #48]	; 0x30
  404848:	f7ff bba5 	b.w	403f96 <_dtoa_r+0x4e6>
  40484c:	401c0000 	.word	0x401c0000
  404850:	40140000 	.word	0x40140000
  404854:	004074f8 	.word	0x004074f8
  404858:	004074d0 	.word	0x004074d0
  40485c:	3fe00000 	.word	0x3fe00000
  404860:	40240000 	.word	0x40240000
  404864:	2b39      	cmp	r3, #57	; 0x39
  404866:	f8cd b018 	str.w	fp, [sp, #24]
  40486a:	46d0      	mov	r8, sl
  40486c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404870:	469a      	mov	sl, r3
  404872:	d0c8      	beq.n	404806 <_dtoa_r+0xd56>
  404874:	f1bb 0f00 	cmp.w	fp, #0
  404878:	f73f aebf 	bgt.w	4045fa <_dtoa_r+0xb4a>
  40487c:	e6bf      	b.n	4045fe <_dtoa_r+0xb4e>
  40487e:	f47f aebe 	bne.w	4045fe <_dtoa_r+0xb4e>
  404882:	f01a 0f01 	tst.w	sl, #1
  404886:	f43f aeba 	beq.w	4045fe <_dtoa_r+0xb4e>
  40488a:	e6b2      	b.n	4045f2 <_dtoa_r+0xb42>
  40488c:	f04f 0800 	mov.w	r8, #0
  404890:	4646      	mov	r6, r8
  404892:	e5e9      	b.n	404468 <_dtoa_r+0x9b8>
  404894:	4631      	mov	r1, r6
  404896:	2300      	movs	r3, #0
  404898:	220a      	movs	r2, #10
  40489a:	4620      	mov	r0, r4
  40489c:	f000 fc36 	bl	40510c <__multadd>
  4048a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4048a2:	2b00      	cmp	r3, #0
  4048a4:	4606      	mov	r6, r0
  4048a6:	dd0a      	ble.n	4048be <_dtoa_r+0xe0e>
  4048a8:	930a      	str	r3, [sp, #40]	; 0x28
  4048aa:	f7ff bbaa 	b.w	404002 <_dtoa_r+0x552>
  4048ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048b0:	2b02      	cmp	r3, #2
  4048b2:	dc23      	bgt.n	4048fc <_dtoa_r+0xe4c>
  4048b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4048b6:	e43b      	b.n	404130 <_dtoa_r+0x680>
  4048b8:	f04f 0a02 	mov.w	sl, #2
  4048bc:	e4ed      	b.n	40429a <_dtoa_r+0x7ea>
  4048be:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048c0:	2b02      	cmp	r3, #2
  4048c2:	dc1b      	bgt.n	4048fc <_dtoa_r+0xe4c>
  4048c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4048c6:	e7ef      	b.n	4048a8 <_dtoa_r+0xdf8>
  4048c8:	2500      	movs	r5, #0
  4048ca:	6465      	str	r5, [r4, #68]	; 0x44
  4048cc:	4629      	mov	r1, r5
  4048ce:	4620      	mov	r0, r4
  4048d0:	f000 fbec 	bl	4050ac <_Balloc>
  4048d4:	f04f 33ff 	mov.w	r3, #4294967295
  4048d8:	930a      	str	r3, [sp, #40]	; 0x28
  4048da:	930f      	str	r3, [sp, #60]	; 0x3c
  4048dc:	2301      	movs	r3, #1
  4048de:	9004      	str	r0, [sp, #16]
  4048e0:	9525      	str	r5, [sp, #148]	; 0x94
  4048e2:	6420      	str	r0, [r4, #64]	; 0x40
  4048e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4048e6:	f7ff b9dd 	b.w	403ca4 <_dtoa_r+0x1f4>
  4048ea:	2501      	movs	r5, #1
  4048ec:	f7ff b9a5 	b.w	403c3a <_dtoa_r+0x18a>
  4048f0:	f43f ab69 	beq.w	403fc6 <_dtoa_r+0x516>
  4048f4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4048f8:	f7ff bbf9 	b.w	4040ee <_dtoa_r+0x63e>
  4048fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4048fe:	930a      	str	r3, [sp, #40]	; 0x28
  404900:	e5e5      	b.n	4044ce <_dtoa_r+0xa1e>
  404902:	bf00      	nop

00404904 <__libc_fini_array>:
  404904:	b538      	push	{r3, r4, r5, lr}
  404906:	4c0a      	ldr	r4, [pc, #40]	; (404930 <__libc_fini_array+0x2c>)
  404908:	4d0a      	ldr	r5, [pc, #40]	; (404934 <__libc_fini_array+0x30>)
  40490a:	1b64      	subs	r4, r4, r5
  40490c:	10a4      	asrs	r4, r4, #2
  40490e:	d00a      	beq.n	404926 <__libc_fini_array+0x22>
  404910:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404914:	3b01      	subs	r3, #1
  404916:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40491a:	3c01      	subs	r4, #1
  40491c:	f855 3904 	ldr.w	r3, [r5], #-4
  404920:	4798      	blx	r3
  404922:	2c00      	cmp	r4, #0
  404924:	d1f9      	bne.n	40491a <__libc_fini_array+0x16>
  404926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40492a:	f002 bee3 	b.w	4076f4 <_fini>
  40492e:	bf00      	nop
  404930:	00407704 	.word	0x00407704
  404934:	00407700 	.word	0x00407700

00404938 <_localeconv_r>:
  404938:	4a04      	ldr	r2, [pc, #16]	; (40494c <_localeconv_r+0x14>)
  40493a:	4b05      	ldr	r3, [pc, #20]	; (404950 <_localeconv_r+0x18>)
  40493c:	6812      	ldr	r2, [r2, #0]
  40493e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404940:	2800      	cmp	r0, #0
  404942:	bf08      	it	eq
  404944:	4618      	moveq	r0, r3
  404946:	30f0      	adds	r0, #240	; 0xf0
  404948:	4770      	bx	lr
  40494a:	bf00      	nop
  40494c:	20400020 	.word	0x20400020
  404950:	20400864 	.word	0x20400864

00404954 <__retarget_lock_acquire_recursive>:
  404954:	4770      	bx	lr
  404956:	bf00      	nop

00404958 <__retarget_lock_release_recursive>:
  404958:	4770      	bx	lr
  40495a:	bf00      	nop

0040495c <_malloc_r>:
  40495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404960:	f101 060b 	add.w	r6, r1, #11
  404964:	2e16      	cmp	r6, #22
  404966:	b083      	sub	sp, #12
  404968:	4605      	mov	r5, r0
  40496a:	f240 809e 	bls.w	404aaa <_malloc_r+0x14e>
  40496e:	f036 0607 	bics.w	r6, r6, #7
  404972:	f100 80bd 	bmi.w	404af0 <_malloc_r+0x194>
  404976:	42b1      	cmp	r1, r6
  404978:	f200 80ba 	bhi.w	404af0 <_malloc_r+0x194>
  40497c:	f000 fb8a 	bl	405094 <__malloc_lock>
  404980:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404984:	f0c0 8293 	bcc.w	404eae <_malloc_r+0x552>
  404988:	0a73      	lsrs	r3, r6, #9
  40498a:	f000 80b8 	beq.w	404afe <_malloc_r+0x1a2>
  40498e:	2b04      	cmp	r3, #4
  404990:	f200 8179 	bhi.w	404c86 <_malloc_r+0x32a>
  404994:	09b3      	lsrs	r3, r6, #6
  404996:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40499a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40499e:	00c3      	lsls	r3, r0, #3
  4049a0:	4fbf      	ldr	r7, [pc, #764]	; (404ca0 <_malloc_r+0x344>)
  4049a2:	443b      	add	r3, r7
  4049a4:	f1a3 0108 	sub.w	r1, r3, #8
  4049a8:	685c      	ldr	r4, [r3, #4]
  4049aa:	42a1      	cmp	r1, r4
  4049ac:	d106      	bne.n	4049bc <_malloc_r+0x60>
  4049ae:	e00c      	b.n	4049ca <_malloc_r+0x6e>
  4049b0:	2a00      	cmp	r2, #0
  4049b2:	f280 80aa 	bge.w	404b0a <_malloc_r+0x1ae>
  4049b6:	68e4      	ldr	r4, [r4, #12]
  4049b8:	42a1      	cmp	r1, r4
  4049ba:	d006      	beq.n	4049ca <_malloc_r+0x6e>
  4049bc:	6863      	ldr	r3, [r4, #4]
  4049be:	f023 0303 	bic.w	r3, r3, #3
  4049c2:	1b9a      	subs	r2, r3, r6
  4049c4:	2a0f      	cmp	r2, #15
  4049c6:	ddf3      	ble.n	4049b0 <_malloc_r+0x54>
  4049c8:	4670      	mov	r0, lr
  4049ca:	693c      	ldr	r4, [r7, #16]
  4049cc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404cb4 <_malloc_r+0x358>
  4049d0:	4574      	cmp	r4, lr
  4049d2:	f000 81ab 	beq.w	404d2c <_malloc_r+0x3d0>
  4049d6:	6863      	ldr	r3, [r4, #4]
  4049d8:	f023 0303 	bic.w	r3, r3, #3
  4049dc:	1b9a      	subs	r2, r3, r6
  4049de:	2a0f      	cmp	r2, #15
  4049e0:	f300 8190 	bgt.w	404d04 <_malloc_r+0x3a8>
  4049e4:	2a00      	cmp	r2, #0
  4049e6:	f8c7 e014 	str.w	lr, [r7, #20]
  4049ea:	f8c7 e010 	str.w	lr, [r7, #16]
  4049ee:	f280 809d 	bge.w	404b2c <_malloc_r+0x1d0>
  4049f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4049f6:	f080 8161 	bcs.w	404cbc <_malloc_r+0x360>
  4049fa:	08db      	lsrs	r3, r3, #3
  4049fc:	f103 0c01 	add.w	ip, r3, #1
  404a00:	1099      	asrs	r1, r3, #2
  404a02:	687a      	ldr	r2, [r7, #4]
  404a04:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404a08:	f8c4 8008 	str.w	r8, [r4, #8]
  404a0c:	2301      	movs	r3, #1
  404a0e:	408b      	lsls	r3, r1
  404a10:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404a14:	4313      	orrs	r3, r2
  404a16:	3908      	subs	r1, #8
  404a18:	60e1      	str	r1, [r4, #12]
  404a1a:	607b      	str	r3, [r7, #4]
  404a1c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404a20:	f8c8 400c 	str.w	r4, [r8, #12]
  404a24:	1082      	asrs	r2, r0, #2
  404a26:	2401      	movs	r4, #1
  404a28:	4094      	lsls	r4, r2
  404a2a:	429c      	cmp	r4, r3
  404a2c:	f200 808b 	bhi.w	404b46 <_malloc_r+0x1ea>
  404a30:	421c      	tst	r4, r3
  404a32:	d106      	bne.n	404a42 <_malloc_r+0xe6>
  404a34:	f020 0003 	bic.w	r0, r0, #3
  404a38:	0064      	lsls	r4, r4, #1
  404a3a:	421c      	tst	r4, r3
  404a3c:	f100 0004 	add.w	r0, r0, #4
  404a40:	d0fa      	beq.n	404a38 <_malloc_r+0xdc>
  404a42:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404a46:	46cc      	mov	ip, r9
  404a48:	4680      	mov	r8, r0
  404a4a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404a4e:	459c      	cmp	ip, r3
  404a50:	d107      	bne.n	404a62 <_malloc_r+0x106>
  404a52:	e16d      	b.n	404d30 <_malloc_r+0x3d4>
  404a54:	2a00      	cmp	r2, #0
  404a56:	f280 817b 	bge.w	404d50 <_malloc_r+0x3f4>
  404a5a:	68db      	ldr	r3, [r3, #12]
  404a5c:	459c      	cmp	ip, r3
  404a5e:	f000 8167 	beq.w	404d30 <_malloc_r+0x3d4>
  404a62:	6859      	ldr	r1, [r3, #4]
  404a64:	f021 0103 	bic.w	r1, r1, #3
  404a68:	1b8a      	subs	r2, r1, r6
  404a6a:	2a0f      	cmp	r2, #15
  404a6c:	ddf2      	ble.n	404a54 <_malloc_r+0xf8>
  404a6e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404a72:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404a76:	9300      	str	r3, [sp, #0]
  404a78:	199c      	adds	r4, r3, r6
  404a7a:	4628      	mov	r0, r5
  404a7c:	f046 0601 	orr.w	r6, r6, #1
  404a80:	f042 0501 	orr.w	r5, r2, #1
  404a84:	605e      	str	r6, [r3, #4]
  404a86:	f8c8 c00c 	str.w	ip, [r8, #12]
  404a8a:	f8cc 8008 	str.w	r8, [ip, #8]
  404a8e:	617c      	str	r4, [r7, #20]
  404a90:	613c      	str	r4, [r7, #16]
  404a92:	f8c4 e00c 	str.w	lr, [r4, #12]
  404a96:	f8c4 e008 	str.w	lr, [r4, #8]
  404a9a:	6065      	str	r5, [r4, #4]
  404a9c:	505a      	str	r2, [r3, r1]
  404a9e:	f000 faff 	bl	4050a0 <__malloc_unlock>
  404aa2:	9b00      	ldr	r3, [sp, #0]
  404aa4:	f103 0408 	add.w	r4, r3, #8
  404aa8:	e01e      	b.n	404ae8 <_malloc_r+0x18c>
  404aaa:	2910      	cmp	r1, #16
  404aac:	d820      	bhi.n	404af0 <_malloc_r+0x194>
  404aae:	f000 faf1 	bl	405094 <__malloc_lock>
  404ab2:	2610      	movs	r6, #16
  404ab4:	2318      	movs	r3, #24
  404ab6:	2002      	movs	r0, #2
  404ab8:	4f79      	ldr	r7, [pc, #484]	; (404ca0 <_malloc_r+0x344>)
  404aba:	443b      	add	r3, r7
  404abc:	f1a3 0208 	sub.w	r2, r3, #8
  404ac0:	685c      	ldr	r4, [r3, #4]
  404ac2:	4294      	cmp	r4, r2
  404ac4:	f000 813d 	beq.w	404d42 <_malloc_r+0x3e6>
  404ac8:	6863      	ldr	r3, [r4, #4]
  404aca:	68e1      	ldr	r1, [r4, #12]
  404acc:	68a6      	ldr	r6, [r4, #8]
  404ace:	f023 0303 	bic.w	r3, r3, #3
  404ad2:	4423      	add	r3, r4
  404ad4:	4628      	mov	r0, r5
  404ad6:	685a      	ldr	r2, [r3, #4]
  404ad8:	60f1      	str	r1, [r6, #12]
  404ada:	f042 0201 	orr.w	r2, r2, #1
  404ade:	608e      	str	r6, [r1, #8]
  404ae0:	605a      	str	r2, [r3, #4]
  404ae2:	f000 fadd 	bl	4050a0 <__malloc_unlock>
  404ae6:	3408      	adds	r4, #8
  404ae8:	4620      	mov	r0, r4
  404aea:	b003      	add	sp, #12
  404aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404af0:	2400      	movs	r4, #0
  404af2:	230c      	movs	r3, #12
  404af4:	4620      	mov	r0, r4
  404af6:	602b      	str	r3, [r5, #0]
  404af8:	b003      	add	sp, #12
  404afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404afe:	2040      	movs	r0, #64	; 0x40
  404b00:	f44f 7300 	mov.w	r3, #512	; 0x200
  404b04:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404b08:	e74a      	b.n	4049a0 <_malloc_r+0x44>
  404b0a:	4423      	add	r3, r4
  404b0c:	68e1      	ldr	r1, [r4, #12]
  404b0e:	685a      	ldr	r2, [r3, #4]
  404b10:	68a6      	ldr	r6, [r4, #8]
  404b12:	f042 0201 	orr.w	r2, r2, #1
  404b16:	60f1      	str	r1, [r6, #12]
  404b18:	4628      	mov	r0, r5
  404b1a:	608e      	str	r6, [r1, #8]
  404b1c:	605a      	str	r2, [r3, #4]
  404b1e:	f000 fabf 	bl	4050a0 <__malloc_unlock>
  404b22:	3408      	adds	r4, #8
  404b24:	4620      	mov	r0, r4
  404b26:	b003      	add	sp, #12
  404b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b2c:	4423      	add	r3, r4
  404b2e:	4628      	mov	r0, r5
  404b30:	685a      	ldr	r2, [r3, #4]
  404b32:	f042 0201 	orr.w	r2, r2, #1
  404b36:	605a      	str	r2, [r3, #4]
  404b38:	f000 fab2 	bl	4050a0 <__malloc_unlock>
  404b3c:	3408      	adds	r4, #8
  404b3e:	4620      	mov	r0, r4
  404b40:	b003      	add	sp, #12
  404b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b46:	68bc      	ldr	r4, [r7, #8]
  404b48:	6863      	ldr	r3, [r4, #4]
  404b4a:	f023 0803 	bic.w	r8, r3, #3
  404b4e:	45b0      	cmp	r8, r6
  404b50:	d304      	bcc.n	404b5c <_malloc_r+0x200>
  404b52:	eba8 0306 	sub.w	r3, r8, r6
  404b56:	2b0f      	cmp	r3, #15
  404b58:	f300 8085 	bgt.w	404c66 <_malloc_r+0x30a>
  404b5c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404cb8 <_malloc_r+0x35c>
  404b60:	4b50      	ldr	r3, [pc, #320]	; (404ca4 <_malloc_r+0x348>)
  404b62:	f8d9 2000 	ldr.w	r2, [r9]
  404b66:	681b      	ldr	r3, [r3, #0]
  404b68:	3201      	adds	r2, #1
  404b6a:	4433      	add	r3, r6
  404b6c:	eb04 0a08 	add.w	sl, r4, r8
  404b70:	f000 8155 	beq.w	404e1e <_malloc_r+0x4c2>
  404b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404b78:	330f      	adds	r3, #15
  404b7a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404b7e:	f02b 0b0f 	bic.w	fp, fp, #15
  404b82:	4659      	mov	r1, fp
  404b84:	4628      	mov	r0, r5
  404b86:	f000 fd8b 	bl	4056a0 <_sbrk_r>
  404b8a:	1c41      	adds	r1, r0, #1
  404b8c:	4602      	mov	r2, r0
  404b8e:	f000 80fc 	beq.w	404d8a <_malloc_r+0x42e>
  404b92:	4582      	cmp	sl, r0
  404b94:	f200 80f7 	bhi.w	404d86 <_malloc_r+0x42a>
  404b98:	4b43      	ldr	r3, [pc, #268]	; (404ca8 <_malloc_r+0x34c>)
  404b9a:	6819      	ldr	r1, [r3, #0]
  404b9c:	4459      	add	r1, fp
  404b9e:	6019      	str	r1, [r3, #0]
  404ba0:	f000 814d 	beq.w	404e3e <_malloc_r+0x4e2>
  404ba4:	f8d9 0000 	ldr.w	r0, [r9]
  404ba8:	3001      	adds	r0, #1
  404baa:	bf1b      	ittet	ne
  404bac:	eba2 0a0a 	subne.w	sl, r2, sl
  404bb0:	4451      	addne	r1, sl
  404bb2:	f8c9 2000 	streq.w	r2, [r9]
  404bb6:	6019      	strne	r1, [r3, #0]
  404bb8:	f012 0107 	ands.w	r1, r2, #7
  404bbc:	f000 8115 	beq.w	404dea <_malloc_r+0x48e>
  404bc0:	f1c1 0008 	rsb	r0, r1, #8
  404bc4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404bc8:	4402      	add	r2, r0
  404bca:	3108      	adds	r1, #8
  404bcc:	eb02 090b 	add.w	r9, r2, fp
  404bd0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404bd4:	eba1 0909 	sub.w	r9, r1, r9
  404bd8:	4649      	mov	r1, r9
  404bda:	4628      	mov	r0, r5
  404bdc:	9301      	str	r3, [sp, #4]
  404bde:	9200      	str	r2, [sp, #0]
  404be0:	f000 fd5e 	bl	4056a0 <_sbrk_r>
  404be4:	1c43      	adds	r3, r0, #1
  404be6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404bea:	f000 8143 	beq.w	404e74 <_malloc_r+0x518>
  404bee:	1a80      	subs	r0, r0, r2
  404bf0:	4448      	add	r0, r9
  404bf2:	f040 0001 	orr.w	r0, r0, #1
  404bf6:	6819      	ldr	r1, [r3, #0]
  404bf8:	60ba      	str	r2, [r7, #8]
  404bfa:	4449      	add	r1, r9
  404bfc:	42bc      	cmp	r4, r7
  404bfe:	6050      	str	r0, [r2, #4]
  404c00:	6019      	str	r1, [r3, #0]
  404c02:	d017      	beq.n	404c34 <_malloc_r+0x2d8>
  404c04:	f1b8 0f0f 	cmp.w	r8, #15
  404c08:	f240 80fb 	bls.w	404e02 <_malloc_r+0x4a6>
  404c0c:	6860      	ldr	r0, [r4, #4]
  404c0e:	f1a8 020c 	sub.w	r2, r8, #12
  404c12:	f022 0207 	bic.w	r2, r2, #7
  404c16:	eb04 0e02 	add.w	lr, r4, r2
  404c1a:	f000 0001 	and.w	r0, r0, #1
  404c1e:	f04f 0c05 	mov.w	ip, #5
  404c22:	4310      	orrs	r0, r2
  404c24:	2a0f      	cmp	r2, #15
  404c26:	6060      	str	r0, [r4, #4]
  404c28:	f8ce c004 	str.w	ip, [lr, #4]
  404c2c:	f8ce c008 	str.w	ip, [lr, #8]
  404c30:	f200 8117 	bhi.w	404e62 <_malloc_r+0x506>
  404c34:	4b1d      	ldr	r3, [pc, #116]	; (404cac <_malloc_r+0x350>)
  404c36:	68bc      	ldr	r4, [r7, #8]
  404c38:	681a      	ldr	r2, [r3, #0]
  404c3a:	4291      	cmp	r1, r2
  404c3c:	bf88      	it	hi
  404c3e:	6019      	strhi	r1, [r3, #0]
  404c40:	4b1b      	ldr	r3, [pc, #108]	; (404cb0 <_malloc_r+0x354>)
  404c42:	681a      	ldr	r2, [r3, #0]
  404c44:	4291      	cmp	r1, r2
  404c46:	6862      	ldr	r2, [r4, #4]
  404c48:	bf88      	it	hi
  404c4a:	6019      	strhi	r1, [r3, #0]
  404c4c:	f022 0203 	bic.w	r2, r2, #3
  404c50:	4296      	cmp	r6, r2
  404c52:	eba2 0306 	sub.w	r3, r2, r6
  404c56:	d801      	bhi.n	404c5c <_malloc_r+0x300>
  404c58:	2b0f      	cmp	r3, #15
  404c5a:	dc04      	bgt.n	404c66 <_malloc_r+0x30a>
  404c5c:	4628      	mov	r0, r5
  404c5e:	f000 fa1f 	bl	4050a0 <__malloc_unlock>
  404c62:	2400      	movs	r4, #0
  404c64:	e740      	b.n	404ae8 <_malloc_r+0x18c>
  404c66:	19a2      	adds	r2, r4, r6
  404c68:	f043 0301 	orr.w	r3, r3, #1
  404c6c:	f046 0601 	orr.w	r6, r6, #1
  404c70:	6066      	str	r6, [r4, #4]
  404c72:	4628      	mov	r0, r5
  404c74:	60ba      	str	r2, [r7, #8]
  404c76:	6053      	str	r3, [r2, #4]
  404c78:	f000 fa12 	bl	4050a0 <__malloc_unlock>
  404c7c:	3408      	adds	r4, #8
  404c7e:	4620      	mov	r0, r4
  404c80:	b003      	add	sp, #12
  404c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c86:	2b14      	cmp	r3, #20
  404c88:	d971      	bls.n	404d6e <_malloc_r+0x412>
  404c8a:	2b54      	cmp	r3, #84	; 0x54
  404c8c:	f200 80a3 	bhi.w	404dd6 <_malloc_r+0x47a>
  404c90:	0b33      	lsrs	r3, r6, #12
  404c92:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404c96:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404c9a:	00c3      	lsls	r3, r0, #3
  404c9c:	e680      	b.n	4049a0 <_malloc_r+0x44>
  404c9e:	bf00      	nop
  404ca0:	20400454 	.word	0x20400454
  404ca4:	20400ca8 	.word	0x20400ca8
  404ca8:	20400c78 	.word	0x20400c78
  404cac:	20400ca0 	.word	0x20400ca0
  404cb0:	20400ca4 	.word	0x20400ca4
  404cb4:	2040045c 	.word	0x2040045c
  404cb8:	2040085c 	.word	0x2040085c
  404cbc:	0a5a      	lsrs	r2, r3, #9
  404cbe:	2a04      	cmp	r2, #4
  404cc0:	d95b      	bls.n	404d7a <_malloc_r+0x41e>
  404cc2:	2a14      	cmp	r2, #20
  404cc4:	f200 80ae 	bhi.w	404e24 <_malloc_r+0x4c8>
  404cc8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404ccc:	00c9      	lsls	r1, r1, #3
  404cce:	325b      	adds	r2, #91	; 0x5b
  404cd0:	eb07 0c01 	add.w	ip, r7, r1
  404cd4:	5879      	ldr	r1, [r7, r1]
  404cd6:	f1ac 0c08 	sub.w	ip, ip, #8
  404cda:	458c      	cmp	ip, r1
  404cdc:	f000 8088 	beq.w	404df0 <_malloc_r+0x494>
  404ce0:	684a      	ldr	r2, [r1, #4]
  404ce2:	f022 0203 	bic.w	r2, r2, #3
  404ce6:	4293      	cmp	r3, r2
  404ce8:	d273      	bcs.n	404dd2 <_malloc_r+0x476>
  404cea:	6889      	ldr	r1, [r1, #8]
  404cec:	458c      	cmp	ip, r1
  404cee:	d1f7      	bne.n	404ce0 <_malloc_r+0x384>
  404cf0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404cf4:	687b      	ldr	r3, [r7, #4]
  404cf6:	60e2      	str	r2, [r4, #12]
  404cf8:	f8c4 c008 	str.w	ip, [r4, #8]
  404cfc:	6094      	str	r4, [r2, #8]
  404cfe:	f8cc 400c 	str.w	r4, [ip, #12]
  404d02:	e68f      	b.n	404a24 <_malloc_r+0xc8>
  404d04:	19a1      	adds	r1, r4, r6
  404d06:	f046 0c01 	orr.w	ip, r6, #1
  404d0a:	f042 0601 	orr.w	r6, r2, #1
  404d0e:	f8c4 c004 	str.w	ip, [r4, #4]
  404d12:	4628      	mov	r0, r5
  404d14:	6179      	str	r1, [r7, #20]
  404d16:	6139      	str	r1, [r7, #16]
  404d18:	f8c1 e00c 	str.w	lr, [r1, #12]
  404d1c:	f8c1 e008 	str.w	lr, [r1, #8]
  404d20:	604e      	str	r6, [r1, #4]
  404d22:	50e2      	str	r2, [r4, r3]
  404d24:	f000 f9bc 	bl	4050a0 <__malloc_unlock>
  404d28:	3408      	adds	r4, #8
  404d2a:	e6dd      	b.n	404ae8 <_malloc_r+0x18c>
  404d2c:	687b      	ldr	r3, [r7, #4]
  404d2e:	e679      	b.n	404a24 <_malloc_r+0xc8>
  404d30:	f108 0801 	add.w	r8, r8, #1
  404d34:	f018 0f03 	tst.w	r8, #3
  404d38:	f10c 0c08 	add.w	ip, ip, #8
  404d3c:	f47f ae85 	bne.w	404a4a <_malloc_r+0xee>
  404d40:	e02d      	b.n	404d9e <_malloc_r+0x442>
  404d42:	68dc      	ldr	r4, [r3, #12]
  404d44:	42a3      	cmp	r3, r4
  404d46:	bf08      	it	eq
  404d48:	3002      	addeq	r0, #2
  404d4a:	f43f ae3e 	beq.w	4049ca <_malloc_r+0x6e>
  404d4e:	e6bb      	b.n	404ac8 <_malloc_r+0x16c>
  404d50:	4419      	add	r1, r3
  404d52:	461c      	mov	r4, r3
  404d54:	684a      	ldr	r2, [r1, #4]
  404d56:	68db      	ldr	r3, [r3, #12]
  404d58:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404d5c:	f042 0201 	orr.w	r2, r2, #1
  404d60:	604a      	str	r2, [r1, #4]
  404d62:	4628      	mov	r0, r5
  404d64:	60f3      	str	r3, [r6, #12]
  404d66:	609e      	str	r6, [r3, #8]
  404d68:	f000 f99a 	bl	4050a0 <__malloc_unlock>
  404d6c:	e6bc      	b.n	404ae8 <_malloc_r+0x18c>
  404d6e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404d72:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404d76:	00c3      	lsls	r3, r0, #3
  404d78:	e612      	b.n	4049a0 <_malloc_r+0x44>
  404d7a:	099a      	lsrs	r2, r3, #6
  404d7c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404d80:	00c9      	lsls	r1, r1, #3
  404d82:	3238      	adds	r2, #56	; 0x38
  404d84:	e7a4      	b.n	404cd0 <_malloc_r+0x374>
  404d86:	42bc      	cmp	r4, r7
  404d88:	d054      	beq.n	404e34 <_malloc_r+0x4d8>
  404d8a:	68bc      	ldr	r4, [r7, #8]
  404d8c:	6862      	ldr	r2, [r4, #4]
  404d8e:	f022 0203 	bic.w	r2, r2, #3
  404d92:	e75d      	b.n	404c50 <_malloc_r+0x2f4>
  404d94:	f859 3908 	ldr.w	r3, [r9], #-8
  404d98:	4599      	cmp	r9, r3
  404d9a:	f040 8086 	bne.w	404eaa <_malloc_r+0x54e>
  404d9e:	f010 0f03 	tst.w	r0, #3
  404da2:	f100 30ff 	add.w	r0, r0, #4294967295
  404da6:	d1f5      	bne.n	404d94 <_malloc_r+0x438>
  404da8:	687b      	ldr	r3, [r7, #4]
  404daa:	ea23 0304 	bic.w	r3, r3, r4
  404dae:	607b      	str	r3, [r7, #4]
  404db0:	0064      	lsls	r4, r4, #1
  404db2:	429c      	cmp	r4, r3
  404db4:	f63f aec7 	bhi.w	404b46 <_malloc_r+0x1ea>
  404db8:	2c00      	cmp	r4, #0
  404dba:	f43f aec4 	beq.w	404b46 <_malloc_r+0x1ea>
  404dbe:	421c      	tst	r4, r3
  404dc0:	4640      	mov	r0, r8
  404dc2:	f47f ae3e 	bne.w	404a42 <_malloc_r+0xe6>
  404dc6:	0064      	lsls	r4, r4, #1
  404dc8:	421c      	tst	r4, r3
  404dca:	f100 0004 	add.w	r0, r0, #4
  404dce:	d0fa      	beq.n	404dc6 <_malloc_r+0x46a>
  404dd0:	e637      	b.n	404a42 <_malloc_r+0xe6>
  404dd2:	468c      	mov	ip, r1
  404dd4:	e78c      	b.n	404cf0 <_malloc_r+0x394>
  404dd6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404dda:	d815      	bhi.n	404e08 <_malloc_r+0x4ac>
  404ddc:	0bf3      	lsrs	r3, r6, #15
  404dde:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404de2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404de6:	00c3      	lsls	r3, r0, #3
  404de8:	e5da      	b.n	4049a0 <_malloc_r+0x44>
  404dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404dee:	e6ed      	b.n	404bcc <_malloc_r+0x270>
  404df0:	687b      	ldr	r3, [r7, #4]
  404df2:	1092      	asrs	r2, r2, #2
  404df4:	2101      	movs	r1, #1
  404df6:	fa01 f202 	lsl.w	r2, r1, r2
  404dfa:	4313      	orrs	r3, r2
  404dfc:	607b      	str	r3, [r7, #4]
  404dfe:	4662      	mov	r2, ip
  404e00:	e779      	b.n	404cf6 <_malloc_r+0x39a>
  404e02:	2301      	movs	r3, #1
  404e04:	6053      	str	r3, [r2, #4]
  404e06:	e729      	b.n	404c5c <_malloc_r+0x300>
  404e08:	f240 5254 	movw	r2, #1364	; 0x554
  404e0c:	4293      	cmp	r3, r2
  404e0e:	d822      	bhi.n	404e56 <_malloc_r+0x4fa>
  404e10:	0cb3      	lsrs	r3, r6, #18
  404e12:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404e16:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404e1a:	00c3      	lsls	r3, r0, #3
  404e1c:	e5c0      	b.n	4049a0 <_malloc_r+0x44>
  404e1e:	f103 0b10 	add.w	fp, r3, #16
  404e22:	e6ae      	b.n	404b82 <_malloc_r+0x226>
  404e24:	2a54      	cmp	r2, #84	; 0x54
  404e26:	d829      	bhi.n	404e7c <_malloc_r+0x520>
  404e28:	0b1a      	lsrs	r2, r3, #12
  404e2a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404e2e:	00c9      	lsls	r1, r1, #3
  404e30:	326e      	adds	r2, #110	; 0x6e
  404e32:	e74d      	b.n	404cd0 <_malloc_r+0x374>
  404e34:	4b20      	ldr	r3, [pc, #128]	; (404eb8 <_malloc_r+0x55c>)
  404e36:	6819      	ldr	r1, [r3, #0]
  404e38:	4459      	add	r1, fp
  404e3a:	6019      	str	r1, [r3, #0]
  404e3c:	e6b2      	b.n	404ba4 <_malloc_r+0x248>
  404e3e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404e42:	2800      	cmp	r0, #0
  404e44:	f47f aeae 	bne.w	404ba4 <_malloc_r+0x248>
  404e48:	eb08 030b 	add.w	r3, r8, fp
  404e4c:	68ba      	ldr	r2, [r7, #8]
  404e4e:	f043 0301 	orr.w	r3, r3, #1
  404e52:	6053      	str	r3, [r2, #4]
  404e54:	e6ee      	b.n	404c34 <_malloc_r+0x2d8>
  404e56:	207f      	movs	r0, #127	; 0x7f
  404e58:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404e5c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404e60:	e59e      	b.n	4049a0 <_malloc_r+0x44>
  404e62:	f104 0108 	add.w	r1, r4, #8
  404e66:	4628      	mov	r0, r5
  404e68:	9300      	str	r3, [sp, #0]
  404e6a:	f000 fe17 	bl	405a9c <_free_r>
  404e6e:	9b00      	ldr	r3, [sp, #0]
  404e70:	6819      	ldr	r1, [r3, #0]
  404e72:	e6df      	b.n	404c34 <_malloc_r+0x2d8>
  404e74:	2001      	movs	r0, #1
  404e76:	f04f 0900 	mov.w	r9, #0
  404e7a:	e6bc      	b.n	404bf6 <_malloc_r+0x29a>
  404e7c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404e80:	d805      	bhi.n	404e8e <_malloc_r+0x532>
  404e82:	0bda      	lsrs	r2, r3, #15
  404e84:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404e88:	00c9      	lsls	r1, r1, #3
  404e8a:	3277      	adds	r2, #119	; 0x77
  404e8c:	e720      	b.n	404cd0 <_malloc_r+0x374>
  404e8e:	f240 5154 	movw	r1, #1364	; 0x554
  404e92:	428a      	cmp	r2, r1
  404e94:	d805      	bhi.n	404ea2 <_malloc_r+0x546>
  404e96:	0c9a      	lsrs	r2, r3, #18
  404e98:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404e9c:	00c9      	lsls	r1, r1, #3
  404e9e:	327c      	adds	r2, #124	; 0x7c
  404ea0:	e716      	b.n	404cd0 <_malloc_r+0x374>
  404ea2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404ea6:	227e      	movs	r2, #126	; 0x7e
  404ea8:	e712      	b.n	404cd0 <_malloc_r+0x374>
  404eaa:	687b      	ldr	r3, [r7, #4]
  404eac:	e780      	b.n	404db0 <_malloc_r+0x454>
  404eae:	08f0      	lsrs	r0, r6, #3
  404eb0:	f106 0308 	add.w	r3, r6, #8
  404eb4:	e600      	b.n	404ab8 <_malloc_r+0x15c>
  404eb6:	bf00      	nop
  404eb8:	20400c78 	.word	0x20400c78
  404ebc:	00000000 	.word	0x00000000

00404ec0 <memchr>:
  404ec0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404ec4:	2a10      	cmp	r2, #16
  404ec6:	db2b      	blt.n	404f20 <memchr+0x60>
  404ec8:	f010 0f07 	tst.w	r0, #7
  404ecc:	d008      	beq.n	404ee0 <memchr+0x20>
  404ece:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ed2:	3a01      	subs	r2, #1
  404ed4:	428b      	cmp	r3, r1
  404ed6:	d02d      	beq.n	404f34 <memchr+0x74>
  404ed8:	f010 0f07 	tst.w	r0, #7
  404edc:	b342      	cbz	r2, 404f30 <memchr+0x70>
  404ede:	d1f6      	bne.n	404ece <memchr+0xe>
  404ee0:	b4f0      	push	{r4, r5, r6, r7}
  404ee2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404ee6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404eea:	f022 0407 	bic.w	r4, r2, #7
  404eee:	f07f 0700 	mvns.w	r7, #0
  404ef2:	2300      	movs	r3, #0
  404ef4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404ef8:	3c08      	subs	r4, #8
  404efa:	ea85 0501 	eor.w	r5, r5, r1
  404efe:	ea86 0601 	eor.w	r6, r6, r1
  404f02:	fa85 f547 	uadd8	r5, r5, r7
  404f06:	faa3 f587 	sel	r5, r3, r7
  404f0a:	fa86 f647 	uadd8	r6, r6, r7
  404f0e:	faa5 f687 	sel	r6, r5, r7
  404f12:	b98e      	cbnz	r6, 404f38 <memchr+0x78>
  404f14:	d1ee      	bne.n	404ef4 <memchr+0x34>
  404f16:	bcf0      	pop	{r4, r5, r6, r7}
  404f18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404f1c:	f002 0207 	and.w	r2, r2, #7
  404f20:	b132      	cbz	r2, 404f30 <memchr+0x70>
  404f22:	f810 3b01 	ldrb.w	r3, [r0], #1
  404f26:	3a01      	subs	r2, #1
  404f28:	ea83 0301 	eor.w	r3, r3, r1
  404f2c:	b113      	cbz	r3, 404f34 <memchr+0x74>
  404f2e:	d1f8      	bne.n	404f22 <memchr+0x62>
  404f30:	2000      	movs	r0, #0
  404f32:	4770      	bx	lr
  404f34:	3801      	subs	r0, #1
  404f36:	4770      	bx	lr
  404f38:	2d00      	cmp	r5, #0
  404f3a:	bf06      	itte	eq
  404f3c:	4635      	moveq	r5, r6
  404f3e:	3803      	subeq	r0, #3
  404f40:	3807      	subne	r0, #7
  404f42:	f015 0f01 	tst.w	r5, #1
  404f46:	d107      	bne.n	404f58 <memchr+0x98>
  404f48:	3001      	adds	r0, #1
  404f4a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404f4e:	bf02      	ittt	eq
  404f50:	3001      	addeq	r0, #1
  404f52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404f56:	3001      	addeq	r0, #1
  404f58:	bcf0      	pop	{r4, r5, r6, r7}
  404f5a:	3801      	subs	r0, #1
  404f5c:	4770      	bx	lr
  404f5e:	bf00      	nop

00404f60 <memcpy>:
  404f60:	4684      	mov	ip, r0
  404f62:	ea41 0300 	orr.w	r3, r1, r0
  404f66:	f013 0303 	ands.w	r3, r3, #3
  404f6a:	d16d      	bne.n	405048 <memcpy+0xe8>
  404f6c:	3a40      	subs	r2, #64	; 0x40
  404f6e:	d341      	bcc.n	404ff4 <memcpy+0x94>
  404f70:	f851 3b04 	ldr.w	r3, [r1], #4
  404f74:	f840 3b04 	str.w	r3, [r0], #4
  404f78:	f851 3b04 	ldr.w	r3, [r1], #4
  404f7c:	f840 3b04 	str.w	r3, [r0], #4
  404f80:	f851 3b04 	ldr.w	r3, [r1], #4
  404f84:	f840 3b04 	str.w	r3, [r0], #4
  404f88:	f851 3b04 	ldr.w	r3, [r1], #4
  404f8c:	f840 3b04 	str.w	r3, [r0], #4
  404f90:	f851 3b04 	ldr.w	r3, [r1], #4
  404f94:	f840 3b04 	str.w	r3, [r0], #4
  404f98:	f851 3b04 	ldr.w	r3, [r1], #4
  404f9c:	f840 3b04 	str.w	r3, [r0], #4
  404fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fa4:	f840 3b04 	str.w	r3, [r0], #4
  404fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fac:	f840 3b04 	str.w	r3, [r0], #4
  404fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fb4:	f840 3b04 	str.w	r3, [r0], #4
  404fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fbc:	f840 3b04 	str.w	r3, [r0], #4
  404fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fc4:	f840 3b04 	str.w	r3, [r0], #4
  404fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fcc:	f840 3b04 	str.w	r3, [r0], #4
  404fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fd4:	f840 3b04 	str.w	r3, [r0], #4
  404fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fdc:	f840 3b04 	str.w	r3, [r0], #4
  404fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fe4:	f840 3b04 	str.w	r3, [r0], #4
  404fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fec:	f840 3b04 	str.w	r3, [r0], #4
  404ff0:	3a40      	subs	r2, #64	; 0x40
  404ff2:	d2bd      	bcs.n	404f70 <memcpy+0x10>
  404ff4:	3230      	adds	r2, #48	; 0x30
  404ff6:	d311      	bcc.n	40501c <memcpy+0xbc>
  404ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  404ffc:	f840 3b04 	str.w	r3, [r0], #4
  405000:	f851 3b04 	ldr.w	r3, [r1], #4
  405004:	f840 3b04 	str.w	r3, [r0], #4
  405008:	f851 3b04 	ldr.w	r3, [r1], #4
  40500c:	f840 3b04 	str.w	r3, [r0], #4
  405010:	f851 3b04 	ldr.w	r3, [r1], #4
  405014:	f840 3b04 	str.w	r3, [r0], #4
  405018:	3a10      	subs	r2, #16
  40501a:	d2ed      	bcs.n	404ff8 <memcpy+0x98>
  40501c:	320c      	adds	r2, #12
  40501e:	d305      	bcc.n	40502c <memcpy+0xcc>
  405020:	f851 3b04 	ldr.w	r3, [r1], #4
  405024:	f840 3b04 	str.w	r3, [r0], #4
  405028:	3a04      	subs	r2, #4
  40502a:	d2f9      	bcs.n	405020 <memcpy+0xc0>
  40502c:	3204      	adds	r2, #4
  40502e:	d008      	beq.n	405042 <memcpy+0xe2>
  405030:	07d2      	lsls	r2, r2, #31
  405032:	bf1c      	itt	ne
  405034:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405038:	f800 3b01 	strbne.w	r3, [r0], #1
  40503c:	d301      	bcc.n	405042 <memcpy+0xe2>
  40503e:	880b      	ldrh	r3, [r1, #0]
  405040:	8003      	strh	r3, [r0, #0]
  405042:	4660      	mov	r0, ip
  405044:	4770      	bx	lr
  405046:	bf00      	nop
  405048:	2a08      	cmp	r2, #8
  40504a:	d313      	bcc.n	405074 <memcpy+0x114>
  40504c:	078b      	lsls	r3, r1, #30
  40504e:	d08d      	beq.n	404f6c <memcpy+0xc>
  405050:	f010 0303 	ands.w	r3, r0, #3
  405054:	d08a      	beq.n	404f6c <memcpy+0xc>
  405056:	f1c3 0304 	rsb	r3, r3, #4
  40505a:	1ad2      	subs	r2, r2, r3
  40505c:	07db      	lsls	r3, r3, #31
  40505e:	bf1c      	itt	ne
  405060:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405064:	f800 3b01 	strbne.w	r3, [r0], #1
  405068:	d380      	bcc.n	404f6c <memcpy+0xc>
  40506a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40506e:	f820 3b02 	strh.w	r3, [r0], #2
  405072:	e77b      	b.n	404f6c <memcpy+0xc>
  405074:	3a04      	subs	r2, #4
  405076:	d3d9      	bcc.n	40502c <memcpy+0xcc>
  405078:	3a01      	subs	r2, #1
  40507a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40507e:	f800 3b01 	strb.w	r3, [r0], #1
  405082:	d2f9      	bcs.n	405078 <memcpy+0x118>
  405084:	780b      	ldrb	r3, [r1, #0]
  405086:	7003      	strb	r3, [r0, #0]
  405088:	784b      	ldrb	r3, [r1, #1]
  40508a:	7043      	strb	r3, [r0, #1]
  40508c:	788b      	ldrb	r3, [r1, #2]
  40508e:	7083      	strb	r3, [r0, #2]
  405090:	4660      	mov	r0, ip
  405092:	4770      	bx	lr

00405094 <__malloc_lock>:
  405094:	4801      	ldr	r0, [pc, #4]	; (40509c <__malloc_lock+0x8>)
  405096:	f7ff bc5d 	b.w	404954 <__retarget_lock_acquire_recursive>
  40509a:	bf00      	nop
  40509c:	20400cbc 	.word	0x20400cbc

004050a0 <__malloc_unlock>:
  4050a0:	4801      	ldr	r0, [pc, #4]	; (4050a8 <__malloc_unlock+0x8>)
  4050a2:	f7ff bc59 	b.w	404958 <__retarget_lock_release_recursive>
  4050a6:	bf00      	nop
  4050a8:	20400cbc 	.word	0x20400cbc

004050ac <_Balloc>:
  4050ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4050ae:	b570      	push	{r4, r5, r6, lr}
  4050b0:	4605      	mov	r5, r0
  4050b2:	460c      	mov	r4, r1
  4050b4:	b14b      	cbz	r3, 4050ca <_Balloc+0x1e>
  4050b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4050ba:	b180      	cbz	r0, 4050de <_Balloc+0x32>
  4050bc:	6802      	ldr	r2, [r0, #0]
  4050be:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4050c2:	2300      	movs	r3, #0
  4050c4:	6103      	str	r3, [r0, #16]
  4050c6:	60c3      	str	r3, [r0, #12]
  4050c8:	bd70      	pop	{r4, r5, r6, pc}
  4050ca:	2221      	movs	r2, #33	; 0x21
  4050cc:	2104      	movs	r1, #4
  4050ce:	f000 fc65 	bl	40599c <_calloc_r>
  4050d2:	64e8      	str	r0, [r5, #76]	; 0x4c
  4050d4:	4603      	mov	r3, r0
  4050d6:	2800      	cmp	r0, #0
  4050d8:	d1ed      	bne.n	4050b6 <_Balloc+0xa>
  4050da:	2000      	movs	r0, #0
  4050dc:	bd70      	pop	{r4, r5, r6, pc}
  4050de:	2101      	movs	r1, #1
  4050e0:	fa01 f604 	lsl.w	r6, r1, r4
  4050e4:	1d72      	adds	r2, r6, #5
  4050e6:	4628      	mov	r0, r5
  4050e8:	0092      	lsls	r2, r2, #2
  4050ea:	f000 fc57 	bl	40599c <_calloc_r>
  4050ee:	2800      	cmp	r0, #0
  4050f0:	d0f3      	beq.n	4050da <_Balloc+0x2e>
  4050f2:	6044      	str	r4, [r0, #4]
  4050f4:	6086      	str	r6, [r0, #8]
  4050f6:	e7e4      	b.n	4050c2 <_Balloc+0x16>

004050f8 <_Bfree>:
  4050f8:	b131      	cbz	r1, 405108 <_Bfree+0x10>
  4050fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4050fc:	684a      	ldr	r2, [r1, #4]
  4050fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405102:	6008      	str	r0, [r1, #0]
  405104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405108:	4770      	bx	lr
  40510a:	bf00      	nop

0040510c <__multadd>:
  40510c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40510e:	690c      	ldr	r4, [r1, #16]
  405110:	b083      	sub	sp, #12
  405112:	460d      	mov	r5, r1
  405114:	4606      	mov	r6, r0
  405116:	f101 0e14 	add.w	lr, r1, #20
  40511a:	2700      	movs	r7, #0
  40511c:	f8de 0000 	ldr.w	r0, [lr]
  405120:	b281      	uxth	r1, r0
  405122:	fb02 3301 	mla	r3, r2, r1, r3
  405126:	0c01      	lsrs	r1, r0, #16
  405128:	0c18      	lsrs	r0, r3, #16
  40512a:	fb02 0101 	mla	r1, r2, r1, r0
  40512e:	b29b      	uxth	r3, r3
  405130:	3701      	adds	r7, #1
  405132:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  405136:	42bc      	cmp	r4, r7
  405138:	f84e 3b04 	str.w	r3, [lr], #4
  40513c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  405140:	dcec      	bgt.n	40511c <__multadd+0x10>
  405142:	b13b      	cbz	r3, 405154 <__multadd+0x48>
  405144:	68aa      	ldr	r2, [r5, #8]
  405146:	4294      	cmp	r4, r2
  405148:	da07      	bge.n	40515a <__multadd+0x4e>
  40514a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40514e:	3401      	adds	r4, #1
  405150:	6153      	str	r3, [r2, #20]
  405152:	612c      	str	r4, [r5, #16]
  405154:	4628      	mov	r0, r5
  405156:	b003      	add	sp, #12
  405158:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40515a:	6869      	ldr	r1, [r5, #4]
  40515c:	9301      	str	r3, [sp, #4]
  40515e:	3101      	adds	r1, #1
  405160:	4630      	mov	r0, r6
  405162:	f7ff ffa3 	bl	4050ac <_Balloc>
  405166:	692a      	ldr	r2, [r5, #16]
  405168:	3202      	adds	r2, #2
  40516a:	f105 010c 	add.w	r1, r5, #12
  40516e:	4607      	mov	r7, r0
  405170:	0092      	lsls	r2, r2, #2
  405172:	300c      	adds	r0, #12
  405174:	f7ff fef4 	bl	404f60 <memcpy>
  405178:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40517a:	6869      	ldr	r1, [r5, #4]
  40517c:	9b01      	ldr	r3, [sp, #4]
  40517e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405182:	6028      	str	r0, [r5, #0]
  405184:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405188:	463d      	mov	r5, r7
  40518a:	e7de      	b.n	40514a <__multadd+0x3e>

0040518c <__hi0bits>:
  40518c:	0c02      	lsrs	r2, r0, #16
  40518e:	0412      	lsls	r2, r2, #16
  405190:	4603      	mov	r3, r0
  405192:	b9b2      	cbnz	r2, 4051c2 <__hi0bits+0x36>
  405194:	0403      	lsls	r3, r0, #16
  405196:	2010      	movs	r0, #16
  405198:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40519c:	bf04      	itt	eq
  40519e:	021b      	lsleq	r3, r3, #8
  4051a0:	3008      	addeq	r0, #8
  4051a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4051a6:	bf04      	itt	eq
  4051a8:	011b      	lsleq	r3, r3, #4
  4051aa:	3004      	addeq	r0, #4
  4051ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4051b0:	bf04      	itt	eq
  4051b2:	009b      	lsleq	r3, r3, #2
  4051b4:	3002      	addeq	r0, #2
  4051b6:	2b00      	cmp	r3, #0
  4051b8:	db02      	blt.n	4051c0 <__hi0bits+0x34>
  4051ba:	005b      	lsls	r3, r3, #1
  4051bc:	d403      	bmi.n	4051c6 <__hi0bits+0x3a>
  4051be:	2020      	movs	r0, #32
  4051c0:	4770      	bx	lr
  4051c2:	2000      	movs	r0, #0
  4051c4:	e7e8      	b.n	405198 <__hi0bits+0xc>
  4051c6:	3001      	adds	r0, #1
  4051c8:	4770      	bx	lr
  4051ca:	bf00      	nop

004051cc <__lo0bits>:
  4051cc:	6803      	ldr	r3, [r0, #0]
  4051ce:	f013 0207 	ands.w	r2, r3, #7
  4051d2:	4601      	mov	r1, r0
  4051d4:	d007      	beq.n	4051e6 <__lo0bits+0x1a>
  4051d6:	07da      	lsls	r2, r3, #31
  4051d8:	d421      	bmi.n	40521e <__lo0bits+0x52>
  4051da:	0798      	lsls	r0, r3, #30
  4051dc:	d421      	bmi.n	405222 <__lo0bits+0x56>
  4051de:	089b      	lsrs	r3, r3, #2
  4051e0:	600b      	str	r3, [r1, #0]
  4051e2:	2002      	movs	r0, #2
  4051e4:	4770      	bx	lr
  4051e6:	b298      	uxth	r0, r3
  4051e8:	b198      	cbz	r0, 405212 <__lo0bits+0x46>
  4051ea:	4610      	mov	r0, r2
  4051ec:	f013 0fff 	tst.w	r3, #255	; 0xff
  4051f0:	bf04      	itt	eq
  4051f2:	0a1b      	lsreq	r3, r3, #8
  4051f4:	3008      	addeq	r0, #8
  4051f6:	071a      	lsls	r2, r3, #28
  4051f8:	bf04      	itt	eq
  4051fa:	091b      	lsreq	r3, r3, #4
  4051fc:	3004      	addeq	r0, #4
  4051fe:	079a      	lsls	r2, r3, #30
  405200:	bf04      	itt	eq
  405202:	089b      	lsreq	r3, r3, #2
  405204:	3002      	addeq	r0, #2
  405206:	07da      	lsls	r2, r3, #31
  405208:	d407      	bmi.n	40521a <__lo0bits+0x4e>
  40520a:	085b      	lsrs	r3, r3, #1
  40520c:	d104      	bne.n	405218 <__lo0bits+0x4c>
  40520e:	2020      	movs	r0, #32
  405210:	4770      	bx	lr
  405212:	0c1b      	lsrs	r3, r3, #16
  405214:	2010      	movs	r0, #16
  405216:	e7e9      	b.n	4051ec <__lo0bits+0x20>
  405218:	3001      	adds	r0, #1
  40521a:	600b      	str	r3, [r1, #0]
  40521c:	4770      	bx	lr
  40521e:	2000      	movs	r0, #0
  405220:	4770      	bx	lr
  405222:	085b      	lsrs	r3, r3, #1
  405224:	600b      	str	r3, [r1, #0]
  405226:	2001      	movs	r0, #1
  405228:	4770      	bx	lr
  40522a:	bf00      	nop

0040522c <__i2b>:
  40522c:	b510      	push	{r4, lr}
  40522e:	460c      	mov	r4, r1
  405230:	2101      	movs	r1, #1
  405232:	f7ff ff3b 	bl	4050ac <_Balloc>
  405236:	2201      	movs	r2, #1
  405238:	6144      	str	r4, [r0, #20]
  40523a:	6102      	str	r2, [r0, #16]
  40523c:	bd10      	pop	{r4, pc}
  40523e:	bf00      	nop

00405240 <__multiply>:
  405240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405244:	690c      	ldr	r4, [r1, #16]
  405246:	6915      	ldr	r5, [r2, #16]
  405248:	42ac      	cmp	r4, r5
  40524a:	b083      	sub	sp, #12
  40524c:	468b      	mov	fp, r1
  40524e:	4616      	mov	r6, r2
  405250:	da04      	bge.n	40525c <__multiply+0x1c>
  405252:	4622      	mov	r2, r4
  405254:	46b3      	mov	fp, r6
  405256:	462c      	mov	r4, r5
  405258:	460e      	mov	r6, r1
  40525a:	4615      	mov	r5, r2
  40525c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405260:	f8db 1004 	ldr.w	r1, [fp, #4]
  405264:	eb04 0805 	add.w	r8, r4, r5
  405268:	4598      	cmp	r8, r3
  40526a:	bfc8      	it	gt
  40526c:	3101      	addgt	r1, #1
  40526e:	f7ff ff1d 	bl	4050ac <_Balloc>
  405272:	f100 0914 	add.w	r9, r0, #20
  405276:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40527a:	45d1      	cmp	r9, sl
  40527c:	9000      	str	r0, [sp, #0]
  40527e:	d205      	bcs.n	40528c <__multiply+0x4c>
  405280:	464b      	mov	r3, r9
  405282:	2100      	movs	r1, #0
  405284:	f843 1b04 	str.w	r1, [r3], #4
  405288:	459a      	cmp	sl, r3
  40528a:	d8fb      	bhi.n	405284 <__multiply+0x44>
  40528c:	f106 0c14 	add.w	ip, r6, #20
  405290:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  405294:	f10b 0b14 	add.w	fp, fp, #20
  405298:	459c      	cmp	ip, r3
  40529a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40529e:	d24c      	bcs.n	40533a <__multiply+0xfa>
  4052a0:	f8cd a004 	str.w	sl, [sp, #4]
  4052a4:	469a      	mov	sl, r3
  4052a6:	f8dc 5000 	ldr.w	r5, [ip]
  4052aa:	b2af      	uxth	r7, r5
  4052ac:	b1ef      	cbz	r7, 4052ea <__multiply+0xaa>
  4052ae:	2100      	movs	r1, #0
  4052b0:	464d      	mov	r5, r9
  4052b2:	465e      	mov	r6, fp
  4052b4:	460c      	mov	r4, r1
  4052b6:	f856 2b04 	ldr.w	r2, [r6], #4
  4052ba:	6828      	ldr	r0, [r5, #0]
  4052bc:	b293      	uxth	r3, r2
  4052be:	b281      	uxth	r1, r0
  4052c0:	fb07 1303 	mla	r3, r7, r3, r1
  4052c4:	0c12      	lsrs	r2, r2, #16
  4052c6:	0c01      	lsrs	r1, r0, #16
  4052c8:	4423      	add	r3, r4
  4052ca:	fb07 1102 	mla	r1, r7, r2, r1
  4052ce:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4052d2:	b29b      	uxth	r3, r3
  4052d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4052d8:	45b6      	cmp	lr, r6
  4052da:	f845 3b04 	str.w	r3, [r5], #4
  4052de:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4052e2:	d8e8      	bhi.n	4052b6 <__multiply+0x76>
  4052e4:	602c      	str	r4, [r5, #0]
  4052e6:	f8dc 5000 	ldr.w	r5, [ip]
  4052ea:	0c2d      	lsrs	r5, r5, #16
  4052ec:	d01d      	beq.n	40532a <__multiply+0xea>
  4052ee:	f8d9 3000 	ldr.w	r3, [r9]
  4052f2:	4648      	mov	r0, r9
  4052f4:	461c      	mov	r4, r3
  4052f6:	4659      	mov	r1, fp
  4052f8:	2200      	movs	r2, #0
  4052fa:	880e      	ldrh	r6, [r1, #0]
  4052fc:	0c24      	lsrs	r4, r4, #16
  4052fe:	fb05 4406 	mla	r4, r5, r6, r4
  405302:	4422      	add	r2, r4
  405304:	b29b      	uxth	r3, r3
  405306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40530a:	f840 3b04 	str.w	r3, [r0], #4
  40530e:	f851 3b04 	ldr.w	r3, [r1], #4
  405312:	6804      	ldr	r4, [r0, #0]
  405314:	0c1b      	lsrs	r3, r3, #16
  405316:	b2a6      	uxth	r6, r4
  405318:	fb05 6303 	mla	r3, r5, r3, r6
  40531c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  405320:	458e      	cmp	lr, r1
  405322:	ea4f 4213 	mov.w	r2, r3, lsr #16
  405326:	d8e8      	bhi.n	4052fa <__multiply+0xba>
  405328:	6003      	str	r3, [r0, #0]
  40532a:	f10c 0c04 	add.w	ip, ip, #4
  40532e:	45e2      	cmp	sl, ip
  405330:	f109 0904 	add.w	r9, r9, #4
  405334:	d8b7      	bhi.n	4052a6 <__multiply+0x66>
  405336:	f8dd a004 	ldr.w	sl, [sp, #4]
  40533a:	f1b8 0f00 	cmp.w	r8, #0
  40533e:	dd0b      	ble.n	405358 <__multiply+0x118>
  405340:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  405344:	f1aa 0a04 	sub.w	sl, sl, #4
  405348:	b11b      	cbz	r3, 405352 <__multiply+0x112>
  40534a:	e005      	b.n	405358 <__multiply+0x118>
  40534c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  405350:	b913      	cbnz	r3, 405358 <__multiply+0x118>
  405352:	f1b8 0801 	subs.w	r8, r8, #1
  405356:	d1f9      	bne.n	40534c <__multiply+0x10c>
  405358:	9800      	ldr	r0, [sp, #0]
  40535a:	f8c0 8010 	str.w	r8, [r0, #16]
  40535e:	b003      	add	sp, #12
  405360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405364 <__pow5mult>:
  405364:	f012 0303 	ands.w	r3, r2, #3
  405368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40536c:	4614      	mov	r4, r2
  40536e:	4607      	mov	r7, r0
  405370:	d12e      	bne.n	4053d0 <__pow5mult+0x6c>
  405372:	460d      	mov	r5, r1
  405374:	10a4      	asrs	r4, r4, #2
  405376:	d01c      	beq.n	4053b2 <__pow5mult+0x4e>
  405378:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40537a:	b396      	cbz	r6, 4053e2 <__pow5mult+0x7e>
  40537c:	07e3      	lsls	r3, r4, #31
  40537e:	f04f 0800 	mov.w	r8, #0
  405382:	d406      	bmi.n	405392 <__pow5mult+0x2e>
  405384:	1064      	asrs	r4, r4, #1
  405386:	d014      	beq.n	4053b2 <__pow5mult+0x4e>
  405388:	6830      	ldr	r0, [r6, #0]
  40538a:	b1a8      	cbz	r0, 4053b8 <__pow5mult+0x54>
  40538c:	4606      	mov	r6, r0
  40538e:	07e3      	lsls	r3, r4, #31
  405390:	d5f8      	bpl.n	405384 <__pow5mult+0x20>
  405392:	4632      	mov	r2, r6
  405394:	4629      	mov	r1, r5
  405396:	4638      	mov	r0, r7
  405398:	f7ff ff52 	bl	405240 <__multiply>
  40539c:	b1b5      	cbz	r5, 4053cc <__pow5mult+0x68>
  40539e:	686a      	ldr	r2, [r5, #4]
  4053a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4053a2:	1064      	asrs	r4, r4, #1
  4053a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4053a8:	6029      	str	r1, [r5, #0]
  4053aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4053ae:	4605      	mov	r5, r0
  4053b0:	d1ea      	bne.n	405388 <__pow5mult+0x24>
  4053b2:	4628      	mov	r0, r5
  4053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053b8:	4632      	mov	r2, r6
  4053ba:	4631      	mov	r1, r6
  4053bc:	4638      	mov	r0, r7
  4053be:	f7ff ff3f 	bl	405240 <__multiply>
  4053c2:	6030      	str	r0, [r6, #0]
  4053c4:	f8c0 8000 	str.w	r8, [r0]
  4053c8:	4606      	mov	r6, r0
  4053ca:	e7e0      	b.n	40538e <__pow5mult+0x2a>
  4053cc:	4605      	mov	r5, r0
  4053ce:	e7d9      	b.n	405384 <__pow5mult+0x20>
  4053d0:	1e5a      	subs	r2, r3, #1
  4053d2:	4d0b      	ldr	r5, [pc, #44]	; (405400 <__pow5mult+0x9c>)
  4053d4:	2300      	movs	r3, #0
  4053d6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4053da:	f7ff fe97 	bl	40510c <__multadd>
  4053de:	4605      	mov	r5, r0
  4053e0:	e7c8      	b.n	405374 <__pow5mult+0x10>
  4053e2:	2101      	movs	r1, #1
  4053e4:	4638      	mov	r0, r7
  4053e6:	f7ff fe61 	bl	4050ac <_Balloc>
  4053ea:	f240 2171 	movw	r1, #625	; 0x271
  4053ee:	2201      	movs	r2, #1
  4053f0:	2300      	movs	r3, #0
  4053f2:	6141      	str	r1, [r0, #20]
  4053f4:	6102      	str	r2, [r0, #16]
  4053f6:	4606      	mov	r6, r0
  4053f8:	64b8      	str	r0, [r7, #72]	; 0x48
  4053fa:	6003      	str	r3, [r0, #0]
  4053fc:	e7be      	b.n	40537c <__pow5mult+0x18>
  4053fe:	bf00      	nop
  405400:	004075c0 	.word	0x004075c0

00405404 <__lshift>:
  405404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405408:	4691      	mov	r9, r2
  40540a:	690a      	ldr	r2, [r1, #16]
  40540c:	688b      	ldr	r3, [r1, #8]
  40540e:	ea4f 1469 	mov.w	r4, r9, asr #5
  405412:	eb04 0802 	add.w	r8, r4, r2
  405416:	f108 0501 	add.w	r5, r8, #1
  40541a:	429d      	cmp	r5, r3
  40541c:	460e      	mov	r6, r1
  40541e:	4607      	mov	r7, r0
  405420:	6849      	ldr	r1, [r1, #4]
  405422:	dd04      	ble.n	40542e <__lshift+0x2a>
  405424:	005b      	lsls	r3, r3, #1
  405426:	429d      	cmp	r5, r3
  405428:	f101 0101 	add.w	r1, r1, #1
  40542c:	dcfa      	bgt.n	405424 <__lshift+0x20>
  40542e:	4638      	mov	r0, r7
  405430:	f7ff fe3c 	bl	4050ac <_Balloc>
  405434:	2c00      	cmp	r4, #0
  405436:	f100 0314 	add.w	r3, r0, #20
  40543a:	dd06      	ble.n	40544a <__lshift+0x46>
  40543c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  405440:	2100      	movs	r1, #0
  405442:	f843 1b04 	str.w	r1, [r3], #4
  405446:	429a      	cmp	r2, r3
  405448:	d1fb      	bne.n	405442 <__lshift+0x3e>
  40544a:	6934      	ldr	r4, [r6, #16]
  40544c:	f106 0114 	add.w	r1, r6, #20
  405450:	f019 091f 	ands.w	r9, r9, #31
  405454:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405458:	d01d      	beq.n	405496 <__lshift+0x92>
  40545a:	f1c9 0c20 	rsb	ip, r9, #32
  40545e:	2200      	movs	r2, #0
  405460:	680c      	ldr	r4, [r1, #0]
  405462:	fa04 f409 	lsl.w	r4, r4, r9
  405466:	4314      	orrs	r4, r2
  405468:	f843 4b04 	str.w	r4, [r3], #4
  40546c:	f851 2b04 	ldr.w	r2, [r1], #4
  405470:	458e      	cmp	lr, r1
  405472:	fa22 f20c 	lsr.w	r2, r2, ip
  405476:	d8f3      	bhi.n	405460 <__lshift+0x5c>
  405478:	601a      	str	r2, [r3, #0]
  40547a:	b10a      	cbz	r2, 405480 <__lshift+0x7c>
  40547c:	f108 0502 	add.w	r5, r8, #2
  405480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405482:	6872      	ldr	r2, [r6, #4]
  405484:	3d01      	subs	r5, #1
  405486:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40548a:	6105      	str	r5, [r0, #16]
  40548c:	6031      	str	r1, [r6, #0]
  40548e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405496:	3b04      	subs	r3, #4
  405498:	f851 2b04 	ldr.w	r2, [r1], #4
  40549c:	f843 2f04 	str.w	r2, [r3, #4]!
  4054a0:	458e      	cmp	lr, r1
  4054a2:	d8f9      	bhi.n	405498 <__lshift+0x94>
  4054a4:	e7ec      	b.n	405480 <__lshift+0x7c>
  4054a6:	bf00      	nop

004054a8 <__mcmp>:
  4054a8:	b430      	push	{r4, r5}
  4054aa:	690b      	ldr	r3, [r1, #16]
  4054ac:	4605      	mov	r5, r0
  4054ae:	6900      	ldr	r0, [r0, #16]
  4054b0:	1ac0      	subs	r0, r0, r3
  4054b2:	d10f      	bne.n	4054d4 <__mcmp+0x2c>
  4054b4:	009b      	lsls	r3, r3, #2
  4054b6:	3514      	adds	r5, #20
  4054b8:	3114      	adds	r1, #20
  4054ba:	4419      	add	r1, r3
  4054bc:	442b      	add	r3, r5
  4054be:	e001      	b.n	4054c4 <__mcmp+0x1c>
  4054c0:	429d      	cmp	r5, r3
  4054c2:	d207      	bcs.n	4054d4 <__mcmp+0x2c>
  4054c4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4054c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4054cc:	4294      	cmp	r4, r2
  4054ce:	d0f7      	beq.n	4054c0 <__mcmp+0x18>
  4054d0:	d302      	bcc.n	4054d8 <__mcmp+0x30>
  4054d2:	2001      	movs	r0, #1
  4054d4:	bc30      	pop	{r4, r5}
  4054d6:	4770      	bx	lr
  4054d8:	f04f 30ff 	mov.w	r0, #4294967295
  4054dc:	e7fa      	b.n	4054d4 <__mcmp+0x2c>
  4054de:	bf00      	nop

004054e0 <__mdiff>:
  4054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054e4:	690f      	ldr	r7, [r1, #16]
  4054e6:	460e      	mov	r6, r1
  4054e8:	6911      	ldr	r1, [r2, #16]
  4054ea:	1a7f      	subs	r7, r7, r1
  4054ec:	2f00      	cmp	r7, #0
  4054ee:	4690      	mov	r8, r2
  4054f0:	d117      	bne.n	405522 <__mdiff+0x42>
  4054f2:	0089      	lsls	r1, r1, #2
  4054f4:	f106 0514 	add.w	r5, r6, #20
  4054f8:	f102 0e14 	add.w	lr, r2, #20
  4054fc:	186b      	adds	r3, r5, r1
  4054fe:	4471      	add	r1, lr
  405500:	e001      	b.n	405506 <__mdiff+0x26>
  405502:	429d      	cmp	r5, r3
  405504:	d25c      	bcs.n	4055c0 <__mdiff+0xe0>
  405506:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40550a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40550e:	42a2      	cmp	r2, r4
  405510:	d0f7      	beq.n	405502 <__mdiff+0x22>
  405512:	d25e      	bcs.n	4055d2 <__mdiff+0xf2>
  405514:	4633      	mov	r3, r6
  405516:	462c      	mov	r4, r5
  405518:	4646      	mov	r6, r8
  40551a:	4675      	mov	r5, lr
  40551c:	4698      	mov	r8, r3
  40551e:	2701      	movs	r7, #1
  405520:	e005      	b.n	40552e <__mdiff+0x4e>
  405522:	db58      	blt.n	4055d6 <__mdiff+0xf6>
  405524:	f106 0514 	add.w	r5, r6, #20
  405528:	f108 0414 	add.w	r4, r8, #20
  40552c:	2700      	movs	r7, #0
  40552e:	6871      	ldr	r1, [r6, #4]
  405530:	f7ff fdbc 	bl	4050ac <_Balloc>
  405534:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405538:	6936      	ldr	r6, [r6, #16]
  40553a:	60c7      	str	r7, [r0, #12]
  40553c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405540:	46a6      	mov	lr, r4
  405542:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405546:	f100 0414 	add.w	r4, r0, #20
  40554a:	2300      	movs	r3, #0
  40554c:	f85e 1b04 	ldr.w	r1, [lr], #4
  405550:	f855 8b04 	ldr.w	r8, [r5], #4
  405554:	b28a      	uxth	r2, r1
  405556:	fa13 f388 	uxtah	r3, r3, r8
  40555a:	0c09      	lsrs	r1, r1, #16
  40555c:	1a9a      	subs	r2, r3, r2
  40555e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405562:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405566:	b292      	uxth	r2, r2
  405568:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40556c:	45f4      	cmp	ip, lr
  40556e:	f844 2b04 	str.w	r2, [r4], #4
  405572:	ea4f 4323 	mov.w	r3, r3, asr #16
  405576:	d8e9      	bhi.n	40554c <__mdiff+0x6c>
  405578:	42af      	cmp	r7, r5
  40557a:	d917      	bls.n	4055ac <__mdiff+0xcc>
  40557c:	46a4      	mov	ip, r4
  40557e:	46ae      	mov	lr, r5
  405580:	f85e 2b04 	ldr.w	r2, [lr], #4
  405584:	fa13 f382 	uxtah	r3, r3, r2
  405588:	1419      	asrs	r1, r3, #16
  40558a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40558e:	b29b      	uxth	r3, r3
  405590:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405594:	4577      	cmp	r7, lr
  405596:	f84c 2b04 	str.w	r2, [ip], #4
  40559a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40559e:	d8ef      	bhi.n	405580 <__mdiff+0xa0>
  4055a0:	43ed      	mvns	r5, r5
  4055a2:	442f      	add	r7, r5
  4055a4:	f027 0703 	bic.w	r7, r7, #3
  4055a8:	3704      	adds	r7, #4
  4055aa:	443c      	add	r4, r7
  4055ac:	3c04      	subs	r4, #4
  4055ae:	b922      	cbnz	r2, 4055ba <__mdiff+0xda>
  4055b0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4055b4:	3e01      	subs	r6, #1
  4055b6:	2b00      	cmp	r3, #0
  4055b8:	d0fa      	beq.n	4055b0 <__mdiff+0xd0>
  4055ba:	6106      	str	r6, [r0, #16]
  4055bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055c0:	2100      	movs	r1, #0
  4055c2:	f7ff fd73 	bl	4050ac <_Balloc>
  4055c6:	2201      	movs	r2, #1
  4055c8:	2300      	movs	r3, #0
  4055ca:	6102      	str	r2, [r0, #16]
  4055cc:	6143      	str	r3, [r0, #20]
  4055ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055d2:	4674      	mov	r4, lr
  4055d4:	e7ab      	b.n	40552e <__mdiff+0x4e>
  4055d6:	4633      	mov	r3, r6
  4055d8:	f106 0414 	add.w	r4, r6, #20
  4055dc:	f102 0514 	add.w	r5, r2, #20
  4055e0:	4616      	mov	r6, r2
  4055e2:	2701      	movs	r7, #1
  4055e4:	4698      	mov	r8, r3
  4055e6:	e7a2      	b.n	40552e <__mdiff+0x4e>

004055e8 <__d2b>:
  4055e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055ec:	b082      	sub	sp, #8
  4055ee:	2101      	movs	r1, #1
  4055f0:	461c      	mov	r4, r3
  4055f2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4055f6:	4615      	mov	r5, r2
  4055f8:	9e08      	ldr	r6, [sp, #32]
  4055fa:	f7ff fd57 	bl	4050ac <_Balloc>
  4055fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405602:	4680      	mov	r8, r0
  405604:	b10f      	cbz	r7, 40560a <__d2b+0x22>
  405606:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40560a:	9401      	str	r4, [sp, #4]
  40560c:	b31d      	cbz	r5, 405656 <__d2b+0x6e>
  40560e:	a802      	add	r0, sp, #8
  405610:	f840 5d08 	str.w	r5, [r0, #-8]!
  405614:	f7ff fdda 	bl	4051cc <__lo0bits>
  405618:	2800      	cmp	r0, #0
  40561a:	d134      	bne.n	405686 <__d2b+0x9e>
  40561c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405620:	f8c8 2014 	str.w	r2, [r8, #20]
  405624:	2b00      	cmp	r3, #0
  405626:	bf0c      	ite	eq
  405628:	2101      	moveq	r1, #1
  40562a:	2102      	movne	r1, #2
  40562c:	f8c8 3018 	str.w	r3, [r8, #24]
  405630:	f8c8 1010 	str.w	r1, [r8, #16]
  405634:	b9df      	cbnz	r7, 40566e <__d2b+0x86>
  405636:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40563a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40563e:	6030      	str	r0, [r6, #0]
  405640:	6918      	ldr	r0, [r3, #16]
  405642:	f7ff fda3 	bl	40518c <__hi0bits>
  405646:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405648:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40564c:	6018      	str	r0, [r3, #0]
  40564e:	4640      	mov	r0, r8
  405650:	b002      	add	sp, #8
  405652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405656:	a801      	add	r0, sp, #4
  405658:	f7ff fdb8 	bl	4051cc <__lo0bits>
  40565c:	9b01      	ldr	r3, [sp, #4]
  40565e:	f8c8 3014 	str.w	r3, [r8, #20]
  405662:	2101      	movs	r1, #1
  405664:	3020      	adds	r0, #32
  405666:	f8c8 1010 	str.w	r1, [r8, #16]
  40566a:	2f00      	cmp	r7, #0
  40566c:	d0e3      	beq.n	405636 <__d2b+0x4e>
  40566e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405670:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405674:	4407      	add	r7, r0
  405676:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40567a:	6037      	str	r7, [r6, #0]
  40567c:	6018      	str	r0, [r3, #0]
  40567e:	4640      	mov	r0, r8
  405680:	b002      	add	sp, #8
  405682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405686:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40568a:	f1c0 0220 	rsb	r2, r0, #32
  40568e:	fa03 f202 	lsl.w	r2, r3, r2
  405692:	430a      	orrs	r2, r1
  405694:	40c3      	lsrs	r3, r0
  405696:	9301      	str	r3, [sp, #4]
  405698:	f8c8 2014 	str.w	r2, [r8, #20]
  40569c:	e7c2      	b.n	405624 <__d2b+0x3c>
  40569e:	bf00      	nop

004056a0 <_sbrk_r>:
  4056a0:	b538      	push	{r3, r4, r5, lr}
  4056a2:	4c07      	ldr	r4, [pc, #28]	; (4056c0 <_sbrk_r+0x20>)
  4056a4:	2300      	movs	r3, #0
  4056a6:	4605      	mov	r5, r0
  4056a8:	4608      	mov	r0, r1
  4056aa:	6023      	str	r3, [r4, #0]
  4056ac:	f7fc f992 	bl	4019d4 <_sbrk>
  4056b0:	1c43      	adds	r3, r0, #1
  4056b2:	d000      	beq.n	4056b6 <_sbrk_r+0x16>
  4056b4:	bd38      	pop	{r3, r4, r5, pc}
  4056b6:	6823      	ldr	r3, [r4, #0]
  4056b8:	2b00      	cmp	r3, #0
  4056ba:	d0fb      	beq.n	4056b4 <_sbrk_r+0x14>
  4056bc:	602b      	str	r3, [r5, #0]
  4056be:	bd38      	pop	{r3, r4, r5, pc}
  4056c0:	20400cd0 	.word	0x20400cd0
	...

00405700 <strlen>:
  405700:	f890 f000 	pld	[r0]
  405704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405708:	f020 0107 	bic.w	r1, r0, #7
  40570c:	f06f 0c00 	mvn.w	ip, #0
  405710:	f010 0407 	ands.w	r4, r0, #7
  405714:	f891 f020 	pld	[r1, #32]
  405718:	f040 8049 	bne.w	4057ae <strlen+0xae>
  40571c:	f04f 0400 	mov.w	r4, #0
  405720:	f06f 0007 	mvn.w	r0, #7
  405724:	e9d1 2300 	ldrd	r2, r3, [r1]
  405728:	f891 f040 	pld	[r1, #64]	; 0x40
  40572c:	f100 0008 	add.w	r0, r0, #8
  405730:	fa82 f24c 	uadd8	r2, r2, ip
  405734:	faa4 f28c 	sel	r2, r4, ip
  405738:	fa83 f34c 	uadd8	r3, r3, ip
  40573c:	faa2 f38c 	sel	r3, r2, ip
  405740:	bb4b      	cbnz	r3, 405796 <strlen+0x96>
  405742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405746:	fa82 f24c 	uadd8	r2, r2, ip
  40574a:	f100 0008 	add.w	r0, r0, #8
  40574e:	faa4 f28c 	sel	r2, r4, ip
  405752:	fa83 f34c 	uadd8	r3, r3, ip
  405756:	faa2 f38c 	sel	r3, r2, ip
  40575a:	b9e3      	cbnz	r3, 405796 <strlen+0x96>
  40575c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405760:	fa82 f24c 	uadd8	r2, r2, ip
  405764:	f100 0008 	add.w	r0, r0, #8
  405768:	faa4 f28c 	sel	r2, r4, ip
  40576c:	fa83 f34c 	uadd8	r3, r3, ip
  405770:	faa2 f38c 	sel	r3, r2, ip
  405774:	b97b      	cbnz	r3, 405796 <strlen+0x96>
  405776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40577a:	f101 0120 	add.w	r1, r1, #32
  40577e:	fa82 f24c 	uadd8	r2, r2, ip
  405782:	f100 0008 	add.w	r0, r0, #8
  405786:	faa4 f28c 	sel	r2, r4, ip
  40578a:	fa83 f34c 	uadd8	r3, r3, ip
  40578e:	faa2 f38c 	sel	r3, r2, ip
  405792:	2b00      	cmp	r3, #0
  405794:	d0c6      	beq.n	405724 <strlen+0x24>
  405796:	2a00      	cmp	r2, #0
  405798:	bf04      	itt	eq
  40579a:	3004      	addeq	r0, #4
  40579c:	461a      	moveq	r2, r3
  40579e:	ba12      	rev	r2, r2
  4057a0:	fab2 f282 	clz	r2, r2
  4057a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4057a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4057ac:	4770      	bx	lr
  4057ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4057b2:	f004 0503 	and.w	r5, r4, #3
  4057b6:	f1c4 0000 	rsb	r0, r4, #0
  4057ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4057be:	f014 0f04 	tst.w	r4, #4
  4057c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4057c6:	fa0c f505 	lsl.w	r5, ip, r5
  4057ca:	ea62 0205 	orn	r2, r2, r5
  4057ce:	bf1c      	itt	ne
  4057d0:	ea63 0305 	ornne	r3, r3, r5
  4057d4:	4662      	movne	r2, ip
  4057d6:	f04f 0400 	mov.w	r4, #0
  4057da:	e7a9      	b.n	405730 <strlen+0x30>

004057dc <__ssprint_r>:
  4057dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057e0:	6893      	ldr	r3, [r2, #8]
  4057e2:	b083      	sub	sp, #12
  4057e4:	4690      	mov	r8, r2
  4057e6:	2b00      	cmp	r3, #0
  4057e8:	d070      	beq.n	4058cc <__ssprint_r+0xf0>
  4057ea:	4682      	mov	sl, r0
  4057ec:	460c      	mov	r4, r1
  4057ee:	6817      	ldr	r7, [r2, #0]
  4057f0:	688d      	ldr	r5, [r1, #8]
  4057f2:	6808      	ldr	r0, [r1, #0]
  4057f4:	e042      	b.n	40587c <__ssprint_r+0xa0>
  4057f6:	89a3      	ldrh	r3, [r4, #12]
  4057f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4057fc:	d02e      	beq.n	40585c <__ssprint_r+0x80>
  4057fe:	6965      	ldr	r5, [r4, #20]
  405800:	6921      	ldr	r1, [r4, #16]
  405802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405806:	eba0 0b01 	sub.w	fp, r0, r1
  40580a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40580e:	f10b 0001 	add.w	r0, fp, #1
  405812:	106d      	asrs	r5, r5, #1
  405814:	4430      	add	r0, r6
  405816:	42a8      	cmp	r0, r5
  405818:	462a      	mov	r2, r5
  40581a:	bf84      	itt	hi
  40581c:	4605      	movhi	r5, r0
  40581e:	462a      	movhi	r2, r5
  405820:	055b      	lsls	r3, r3, #21
  405822:	d538      	bpl.n	405896 <__ssprint_r+0xba>
  405824:	4611      	mov	r1, r2
  405826:	4650      	mov	r0, sl
  405828:	f7ff f898 	bl	40495c <_malloc_r>
  40582c:	2800      	cmp	r0, #0
  40582e:	d03c      	beq.n	4058aa <__ssprint_r+0xce>
  405830:	465a      	mov	r2, fp
  405832:	6921      	ldr	r1, [r4, #16]
  405834:	9001      	str	r0, [sp, #4]
  405836:	f7ff fb93 	bl	404f60 <memcpy>
  40583a:	89a2      	ldrh	r2, [r4, #12]
  40583c:	9b01      	ldr	r3, [sp, #4]
  40583e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405846:	81a2      	strh	r2, [r4, #12]
  405848:	eba5 020b 	sub.w	r2, r5, fp
  40584c:	eb03 000b 	add.w	r0, r3, fp
  405850:	6165      	str	r5, [r4, #20]
  405852:	6123      	str	r3, [r4, #16]
  405854:	6020      	str	r0, [r4, #0]
  405856:	60a2      	str	r2, [r4, #8]
  405858:	4635      	mov	r5, r6
  40585a:	46b3      	mov	fp, r6
  40585c:	465a      	mov	r2, fp
  40585e:	4649      	mov	r1, r9
  405860:	f000 fa18 	bl	405c94 <memmove>
  405864:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405868:	68a2      	ldr	r2, [r4, #8]
  40586a:	6820      	ldr	r0, [r4, #0]
  40586c:	1b55      	subs	r5, r2, r5
  40586e:	4458      	add	r0, fp
  405870:	1b9e      	subs	r6, r3, r6
  405872:	60a5      	str	r5, [r4, #8]
  405874:	6020      	str	r0, [r4, #0]
  405876:	f8c8 6008 	str.w	r6, [r8, #8]
  40587a:	b33e      	cbz	r6, 4058cc <__ssprint_r+0xf0>
  40587c:	687e      	ldr	r6, [r7, #4]
  40587e:	463b      	mov	r3, r7
  405880:	3708      	adds	r7, #8
  405882:	2e00      	cmp	r6, #0
  405884:	d0fa      	beq.n	40587c <__ssprint_r+0xa0>
  405886:	42ae      	cmp	r6, r5
  405888:	f8d3 9000 	ldr.w	r9, [r3]
  40588c:	46ab      	mov	fp, r5
  40588e:	d2b2      	bcs.n	4057f6 <__ssprint_r+0x1a>
  405890:	4635      	mov	r5, r6
  405892:	46b3      	mov	fp, r6
  405894:	e7e2      	b.n	40585c <__ssprint_r+0x80>
  405896:	4650      	mov	r0, sl
  405898:	f000 fa60 	bl	405d5c <_realloc_r>
  40589c:	4603      	mov	r3, r0
  40589e:	2800      	cmp	r0, #0
  4058a0:	d1d2      	bne.n	405848 <__ssprint_r+0x6c>
  4058a2:	6921      	ldr	r1, [r4, #16]
  4058a4:	4650      	mov	r0, sl
  4058a6:	f000 f8f9 	bl	405a9c <_free_r>
  4058aa:	230c      	movs	r3, #12
  4058ac:	f8ca 3000 	str.w	r3, [sl]
  4058b0:	89a3      	ldrh	r3, [r4, #12]
  4058b2:	2200      	movs	r2, #0
  4058b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058b8:	f04f 30ff 	mov.w	r0, #4294967295
  4058bc:	81a3      	strh	r3, [r4, #12]
  4058be:	f8c8 2008 	str.w	r2, [r8, #8]
  4058c2:	f8c8 2004 	str.w	r2, [r8, #4]
  4058c6:	b003      	add	sp, #12
  4058c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058cc:	2000      	movs	r0, #0
  4058ce:	f8c8 0004 	str.w	r0, [r8, #4]
  4058d2:	b003      	add	sp, #12
  4058d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004058d8 <__register_exitproc>:
  4058d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4058dc:	4d2c      	ldr	r5, [pc, #176]	; (405990 <__register_exitproc+0xb8>)
  4058de:	4606      	mov	r6, r0
  4058e0:	6828      	ldr	r0, [r5, #0]
  4058e2:	4698      	mov	r8, r3
  4058e4:	460f      	mov	r7, r1
  4058e6:	4691      	mov	r9, r2
  4058e8:	f7ff f834 	bl	404954 <__retarget_lock_acquire_recursive>
  4058ec:	4b29      	ldr	r3, [pc, #164]	; (405994 <__register_exitproc+0xbc>)
  4058ee:	681c      	ldr	r4, [r3, #0]
  4058f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4058f4:	2b00      	cmp	r3, #0
  4058f6:	d03e      	beq.n	405976 <__register_exitproc+0x9e>
  4058f8:	685a      	ldr	r2, [r3, #4]
  4058fa:	2a1f      	cmp	r2, #31
  4058fc:	dc1c      	bgt.n	405938 <__register_exitproc+0x60>
  4058fe:	f102 0e01 	add.w	lr, r2, #1
  405902:	b176      	cbz	r6, 405922 <__register_exitproc+0x4a>
  405904:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405908:	2401      	movs	r4, #1
  40590a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40590e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405912:	4094      	lsls	r4, r2
  405914:	4320      	orrs	r0, r4
  405916:	2e02      	cmp	r6, #2
  405918:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40591c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405920:	d023      	beq.n	40596a <__register_exitproc+0x92>
  405922:	3202      	adds	r2, #2
  405924:	f8c3 e004 	str.w	lr, [r3, #4]
  405928:	6828      	ldr	r0, [r5, #0]
  40592a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40592e:	f7ff f813 	bl	404958 <__retarget_lock_release_recursive>
  405932:	2000      	movs	r0, #0
  405934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405938:	4b17      	ldr	r3, [pc, #92]	; (405998 <__register_exitproc+0xc0>)
  40593a:	b30b      	cbz	r3, 405980 <__register_exitproc+0xa8>
  40593c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405940:	f3af 8000 	nop.w
  405944:	4603      	mov	r3, r0
  405946:	b1d8      	cbz	r0, 405980 <__register_exitproc+0xa8>
  405948:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40594c:	6002      	str	r2, [r0, #0]
  40594e:	2100      	movs	r1, #0
  405950:	6041      	str	r1, [r0, #4]
  405952:	460a      	mov	r2, r1
  405954:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405958:	f04f 0e01 	mov.w	lr, #1
  40595c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405960:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405964:	2e00      	cmp	r6, #0
  405966:	d0dc      	beq.n	405922 <__register_exitproc+0x4a>
  405968:	e7cc      	b.n	405904 <__register_exitproc+0x2c>
  40596a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40596e:	430c      	orrs	r4, r1
  405970:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405974:	e7d5      	b.n	405922 <__register_exitproc+0x4a>
  405976:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40597a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40597e:	e7bb      	b.n	4058f8 <__register_exitproc+0x20>
  405980:	6828      	ldr	r0, [r5, #0]
  405982:	f7fe ffe9 	bl	404958 <__retarget_lock_release_recursive>
  405986:	f04f 30ff 	mov.w	r0, #4294967295
  40598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40598e:	bf00      	nop
  405990:	20400450 	.word	0x20400450
  405994:	00407454 	.word	0x00407454
  405998:	00000000 	.word	0x00000000

0040599c <_calloc_r>:
  40599c:	b510      	push	{r4, lr}
  40599e:	fb02 f101 	mul.w	r1, r2, r1
  4059a2:	f7fe ffdb 	bl	40495c <_malloc_r>
  4059a6:	4604      	mov	r4, r0
  4059a8:	b1d8      	cbz	r0, 4059e2 <_calloc_r+0x46>
  4059aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4059ae:	f022 0203 	bic.w	r2, r2, #3
  4059b2:	3a04      	subs	r2, #4
  4059b4:	2a24      	cmp	r2, #36	; 0x24
  4059b6:	d818      	bhi.n	4059ea <_calloc_r+0x4e>
  4059b8:	2a13      	cmp	r2, #19
  4059ba:	d914      	bls.n	4059e6 <_calloc_r+0x4a>
  4059bc:	2300      	movs	r3, #0
  4059be:	2a1b      	cmp	r2, #27
  4059c0:	6003      	str	r3, [r0, #0]
  4059c2:	6043      	str	r3, [r0, #4]
  4059c4:	d916      	bls.n	4059f4 <_calloc_r+0x58>
  4059c6:	2a24      	cmp	r2, #36	; 0x24
  4059c8:	6083      	str	r3, [r0, #8]
  4059ca:	60c3      	str	r3, [r0, #12]
  4059cc:	bf11      	iteee	ne
  4059ce:	f100 0210 	addne.w	r2, r0, #16
  4059d2:	6103      	streq	r3, [r0, #16]
  4059d4:	6143      	streq	r3, [r0, #20]
  4059d6:	f100 0218 	addeq.w	r2, r0, #24
  4059da:	2300      	movs	r3, #0
  4059dc:	6013      	str	r3, [r2, #0]
  4059de:	6053      	str	r3, [r2, #4]
  4059e0:	6093      	str	r3, [r2, #8]
  4059e2:	4620      	mov	r0, r4
  4059e4:	bd10      	pop	{r4, pc}
  4059e6:	4602      	mov	r2, r0
  4059e8:	e7f7      	b.n	4059da <_calloc_r+0x3e>
  4059ea:	2100      	movs	r1, #0
  4059ec:	f7fc fd18 	bl	402420 <memset>
  4059f0:	4620      	mov	r0, r4
  4059f2:	bd10      	pop	{r4, pc}
  4059f4:	f100 0208 	add.w	r2, r0, #8
  4059f8:	e7ef      	b.n	4059da <_calloc_r+0x3e>
  4059fa:	bf00      	nop

004059fc <_malloc_trim_r>:
  4059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4059fe:	4f24      	ldr	r7, [pc, #144]	; (405a90 <_malloc_trim_r+0x94>)
  405a00:	460c      	mov	r4, r1
  405a02:	4606      	mov	r6, r0
  405a04:	f7ff fb46 	bl	405094 <__malloc_lock>
  405a08:	68bb      	ldr	r3, [r7, #8]
  405a0a:	685d      	ldr	r5, [r3, #4]
  405a0c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405a10:	310f      	adds	r1, #15
  405a12:	f025 0503 	bic.w	r5, r5, #3
  405a16:	4429      	add	r1, r5
  405a18:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405a1c:	f021 010f 	bic.w	r1, r1, #15
  405a20:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405a24:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405a28:	db07      	blt.n	405a3a <_malloc_trim_r+0x3e>
  405a2a:	2100      	movs	r1, #0
  405a2c:	4630      	mov	r0, r6
  405a2e:	f7ff fe37 	bl	4056a0 <_sbrk_r>
  405a32:	68bb      	ldr	r3, [r7, #8]
  405a34:	442b      	add	r3, r5
  405a36:	4298      	cmp	r0, r3
  405a38:	d004      	beq.n	405a44 <_malloc_trim_r+0x48>
  405a3a:	4630      	mov	r0, r6
  405a3c:	f7ff fb30 	bl	4050a0 <__malloc_unlock>
  405a40:	2000      	movs	r0, #0
  405a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a44:	4261      	negs	r1, r4
  405a46:	4630      	mov	r0, r6
  405a48:	f7ff fe2a 	bl	4056a0 <_sbrk_r>
  405a4c:	3001      	adds	r0, #1
  405a4e:	d00d      	beq.n	405a6c <_malloc_trim_r+0x70>
  405a50:	4b10      	ldr	r3, [pc, #64]	; (405a94 <_malloc_trim_r+0x98>)
  405a52:	68ba      	ldr	r2, [r7, #8]
  405a54:	6819      	ldr	r1, [r3, #0]
  405a56:	1b2d      	subs	r5, r5, r4
  405a58:	f045 0501 	orr.w	r5, r5, #1
  405a5c:	4630      	mov	r0, r6
  405a5e:	1b09      	subs	r1, r1, r4
  405a60:	6055      	str	r5, [r2, #4]
  405a62:	6019      	str	r1, [r3, #0]
  405a64:	f7ff fb1c 	bl	4050a0 <__malloc_unlock>
  405a68:	2001      	movs	r0, #1
  405a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a6c:	2100      	movs	r1, #0
  405a6e:	4630      	mov	r0, r6
  405a70:	f7ff fe16 	bl	4056a0 <_sbrk_r>
  405a74:	68ba      	ldr	r2, [r7, #8]
  405a76:	1a83      	subs	r3, r0, r2
  405a78:	2b0f      	cmp	r3, #15
  405a7a:	ddde      	ble.n	405a3a <_malloc_trim_r+0x3e>
  405a7c:	4c06      	ldr	r4, [pc, #24]	; (405a98 <_malloc_trim_r+0x9c>)
  405a7e:	4905      	ldr	r1, [pc, #20]	; (405a94 <_malloc_trim_r+0x98>)
  405a80:	6824      	ldr	r4, [r4, #0]
  405a82:	f043 0301 	orr.w	r3, r3, #1
  405a86:	1b00      	subs	r0, r0, r4
  405a88:	6053      	str	r3, [r2, #4]
  405a8a:	6008      	str	r0, [r1, #0]
  405a8c:	e7d5      	b.n	405a3a <_malloc_trim_r+0x3e>
  405a8e:	bf00      	nop
  405a90:	20400454 	.word	0x20400454
  405a94:	20400c78 	.word	0x20400c78
  405a98:	2040085c 	.word	0x2040085c

00405a9c <_free_r>:
  405a9c:	2900      	cmp	r1, #0
  405a9e:	d044      	beq.n	405b2a <_free_r+0x8e>
  405aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405aa4:	460d      	mov	r5, r1
  405aa6:	4680      	mov	r8, r0
  405aa8:	f7ff faf4 	bl	405094 <__malloc_lock>
  405aac:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405ab0:	4969      	ldr	r1, [pc, #420]	; (405c58 <_free_r+0x1bc>)
  405ab2:	f027 0301 	bic.w	r3, r7, #1
  405ab6:	f1a5 0408 	sub.w	r4, r5, #8
  405aba:	18e2      	adds	r2, r4, r3
  405abc:	688e      	ldr	r6, [r1, #8]
  405abe:	6850      	ldr	r0, [r2, #4]
  405ac0:	42b2      	cmp	r2, r6
  405ac2:	f020 0003 	bic.w	r0, r0, #3
  405ac6:	d05e      	beq.n	405b86 <_free_r+0xea>
  405ac8:	07fe      	lsls	r6, r7, #31
  405aca:	6050      	str	r0, [r2, #4]
  405acc:	d40b      	bmi.n	405ae6 <_free_r+0x4a>
  405ace:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405ad2:	1be4      	subs	r4, r4, r7
  405ad4:	f101 0e08 	add.w	lr, r1, #8
  405ad8:	68a5      	ldr	r5, [r4, #8]
  405ada:	4575      	cmp	r5, lr
  405adc:	443b      	add	r3, r7
  405ade:	d06d      	beq.n	405bbc <_free_r+0x120>
  405ae0:	68e7      	ldr	r7, [r4, #12]
  405ae2:	60ef      	str	r7, [r5, #12]
  405ae4:	60bd      	str	r5, [r7, #8]
  405ae6:	1815      	adds	r5, r2, r0
  405ae8:	686d      	ldr	r5, [r5, #4]
  405aea:	07ed      	lsls	r5, r5, #31
  405aec:	d53e      	bpl.n	405b6c <_free_r+0xd0>
  405aee:	f043 0201 	orr.w	r2, r3, #1
  405af2:	6062      	str	r2, [r4, #4]
  405af4:	50e3      	str	r3, [r4, r3]
  405af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405afa:	d217      	bcs.n	405b2c <_free_r+0x90>
  405afc:	08db      	lsrs	r3, r3, #3
  405afe:	1c58      	adds	r0, r3, #1
  405b00:	109a      	asrs	r2, r3, #2
  405b02:	684d      	ldr	r5, [r1, #4]
  405b04:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405b08:	60a7      	str	r7, [r4, #8]
  405b0a:	2301      	movs	r3, #1
  405b0c:	4093      	lsls	r3, r2
  405b0e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405b12:	432b      	orrs	r3, r5
  405b14:	3a08      	subs	r2, #8
  405b16:	60e2      	str	r2, [r4, #12]
  405b18:	604b      	str	r3, [r1, #4]
  405b1a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405b1e:	60fc      	str	r4, [r7, #12]
  405b20:	4640      	mov	r0, r8
  405b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405b26:	f7ff babb 	b.w	4050a0 <__malloc_unlock>
  405b2a:	4770      	bx	lr
  405b2c:	0a5a      	lsrs	r2, r3, #9
  405b2e:	2a04      	cmp	r2, #4
  405b30:	d852      	bhi.n	405bd8 <_free_r+0x13c>
  405b32:	099a      	lsrs	r2, r3, #6
  405b34:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405b38:	00ff      	lsls	r7, r7, #3
  405b3a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405b3e:	19c8      	adds	r0, r1, r7
  405b40:	59ca      	ldr	r2, [r1, r7]
  405b42:	3808      	subs	r0, #8
  405b44:	4290      	cmp	r0, r2
  405b46:	d04f      	beq.n	405be8 <_free_r+0x14c>
  405b48:	6851      	ldr	r1, [r2, #4]
  405b4a:	f021 0103 	bic.w	r1, r1, #3
  405b4e:	428b      	cmp	r3, r1
  405b50:	d232      	bcs.n	405bb8 <_free_r+0x11c>
  405b52:	6892      	ldr	r2, [r2, #8]
  405b54:	4290      	cmp	r0, r2
  405b56:	d1f7      	bne.n	405b48 <_free_r+0xac>
  405b58:	68c3      	ldr	r3, [r0, #12]
  405b5a:	60a0      	str	r0, [r4, #8]
  405b5c:	60e3      	str	r3, [r4, #12]
  405b5e:	609c      	str	r4, [r3, #8]
  405b60:	60c4      	str	r4, [r0, #12]
  405b62:	4640      	mov	r0, r8
  405b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405b68:	f7ff ba9a 	b.w	4050a0 <__malloc_unlock>
  405b6c:	6895      	ldr	r5, [r2, #8]
  405b6e:	4f3b      	ldr	r7, [pc, #236]	; (405c5c <_free_r+0x1c0>)
  405b70:	42bd      	cmp	r5, r7
  405b72:	4403      	add	r3, r0
  405b74:	d040      	beq.n	405bf8 <_free_r+0x15c>
  405b76:	68d0      	ldr	r0, [r2, #12]
  405b78:	60e8      	str	r0, [r5, #12]
  405b7a:	f043 0201 	orr.w	r2, r3, #1
  405b7e:	6085      	str	r5, [r0, #8]
  405b80:	6062      	str	r2, [r4, #4]
  405b82:	50e3      	str	r3, [r4, r3]
  405b84:	e7b7      	b.n	405af6 <_free_r+0x5a>
  405b86:	07ff      	lsls	r7, r7, #31
  405b88:	4403      	add	r3, r0
  405b8a:	d407      	bmi.n	405b9c <_free_r+0x100>
  405b8c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405b90:	1aa4      	subs	r4, r4, r2
  405b92:	4413      	add	r3, r2
  405b94:	68a0      	ldr	r0, [r4, #8]
  405b96:	68e2      	ldr	r2, [r4, #12]
  405b98:	60c2      	str	r2, [r0, #12]
  405b9a:	6090      	str	r0, [r2, #8]
  405b9c:	4a30      	ldr	r2, [pc, #192]	; (405c60 <_free_r+0x1c4>)
  405b9e:	6812      	ldr	r2, [r2, #0]
  405ba0:	f043 0001 	orr.w	r0, r3, #1
  405ba4:	4293      	cmp	r3, r2
  405ba6:	6060      	str	r0, [r4, #4]
  405ba8:	608c      	str	r4, [r1, #8]
  405baa:	d3b9      	bcc.n	405b20 <_free_r+0x84>
  405bac:	4b2d      	ldr	r3, [pc, #180]	; (405c64 <_free_r+0x1c8>)
  405bae:	4640      	mov	r0, r8
  405bb0:	6819      	ldr	r1, [r3, #0]
  405bb2:	f7ff ff23 	bl	4059fc <_malloc_trim_r>
  405bb6:	e7b3      	b.n	405b20 <_free_r+0x84>
  405bb8:	4610      	mov	r0, r2
  405bba:	e7cd      	b.n	405b58 <_free_r+0xbc>
  405bbc:	1811      	adds	r1, r2, r0
  405bbe:	6849      	ldr	r1, [r1, #4]
  405bc0:	07c9      	lsls	r1, r1, #31
  405bc2:	d444      	bmi.n	405c4e <_free_r+0x1b2>
  405bc4:	6891      	ldr	r1, [r2, #8]
  405bc6:	68d2      	ldr	r2, [r2, #12]
  405bc8:	60ca      	str	r2, [r1, #12]
  405bca:	4403      	add	r3, r0
  405bcc:	f043 0001 	orr.w	r0, r3, #1
  405bd0:	6091      	str	r1, [r2, #8]
  405bd2:	6060      	str	r0, [r4, #4]
  405bd4:	50e3      	str	r3, [r4, r3]
  405bd6:	e7a3      	b.n	405b20 <_free_r+0x84>
  405bd8:	2a14      	cmp	r2, #20
  405bda:	d816      	bhi.n	405c0a <_free_r+0x16e>
  405bdc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405be0:	00ff      	lsls	r7, r7, #3
  405be2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405be6:	e7aa      	b.n	405b3e <_free_r+0xa2>
  405be8:	10aa      	asrs	r2, r5, #2
  405bea:	2301      	movs	r3, #1
  405bec:	684d      	ldr	r5, [r1, #4]
  405bee:	4093      	lsls	r3, r2
  405bf0:	432b      	orrs	r3, r5
  405bf2:	604b      	str	r3, [r1, #4]
  405bf4:	4603      	mov	r3, r0
  405bf6:	e7b0      	b.n	405b5a <_free_r+0xbe>
  405bf8:	f043 0201 	orr.w	r2, r3, #1
  405bfc:	614c      	str	r4, [r1, #20]
  405bfe:	610c      	str	r4, [r1, #16]
  405c00:	60e5      	str	r5, [r4, #12]
  405c02:	60a5      	str	r5, [r4, #8]
  405c04:	6062      	str	r2, [r4, #4]
  405c06:	50e3      	str	r3, [r4, r3]
  405c08:	e78a      	b.n	405b20 <_free_r+0x84>
  405c0a:	2a54      	cmp	r2, #84	; 0x54
  405c0c:	d806      	bhi.n	405c1c <_free_r+0x180>
  405c0e:	0b1a      	lsrs	r2, r3, #12
  405c10:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405c14:	00ff      	lsls	r7, r7, #3
  405c16:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405c1a:	e790      	b.n	405b3e <_free_r+0xa2>
  405c1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405c20:	d806      	bhi.n	405c30 <_free_r+0x194>
  405c22:	0bda      	lsrs	r2, r3, #15
  405c24:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405c28:	00ff      	lsls	r7, r7, #3
  405c2a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405c2e:	e786      	b.n	405b3e <_free_r+0xa2>
  405c30:	f240 5054 	movw	r0, #1364	; 0x554
  405c34:	4282      	cmp	r2, r0
  405c36:	d806      	bhi.n	405c46 <_free_r+0x1aa>
  405c38:	0c9a      	lsrs	r2, r3, #18
  405c3a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405c3e:	00ff      	lsls	r7, r7, #3
  405c40:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405c44:	e77b      	b.n	405b3e <_free_r+0xa2>
  405c46:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405c4a:	257e      	movs	r5, #126	; 0x7e
  405c4c:	e777      	b.n	405b3e <_free_r+0xa2>
  405c4e:	f043 0101 	orr.w	r1, r3, #1
  405c52:	6061      	str	r1, [r4, #4]
  405c54:	6013      	str	r3, [r2, #0]
  405c56:	e763      	b.n	405b20 <_free_r+0x84>
  405c58:	20400454 	.word	0x20400454
  405c5c:	2040045c 	.word	0x2040045c
  405c60:	20400860 	.word	0x20400860
  405c64:	20400ca8 	.word	0x20400ca8

00405c68 <__ascii_mbtowc>:
  405c68:	b082      	sub	sp, #8
  405c6a:	b149      	cbz	r1, 405c80 <__ascii_mbtowc+0x18>
  405c6c:	b15a      	cbz	r2, 405c86 <__ascii_mbtowc+0x1e>
  405c6e:	b16b      	cbz	r3, 405c8c <__ascii_mbtowc+0x24>
  405c70:	7813      	ldrb	r3, [r2, #0]
  405c72:	600b      	str	r3, [r1, #0]
  405c74:	7812      	ldrb	r2, [r2, #0]
  405c76:	1c10      	adds	r0, r2, #0
  405c78:	bf18      	it	ne
  405c7a:	2001      	movne	r0, #1
  405c7c:	b002      	add	sp, #8
  405c7e:	4770      	bx	lr
  405c80:	a901      	add	r1, sp, #4
  405c82:	2a00      	cmp	r2, #0
  405c84:	d1f3      	bne.n	405c6e <__ascii_mbtowc+0x6>
  405c86:	4610      	mov	r0, r2
  405c88:	b002      	add	sp, #8
  405c8a:	4770      	bx	lr
  405c8c:	f06f 0001 	mvn.w	r0, #1
  405c90:	e7f4      	b.n	405c7c <__ascii_mbtowc+0x14>
  405c92:	bf00      	nop

00405c94 <memmove>:
  405c94:	4288      	cmp	r0, r1
  405c96:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c98:	d90d      	bls.n	405cb6 <memmove+0x22>
  405c9a:	188b      	adds	r3, r1, r2
  405c9c:	4298      	cmp	r0, r3
  405c9e:	d20a      	bcs.n	405cb6 <memmove+0x22>
  405ca0:	1884      	adds	r4, r0, r2
  405ca2:	2a00      	cmp	r2, #0
  405ca4:	d051      	beq.n	405d4a <memmove+0xb6>
  405ca6:	4622      	mov	r2, r4
  405ca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405cac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405cb0:	4299      	cmp	r1, r3
  405cb2:	d1f9      	bne.n	405ca8 <memmove+0x14>
  405cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cb6:	2a0f      	cmp	r2, #15
  405cb8:	d948      	bls.n	405d4c <memmove+0xb8>
  405cba:	ea41 0300 	orr.w	r3, r1, r0
  405cbe:	079b      	lsls	r3, r3, #30
  405cc0:	d146      	bne.n	405d50 <memmove+0xbc>
  405cc2:	f100 0410 	add.w	r4, r0, #16
  405cc6:	f101 0310 	add.w	r3, r1, #16
  405cca:	4615      	mov	r5, r2
  405ccc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405cd0:	f844 6c10 	str.w	r6, [r4, #-16]
  405cd4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405cd8:	f844 6c0c 	str.w	r6, [r4, #-12]
  405cdc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405ce0:	f844 6c08 	str.w	r6, [r4, #-8]
  405ce4:	3d10      	subs	r5, #16
  405ce6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405cea:	f844 6c04 	str.w	r6, [r4, #-4]
  405cee:	2d0f      	cmp	r5, #15
  405cf0:	f103 0310 	add.w	r3, r3, #16
  405cf4:	f104 0410 	add.w	r4, r4, #16
  405cf8:	d8e8      	bhi.n	405ccc <memmove+0x38>
  405cfa:	f1a2 0310 	sub.w	r3, r2, #16
  405cfe:	f023 030f 	bic.w	r3, r3, #15
  405d02:	f002 0e0f 	and.w	lr, r2, #15
  405d06:	3310      	adds	r3, #16
  405d08:	f1be 0f03 	cmp.w	lr, #3
  405d0c:	4419      	add	r1, r3
  405d0e:	4403      	add	r3, r0
  405d10:	d921      	bls.n	405d56 <memmove+0xc2>
  405d12:	1f1e      	subs	r6, r3, #4
  405d14:	460d      	mov	r5, r1
  405d16:	4674      	mov	r4, lr
  405d18:	3c04      	subs	r4, #4
  405d1a:	f855 7b04 	ldr.w	r7, [r5], #4
  405d1e:	f846 7f04 	str.w	r7, [r6, #4]!
  405d22:	2c03      	cmp	r4, #3
  405d24:	d8f8      	bhi.n	405d18 <memmove+0x84>
  405d26:	f1ae 0404 	sub.w	r4, lr, #4
  405d2a:	f024 0403 	bic.w	r4, r4, #3
  405d2e:	3404      	adds	r4, #4
  405d30:	4421      	add	r1, r4
  405d32:	4423      	add	r3, r4
  405d34:	f002 0203 	and.w	r2, r2, #3
  405d38:	b162      	cbz	r2, 405d54 <memmove+0xc0>
  405d3a:	3b01      	subs	r3, #1
  405d3c:	440a      	add	r2, r1
  405d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405d42:	f803 4f01 	strb.w	r4, [r3, #1]!
  405d46:	428a      	cmp	r2, r1
  405d48:	d1f9      	bne.n	405d3e <memmove+0xaa>
  405d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d4c:	4603      	mov	r3, r0
  405d4e:	e7f3      	b.n	405d38 <memmove+0xa4>
  405d50:	4603      	mov	r3, r0
  405d52:	e7f2      	b.n	405d3a <memmove+0xa6>
  405d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d56:	4672      	mov	r2, lr
  405d58:	e7ee      	b.n	405d38 <memmove+0xa4>
  405d5a:	bf00      	nop

00405d5c <_realloc_r>:
  405d5c:	2900      	cmp	r1, #0
  405d5e:	f000 8095 	beq.w	405e8c <_realloc_r+0x130>
  405d62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d66:	460d      	mov	r5, r1
  405d68:	4616      	mov	r6, r2
  405d6a:	b083      	sub	sp, #12
  405d6c:	4680      	mov	r8, r0
  405d6e:	f106 070b 	add.w	r7, r6, #11
  405d72:	f7ff f98f 	bl	405094 <__malloc_lock>
  405d76:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405d7a:	2f16      	cmp	r7, #22
  405d7c:	f02e 0403 	bic.w	r4, lr, #3
  405d80:	f1a5 0908 	sub.w	r9, r5, #8
  405d84:	d83c      	bhi.n	405e00 <_realloc_r+0xa4>
  405d86:	2210      	movs	r2, #16
  405d88:	4617      	mov	r7, r2
  405d8a:	42be      	cmp	r6, r7
  405d8c:	d83d      	bhi.n	405e0a <_realloc_r+0xae>
  405d8e:	4294      	cmp	r4, r2
  405d90:	da43      	bge.n	405e1a <_realloc_r+0xbe>
  405d92:	4bc4      	ldr	r3, [pc, #784]	; (4060a4 <_realloc_r+0x348>)
  405d94:	6899      	ldr	r1, [r3, #8]
  405d96:	eb09 0004 	add.w	r0, r9, r4
  405d9a:	4288      	cmp	r0, r1
  405d9c:	f000 80b4 	beq.w	405f08 <_realloc_r+0x1ac>
  405da0:	6843      	ldr	r3, [r0, #4]
  405da2:	f023 0101 	bic.w	r1, r3, #1
  405da6:	4401      	add	r1, r0
  405da8:	6849      	ldr	r1, [r1, #4]
  405daa:	07c9      	lsls	r1, r1, #31
  405dac:	d54c      	bpl.n	405e48 <_realloc_r+0xec>
  405dae:	f01e 0f01 	tst.w	lr, #1
  405db2:	f000 809b 	beq.w	405eec <_realloc_r+0x190>
  405db6:	4631      	mov	r1, r6
  405db8:	4640      	mov	r0, r8
  405dba:	f7fe fdcf 	bl	40495c <_malloc_r>
  405dbe:	4606      	mov	r6, r0
  405dc0:	2800      	cmp	r0, #0
  405dc2:	d03a      	beq.n	405e3a <_realloc_r+0xde>
  405dc4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405dc8:	f023 0301 	bic.w	r3, r3, #1
  405dcc:	444b      	add	r3, r9
  405dce:	f1a0 0208 	sub.w	r2, r0, #8
  405dd2:	429a      	cmp	r2, r3
  405dd4:	f000 8121 	beq.w	40601a <_realloc_r+0x2be>
  405dd8:	1f22      	subs	r2, r4, #4
  405dda:	2a24      	cmp	r2, #36	; 0x24
  405ddc:	f200 8107 	bhi.w	405fee <_realloc_r+0x292>
  405de0:	2a13      	cmp	r2, #19
  405de2:	f200 80db 	bhi.w	405f9c <_realloc_r+0x240>
  405de6:	4603      	mov	r3, r0
  405de8:	462a      	mov	r2, r5
  405dea:	6811      	ldr	r1, [r2, #0]
  405dec:	6019      	str	r1, [r3, #0]
  405dee:	6851      	ldr	r1, [r2, #4]
  405df0:	6059      	str	r1, [r3, #4]
  405df2:	6892      	ldr	r2, [r2, #8]
  405df4:	609a      	str	r2, [r3, #8]
  405df6:	4629      	mov	r1, r5
  405df8:	4640      	mov	r0, r8
  405dfa:	f7ff fe4f 	bl	405a9c <_free_r>
  405dfe:	e01c      	b.n	405e3a <_realloc_r+0xde>
  405e00:	f027 0707 	bic.w	r7, r7, #7
  405e04:	2f00      	cmp	r7, #0
  405e06:	463a      	mov	r2, r7
  405e08:	dabf      	bge.n	405d8a <_realloc_r+0x2e>
  405e0a:	2600      	movs	r6, #0
  405e0c:	230c      	movs	r3, #12
  405e0e:	4630      	mov	r0, r6
  405e10:	f8c8 3000 	str.w	r3, [r8]
  405e14:	b003      	add	sp, #12
  405e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e1a:	462e      	mov	r6, r5
  405e1c:	1be3      	subs	r3, r4, r7
  405e1e:	2b0f      	cmp	r3, #15
  405e20:	d81e      	bhi.n	405e60 <_realloc_r+0x104>
  405e22:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405e26:	f003 0301 	and.w	r3, r3, #1
  405e2a:	4323      	orrs	r3, r4
  405e2c:	444c      	add	r4, r9
  405e2e:	f8c9 3004 	str.w	r3, [r9, #4]
  405e32:	6863      	ldr	r3, [r4, #4]
  405e34:	f043 0301 	orr.w	r3, r3, #1
  405e38:	6063      	str	r3, [r4, #4]
  405e3a:	4640      	mov	r0, r8
  405e3c:	f7ff f930 	bl	4050a0 <__malloc_unlock>
  405e40:	4630      	mov	r0, r6
  405e42:	b003      	add	sp, #12
  405e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e48:	f023 0303 	bic.w	r3, r3, #3
  405e4c:	18e1      	adds	r1, r4, r3
  405e4e:	4291      	cmp	r1, r2
  405e50:	db1f      	blt.n	405e92 <_realloc_r+0x136>
  405e52:	68c3      	ldr	r3, [r0, #12]
  405e54:	6882      	ldr	r2, [r0, #8]
  405e56:	462e      	mov	r6, r5
  405e58:	60d3      	str	r3, [r2, #12]
  405e5a:	460c      	mov	r4, r1
  405e5c:	609a      	str	r2, [r3, #8]
  405e5e:	e7dd      	b.n	405e1c <_realloc_r+0xc0>
  405e60:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405e64:	eb09 0107 	add.w	r1, r9, r7
  405e68:	f002 0201 	and.w	r2, r2, #1
  405e6c:	444c      	add	r4, r9
  405e6e:	f043 0301 	orr.w	r3, r3, #1
  405e72:	4317      	orrs	r7, r2
  405e74:	f8c9 7004 	str.w	r7, [r9, #4]
  405e78:	604b      	str	r3, [r1, #4]
  405e7a:	6863      	ldr	r3, [r4, #4]
  405e7c:	f043 0301 	orr.w	r3, r3, #1
  405e80:	3108      	adds	r1, #8
  405e82:	6063      	str	r3, [r4, #4]
  405e84:	4640      	mov	r0, r8
  405e86:	f7ff fe09 	bl	405a9c <_free_r>
  405e8a:	e7d6      	b.n	405e3a <_realloc_r+0xde>
  405e8c:	4611      	mov	r1, r2
  405e8e:	f7fe bd65 	b.w	40495c <_malloc_r>
  405e92:	f01e 0f01 	tst.w	lr, #1
  405e96:	d18e      	bne.n	405db6 <_realloc_r+0x5a>
  405e98:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405e9c:	eba9 0a01 	sub.w	sl, r9, r1
  405ea0:	f8da 1004 	ldr.w	r1, [sl, #4]
  405ea4:	f021 0103 	bic.w	r1, r1, #3
  405ea8:	440b      	add	r3, r1
  405eaa:	4423      	add	r3, r4
  405eac:	4293      	cmp	r3, r2
  405eae:	db25      	blt.n	405efc <_realloc_r+0x1a0>
  405eb0:	68c2      	ldr	r2, [r0, #12]
  405eb2:	6881      	ldr	r1, [r0, #8]
  405eb4:	4656      	mov	r6, sl
  405eb6:	60ca      	str	r2, [r1, #12]
  405eb8:	6091      	str	r1, [r2, #8]
  405eba:	f8da 100c 	ldr.w	r1, [sl, #12]
  405ebe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405ec2:	1f22      	subs	r2, r4, #4
  405ec4:	2a24      	cmp	r2, #36	; 0x24
  405ec6:	60c1      	str	r1, [r0, #12]
  405ec8:	6088      	str	r0, [r1, #8]
  405eca:	f200 8094 	bhi.w	405ff6 <_realloc_r+0x29a>
  405ece:	2a13      	cmp	r2, #19
  405ed0:	d96f      	bls.n	405fb2 <_realloc_r+0x256>
  405ed2:	6829      	ldr	r1, [r5, #0]
  405ed4:	f8ca 1008 	str.w	r1, [sl, #8]
  405ed8:	6869      	ldr	r1, [r5, #4]
  405eda:	f8ca 100c 	str.w	r1, [sl, #12]
  405ede:	2a1b      	cmp	r2, #27
  405ee0:	f200 80a2 	bhi.w	406028 <_realloc_r+0x2cc>
  405ee4:	3508      	adds	r5, #8
  405ee6:	f10a 0210 	add.w	r2, sl, #16
  405eea:	e063      	b.n	405fb4 <_realloc_r+0x258>
  405eec:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405ef0:	eba9 0a03 	sub.w	sl, r9, r3
  405ef4:	f8da 1004 	ldr.w	r1, [sl, #4]
  405ef8:	f021 0103 	bic.w	r1, r1, #3
  405efc:	1863      	adds	r3, r4, r1
  405efe:	4293      	cmp	r3, r2
  405f00:	f6ff af59 	blt.w	405db6 <_realloc_r+0x5a>
  405f04:	4656      	mov	r6, sl
  405f06:	e7d8      	b.n	405eba <_realloc_r+0x15e>
  405f08:	6841      	ldr	r1, [r0, #4]
  405f0a:	f021 0b03 	bic.w	fp, r1, #3
  405f0e:	44a3      	add	fp, r4
  405f10:	f107 0010 	add.w	r0, r7, #16
  405f14:	4583      	cmp	fp, r0
  405f16:	da56      	bge.n	405fc6 <_realloc_r+0x26a>
  405f18:	f01e 0f01 	tst.w	lr, #1
  405f1c:	f47f af4b 	bne.w	405db6 <_realloc_r+0x5a>
  405f20:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405f24:	eba9 0a01 	sub.w	sl, r9, r1
  405f28:	f8da 1004 	ldr.w	r1, [sl, #4]
  405f2c:	f021 0103 	bic.w	r1, r1, #3
  405f30:	448b      	add	fp, r1
  405f32:	4558      	cmp	r0, fp
  405f34:	dce2      	bgt.n	405efc <_realloc_r+0x1a0>
  405f36:	4656      	mov	r6, sl
  405f38:	f8da 100c 	ldr.w	r1, [sl, #12]
  405f3c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405f40:	1f22      	subs	r2, r4, #4
  405f42:	2a24      	cmp	r2, #36	; 0x24
  405f44:	60c1      	str	r1, [r0, #12]
  405f46:	6088      	str	r0, [r1, #8]
  405f48:	f200 808f 	bhi.w	40606a <_realloc_r+0x30e>
  405f4c:	2a13      	cmp	r2, #19
  405f4e:	f240 808a 	bls.w	406066 <_realloc_r+0x30a>
  405f52:	6829      	ldr	r1, [r5, #0]
  405f54:	f8ca 1008 	str.w	r1, [sl, #8]
  405f58:	6869      	ldr	r1, [r5, #4]
  405f5a:	f8ca 100c 	str.w	r1, [sl, #12]
  405f5e:	2a1b      	cmp	r2, #27
  405f60:	f200 808a 	bhi.w	406078 <_realloc_r+0x31c>
  405f64:	3508      	adds	r5, #8
  405f66:	f10a 0210 	add.w	r2, sl, #16
  405f6a:	6829      	ldr	r1, [r5, #0]
  405f6c:	6011      	str	r1, [r2, #0]
  405f6e:	6869      	ldr	r1, [r5, #4]
  405f70:	6051      	str	r1, [r2, #4]
  405f72:	68a9      	ldr	r1, [r5, #8]
  405f74:	6091      	str	r1, [r2, #8]
  405f76:	eb0a 0107 	add.w	r1, sl, r7
  405f7a:	ebab 0207 	sub.w	r2, fp, r7
  405f7e:	f042 0201 	orr.w	r2, r2, #1
  405f82:	6099      	str	r1, [r3, #8]
  405f84:	604a      	str	r2, [r1, #4]
  405f86:	f8da 3004 	ldr.w	r3, [sl, #4]
  405f8a:	f003 0301 	and.w	r3, r3, #1
  405f8e:	431f      	orrs	r7, r3
  405f90:	4640      	mov	r0, r8
  405f92:	f8ca 7004 	str.w	r7, [sl, #4]
  405f96:	f7ff f883 	bl	4050a0 <__malloc_unlock>
  405f9a:	e751      	b.n	405e40 <_realloc_r+0xe4>
  405f9c:	682b      	ldr	r3, [r5, #0]
  405f9e:	6003      	str	r3, [r0, #0]
  405fa0:	686b      	ldr	r3, [r5, #4]
  405fa2:	6043      	str	r3, [r0, #4]
  405fa4:	2a1b      	cmp	r2, #27
  405fa6:	d82d      	bhi.n	406004 <_realloc_r+0x2a8>
  405fa8:	f100 0308 	add.w	r3, r0, #8
  405fac:	f105 0208 	add.w	r2, r5, #8
  405fb0:	e71b      	b.n	405dea <_realloc_r+0x8e>
  405fb2:	4632      	mov	r2, r6
  405fb4:	6829      	ldr	r1, [r5, #0]
  405fb6:	6011      	str	r1, [r2, #0]
  405fb8:	6869      	ldr	r1, [r5, #4]
  405fba:	6051      	str	r1, [r2, #4]
  405fbc:	68a9      	ldr	r1, [r5, #8]
  405fbe:	6091      	str	r1, [r2, #8]
  405fc0:	461c      	mov	r4, r3
  405fc2:	46d1      	mov	r9, sl
  405fc4:	e72a      	b.n	405e1c <_realloc_r+0xc0>
  405fc6:	eb09 0107 	add.w	r1, r9, r7
  405fca:	ebab 0b07 	sub.w	fp, fp, r7
  405fce:	f04b 0201 	orr.w	r2, fp, #1
  405fd2:	6099      	str	r1, [r3, #8]
  405fd4:	604a      	str	r2, [r1, #4]
  405fd6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405fda:	f003 0301 	and.w	r3, r3, #1
  405fde:	431f      	orrs	r7, r3
  405fe0:	4640      	mov	r0, r8
  405fe2:	f845 7c04 	str.w	r7, [r5, #-4]
  405fe6:	f7ff f85b 	bl	4050a0 <__malloc_unlock>
  405fea:	462e      	mov	r6, r5
  405fec:	e728      	b.n	405e40 <_realloc_r+0xe4>
  405fee:	4629      	mov	r1, r5
  405ff0:	f7ff fe50 	bl	405c94 <memmove>
  405ff4:	e6ff      	b.n	405df6 <_realloc_r+0x9a>
  405ff6:	4629      	mov	r1, r5
  405ff8:	4630      	mov	r0, r6
  405ffa:	461c      	mov	r4, r3
  405ffc:	46d1      	mov	r9, sl
  405ffe:	f7ff fe49 	bl	405c94 <memmove>
  406002:	e70b      	b.n	405e1c <_realloc_r+0xc0>
  406004:	68ab      	ldr	r3, [r5, #8]
  406006:	6083      	str	r3, [r0, #8]
  406008:	68eb      	ldr	r3, [r5, #12]
  40600a:	60c3      	str	r3, [r0, #12]
  40600c:	2a24      	cmp	r2, #36	; 0x24
  40600e:	d017      	beq.n	406040 <_realloc_r+0x2e4>
  406010:	f100 0310 	add.w	r3, r0, #16
  406014:	f105 0210 	add.w	r2, r5, #16
  406018:	e6e7      	b.n	405dea <_realloc_r+0x8e>
  40601a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40601e:	f023 0303 	bic.w	r3, r3, #3
  406022:	441c      	add	r4, r3
  406024:	462e      	mov	r6, r5
  406026:	e6f9      	b.n	405e1c <_realloc_r+0xc0>
  406028:	68a9      	ldr	r1, [r5, #8]
  40602a:	f8ca 1010 	str.w	r1, [sl, #16]
  40602e:	68e9      	ldr	r1, [r5, #12]
  406030:	f8ca 1014 	str.w	r1, [sl, #20]
  406034:	2a24      	cmp	r2, #36	; 0x24
  406036:	d00c      	beq.n	406052 <_realloc_r+0x2f6>
  406038:	3510      	adds	r5, #16
  40603a:	f10a 0218 	add.w	r2, sl, #24
  40603e:	e7b9      	b.n	405fb4 <_realloc_r+0x258>
  406040:	692b      	ldr	r3, [r5, #16]
  406042:	6103      	str	r3, [r0, #16]
  406044:	696b      	ldr	r3, [r5, #20]
  406046:	6143      	str	r3, [r0, #20]
  406048:	f105 0218 	add.w	r2, r5, #24
  40604c:	f100 0318 	add.w	r3, r0, #24
  406050:	e6cb      	b.n	405dea <_realloc_r+0x8e>
  406052:	692a      	ldr	r2, [r5, #16]
  406054:	f8ca 2018 	str.w	r2, [sl, #24]
  406058:	696a      	ldr	r2, [r5, #20]
  40605a:	f8ca 201c 	str.w	r2, [sl, #28]
  40605e:	3518      	adds	r5, #24
  406060:	f10a 0220 	add.w	r2, sl, #32
  406064:	e7a6      	b.n	405fb4 <_realloc_r+0x258>
  406066:	4632      	mov	r2, r6
  406068:	e77f      	b.n	405f6a <_realloc_r+0x20e>
  40606a:	4629      	mov	r1, r5
  40606c:	4630      	mov	r0, r6
  40606e:	9301      	str	r3, [sp, #4]
  406070:	f7ff fe10 	bl	405c94 <memmove>
  406074:	9b01      	ldr	r3, [sp, #4]
  406076:	e77e      	b.n	405f76 <_realloc_r+0x21a>
  406078:	68a9      	ldr	r1, [r5, #8]
  40607a:	f8ca 1010 	str.w	r1, [sl, #16]
  40607e:	68e9      	ldr	r1, [r5, #12]
  406080:	f8ca 1014 	str.w	r1, [sl, #20]
  406084:	2a24      	cmp	r2, #36	; 0x24
  406086:	d003      	beq.n	406090 <_realloc_r+0x334>
  406088:	3510      	adds	r5, #16
  40608a:	f10a 0218 	add.w	r2, sl, #24
  40608e:	e76c      	b.n	405f6a <_realloc_r+0x20e>
  406090:	692a      	ldr	r2, [r5, #16]
  406092:	f8ca 2018 	str.w	r2, [sl, #24]
  406096:	696a      	ldr	r2, [r5, #20]
  406098:	f8ca 201c 	str.w	r2, [sl, #28]
  40609c:	3518      	adds	r5, #24
  40609e:	f10a 0220 	add.w	r2, sl, #32
  4060a2:	e762      	b.n	405f6a <_realloc_r+0x20e>
  4060a4:	20400454 	.word	0x20400454

004060a8 <__ascii_wctomb>:
  4060a8:	b121      	cbz	r1, 4060b4 <__ascii_wctomb+0xc>
  4060aa:	2aff      	cmp	r2, #255	; 0xff
  4060ac:	d804      	bhi.n	4060b8 <__ascii_wctomb+0x10>
  4060ae:	700a      	strb	r2, [r1, #0]
  4060b0:	2001      	movs	r0, #1
  4060b2:	4770      	bx	lr
  4060b4:	4608      	mov	r0, r1
  4060b6:	4770      	bx	lr
  4060b8:	238a      	movs	r3, #138	; 0x8a
  4060ba:	6003      	str	r3, [r0, #0]
  4060bc:	f04f 30ff 	mov.w	r0, #4294967295
  4060c0:	4770      	bx	lr
  4060c2:	bf00      	nop

004060c4 <__aeabi_drsub>:
  4060c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4060c8:	e002      	b.n	4060d0 <__adddf3>
  4060ca:	bf00      	nop

004060cc <__aeabi_dsub>:
  4060cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004060d0 <__adddf3>:
  4060d0:	b530      	push	{r4, r5, lr}
  4060d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4060d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4060da:	ea94 0f05 	teq	r4, r5
  4060de:	bf08      	it	eq
  4060e0:	ea90 0f02 	teqeq	r0, r2
  4060e4:	bf1f      	itttt	ne
  4060e6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4060ea:	ea55 0c02 	orrsne.w	ip, r5, r2
  4060ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4060f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4060f6:	f000 80e2 	beq.w	4062be <__adddf3+0x1ee>
  4060fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4060fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406102:	bfb8      	it	lt
  406104:	426d      	neglt	r5, r5
  406106:	dd0c      	ble.n	406122 <__adddf3+0x52>
  406108:	442c      	add	r4, r5
  40610a:	ea80 0202 	eor.w	r2, r0, r2
  40610e:	ea81 0303 	eor.w	r3, r1, r3
  406112:	ea82 0000 	eor.w	r0, r2, r0
  406116:	ea83 0101 	eor.w	r1, r3, r1
  40611a:	ea80 0202 	eor.w	r2, r0, r2
  40611e:	ea81 0303 	eor.w	r3, r1, r3
  406122:	2d36      	cmp	r5, #54	; 0x36
  406124:	bf88      	it	hi
  406126:	bd30      	pophi	{r4, r5, pc}
  406128:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40612c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406130:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406134:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406138:	d002      	beq.n	406140 <__adddf3+0x70>
  40613a:	4240      	negs	r0, r0
  40613c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406140:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406144:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406148:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40614c:	d002      	beq.n	406154 <__adddf3+0x84>
  40614e:	4252      	negs	r2, r2
  406150:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406154:	ea94 0f05 	teq	r4, r5
  406158:	f000 80a7 	beq.w	4062aa <__adddf3+0x1da>
  40615c:	f1a4 0401 	sub.w	r4, r4, #1
  406160:	f1d5 0e20 	rsbs	lr, r5, #32
  406164:	db0d      	blt.n	406182 <__adddf3+0xb2>
  406166:	fa02 fc0e 	lsl.w	ip, r2, lr
  40616a:	fa22 f205 	lsr.w	r2, r2, r5
  40616e:	1880      	adds	r0, r0, r2
  406170:	f141 0100 	adc.w	r1, r1, #0
  406174:	fa03 f20e 	lsl.w	r2, r3, lr
  406178:	1880      	adds	r0, r0, r2
  40617a:	fa43 f305 	asr.w	r3, r3, r5
  40617e:	4159      	adcs	r1, r3
  406180:	e00e      	b.n	4061a0 <__adddf3+0xd0>
  406182:	f1a5 0520 	sub.w	r5, r5, #32
  406186:	f10e 0e20 	add.w	lr, lr, #32
  40618a:	2a01      	cmp	r2, #1
  40618c:	fa03 fc0e 	lsl.w	ip, r3, lr
  406190:	bf28      	it	cs
  406192:	f04c 0c02 	orrcs.w	ip, ip, #2
  406196:	fa43 f305 	asr.w	r3, r3, r5
  40619a:	18c0      	adds	r0, r0, r3
  40619c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4061a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4061a4:	d507      	bpl.n	4061b6 <__adddf3+0xe6>
  4061a6:	f04f 0e00 	mov.w	lr, #0
  4061aa:	f1dc 0c00 	rsbs	ip, ip, #0
  4061ae:	eb7e 0000 	sbcs.w	r0, lr, r0
  4061b2:	eb6e 0101 	sbc.w	r1, lr, r1
  4061b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4061ba:	d31b      	bcc.n	4061f4 <__adddf3+0x124>
  4061bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4061c0:	d30c      	bcc.n	4061dc <__adddf3+0x10c>
  4061c2:	0849      	lsrs	r1, r1, #1
  4061c4:	ea5f 0030 	movs.w	r0, r0, rrx
  4061c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4061cc:	f104 0401 	add.w	r4, r4, #1
  4061d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4061d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4061d8:	f080 809a 	bcs.w	406310 <__adddf3+0x240>
  4061dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4061e0:	bf08      	it	eq
  4061e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4061e6:	f150 0000 	adcs.w	r0, r0, #0
  4061ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4061ee:	ea41 0105 	orr.w	r1, r1, r5
  4061f2:	bd30      	pop	{r4, r5, pc}
  4061f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4061f8:	4140      	adcs	r0, r0
  4061fa:	eb41 0101 	adc.w	r1, r1, r1
  4061fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406202:	f1a4 0401 	sub.w	r4, r4, #1
  406206:	d1e9      	bne.n	4061dc <__adddf3+0x10c>
  406208:	f091 0f00 	teq	r1, #0
  40620c:	bf04      	itt	eq
  40620e:	4601      	moveq	r1, r0
  406210:	2000      	moveq	r0, #0
  406212:	fab1 f381 	clz	r3, r1
  406216:	bf08      	it	eq
  406218:	3320      	addeq	r3, #32
  40621a:	f1a3 030b 	sub.w	r3, r3, #11
  40621e:	f1b3 0220 	subs.w	r2, r3, #32
  406222:	da0c      	bge.n	40623e <__adddf3+0x16e>
  406224:	320c      	adds	r2, #12
  406226:	dd08      	ble.n	40623a <__adddf3+0x16a>
  406228:	f102 0c14 	add.w	ip, r2, #20
  40622c:	f1c2 020c 	rsb	r2, r2, #12
  406230:	fa01 f00c 	lsl.w	r0, r1, ip
  406234:	fa21 f102 	lsr.w	r1, r1, r2
  406238:	e00c      	b.n	406254 <__adddf3+0x184>
  40623a:	f102 0214 	add.w	r2, r2, #20
  40623e:	bfd8      	it	le
  406240:	f1c2 0c20 	rsble	ip, r2, #32
  406244:	fa01 f102 	lsl.w	r1, r1, r2
  406248:	fa20 fc0c 	lsr.w	ip, r0, ip
  40624c:	bfdc      	itt	le
  40624e:	ea41 010c 	orrle.w	r1, r1, ip
  406252:	4090      	lslle	r0, r2
  406254:	1ae4      	subs	r4, r4, r3
  406256:	bfa2      	ittt	ge
  406258:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40625c:	4329      	orrge	r1, r5
  40625e:	bd30      	popge	{r4, r5, pc}
  406260:	ea6f 0404 	mvn.w	r4, r4
  406264:	3c1f      	subs	r4, #31
  406266:	da1c      	bge.n	4062a2 <__adddf3+0x1d2>
  406268:	340c      	adds	r4, #12
  40626a:	dc0e      	bgt.n	40628a <__adddf3+0x1ba>
  40626c:	f104 0414 	add.w	r4, r4, #20
  406270:	f1c4 0220 	rsb	r2, r4, #32
  406274:	fa20 f004 	lsr.w	r0, r0, r4
  406278:	fa01 f302 	lsl.w	r3, r1, r2
  40627c:	ea40 0003 	orr.w	r0, r0, r3
  406280:	fa21 f304 	lsr.w	r3, r1, r4
  406284:	ea45 0103 	orr.w	r1, r5, r3
  406288:	bd30      	pop	{r4, r5, pc}
  40628a:	f1c4 040c 	rsb	r4, r4, #12
  40628e:	f1c4 0220 	rsb	r2, r4, #32
  406292:	fa20 f002 	lsr.w	r0, r0, r2
  406296:	fa01 f304 	lsl.w	r3, r1, r4
  40629a:	ea40 0003 	orr.w	r0, r0, r3
  40629e:	4629      	mov	r1, r5
  4062a0:	bd30      	pop	{r4, r5, pc}
  4062a2:	fa21 f004 	lsr.w	r0, r1, r4
  4062a6:	4629      	mov	r1, r5
  4062a8:	bd30      	pop	{r4, r5, pc}
  4062aa:	f094 0f00 	teq	r4, #0
  4062ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4062b2:	bf06      	itte	eq
  4062b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4062b8:	3401      	addeq	r4, #1
  4062ba:	3d01      	subne	r5, #1
  4062bc:	e74e      	b.n	40615c <__adddf3+0x8c>
  4062be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4062c2:	bf18      	it	ne
  4062c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4062c8:	d029      	beq.n	40631e <__adddf3+0x24e>
  4062ca:	ea94 0f05 	teq	r4, r5
  4062ce:	bf08      	it	eq
  4062d0:	ea90 0f02 	teqeq	r0, r2
  4062d4:	d005      	beq.n	4062e2 <__adddf3+0x212>
  4062d6:	ea54 0c00 	orrs.w	ip, r4, r0
  4062da:	bf04      	itt	eq
  4062dc:	4619      	moveq	r1, r3
  4062de:	4610      	moveq	r0, r2
  4062e0:	bd30      	pop	{r4, r5, pc}
  4062e2:	ea91 0f03 	teq	r1, r3
  4062e6:	bf1e      	ittt	ne
  4062e8:	2100      	movne	r1, #0
  4062ea:	2000      	movne	r0, #0
  4062ec:	bd30      	popne	{r4, r5, pc}
  4062ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4062f2:	d105      	bne.n	406300 <__adddf3+0x230>
  4062f4:	0040      	lsls	r0, r0, #1
  4062f6:	4149      	adcs	r1, r1
  4062f8:	bf28      	it	cs
  4062fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4062fe:	bd30      	pop	{r4, r5, pc}
  406300:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406304:	bf3c      	itt	cc
  406306:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40630a:	bd30      	popcc	{r4, r5, pc}
  40630c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406310:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406314:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406318:	f04f 0000 	mov.w	r0, #0
  40631c:	bd30      	pop	{r4, r5, pc}
  40631e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406322:	bf1a      	itte	ne
  406324:	4619      	movne	r1, r3
  406326:	4610      	movne	r0, r2
  406328:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40632c:	bf1c      	itt	ne
  40632e:	460b      	movne	r3, r1
  406330:	4602      	movne	r2, r0
  406332:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406336:	bf06      	itte	eq
  406338:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40633c:	ea91 0f03 	teqeq	r1, r3
  406340:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406344:	bd30      	pop	{r4, r5, pc}
  406346:	bf00      	nop

00406348 <__aeabi_ui2d>:
  406348:	f090 0f00 	teq	r0, #0
  40634c:	bf04      	itt	eq
  40634e:	2100      	moveq	r1, #0
  406350:	4770      	bxeq	lr
  406352:	b530      	push	{r4, r5, lr}
  406354:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406358:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40635c:	f04f 0500 	mov.w	r5, #0
  406360:	f04f 0100 	mov.w	r1, #0
  406364:	e750      	b.n	406208 <__adddf3+0x138>
  406366:	bf00      	nop

00406368 <__aeabi_i2d>:
  406368:	f090 0f00 	teq	r0, #0
  40636c:	bf04      	itt	eq
  40636e:	2100      	moveq	r1, #0
  406370:	4770      	bxeq	lr
  406372:	b530      	push	{r4, r5, lr}
  406374:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406378:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40637c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406380:	bf48      	it	mi
  406382:	4240      	negmi	r0, r0
  406384:	f04f 0100 	mov.w	r1, #0
  406388:	e73e      	b.n	406208 <__adddf3+0x138>
  40638a:	bf00      	nop

0040638c <__aeabi_f2d>:
  40638c:	0042      	lsls	r2, r0, #1
  40638e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406392:	ea4f 0131 	mov.w	r1, r1, rrx
  406396:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40639a:	bf1f      	itttt	ne
  40639c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4063a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4063a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4063a8:	4770      	bxne	lr
  4063aa:	f092 0f00 	teq	r2, #0
  4063ae:	bf14      	ite	ne
  4063b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4063b4:	4770      	bxeq	lr
  4063b6:	b530      	push	{r4, r5, lr}
  4063b8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4063bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4063c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4063c4:	e720      	b.n	406208 <__adddf3+0x138>
  4063c6:	bf00      	nop

004063c8 <__aeabi_ul2d>:
  4063c8:	ea50 0201 	orrs.w	r2, r0, r1
  4063cc:	bf08      	it	eq
  4063ce:	4770      	bxeq	lr
  4063d0:	b530      	push	{r4, r5, lr}
  4063d2:	f04f 0500 	mov.w	r5, #0
  4063d6:	e00a      	b.n	4063ee <__aeabi_l2d+0x16>

004063d8 <__aeabi_l2d>:
  4063d8:	ea50 0201 	orrs.w	r2, r0, r1
  4063dc:	bf08      	it	eq
  4063de:	4770      	bxeq	lr
  4063e0:	b530      	push	{r4, r5, lr}
  4063e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4063e6:	d502      	bpl.n	4063ee <__aeabi_l2d+0x16>
  4063e8:	4240      	negs	r0, r0
  4063ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4063ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4063f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4063f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4063fa:	f43f aedc 	beq.w	4061b6 <__adddf3+0xe6>
  4063fe:	f04f 0203 	mov.w	r2, #3
  406402:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406406:	bf18      	it	ne
  406408:	3203      	addne	r2, #3
  40640a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40640e:	bf18      	it	ne
  406410:	3203      	addne	r2, #3
  406412:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  406416:	f1c2 0320 	rsb	r3, r2, #32
  40641a:	fa00 fc03 	lsl.w	ip, r0, r3
  40641e:	fa20 f002 	lsr.w	r0, r0, r2
  406422:	fa01 fe03 	lsl.w	lr, r1, r3
  406426:	ea40 000e 	orr.w	r0, r0, lr
  40642a:	fa21 f102 	lsr.w	r1, r1, r2
  40642e:	4414      	add	r4, r2
  406430:	e6c1      	b.n	4061b6 <__adddf3+0xe6>
  406432:	bf00      	nop

00406434 <__aeabi_dmul>:
  406434:	b570      	push	{r4, r5, r6, lr}
  406436:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40643a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40643e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406442:	bf1d      	ittte	ne
  406444:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406448:	ea94 0f0c 	teqne	r4, ip
  40644c:	ea95 0f0c 	teqne	r5, ip
  406450:	f000 f8de 	bleq	406610 <__aeabi_dmul+0x1dc>
  406454:	442c      	add	r4, r5
  406456:	ea81 0603 	eor.w	r6, r1, r3
  40645a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40645e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  406462:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  406466:	bf18      	it	ne
  406468:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40646c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406474:	d038      	beq.n	4064e8 <__aeabi_dmul+0xb4>
  406476:	fba0 ce02 	umull	ip, lr, r0, r2
  40647a:	f04f 0500 	mov.w	r5, #0
  40647e:	fbe1 e502 	umlal	lr, r5, r1, r2
  406482:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  406486:	fbe0 e503 	umlal	lr, r5, r0, r3
  40648a:	f04f 0600 	mov.w	r6, #0
  40648e:	fbe1 5603 	umlal	r5, r6, r1, r3
  406492:	f09c 0f00 	teq	ip, #0
  406496:	bf18      	it	ne
  406498:	f04e 0e01 	orrne.w	lr, lr, #1
  40649c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4064a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4064a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4064a8:	d204      	bcs.n	4064b4 <__aeabi_dmul+0x80>
  4064aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4064ae:	416d      	adcs	r5, r5
  4064b0:	eb46 0606 	adc.w	r6, r6, r6
  4064b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4064b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4064bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4064c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4064c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4064c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4064cc:	bf88      	it	hi
  4064ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4064d2:	d81e      	bhi.n	406512 <__aeabi_dmul+0xde>
  4064d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4064d8:	bf08      	it	eq
  4064da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4064de:	f150 0000 	adcs.w	r0, r0, #0
  4064e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4064e6:	bd70      	pop	{r4, r5, r6, pc}
  4064e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4064ec:	ea46 0101 	orr.w	r1, r6, r1
  4064f0:	ea40 0002 	orr.w	r0, r0, r2
  4064f4:	ea81 0103 	eor.w	r1, r1, r3
  4064f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4064fc:	bfc2      	ittt	gt
  4064fe:	ebd4 050c 	rsbsgt	r5, r4, ip
  406502:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406506:	bd70      	popgt	{r4, r5, r6, pc}
  406508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40650c:	f04f 0e00 	mov.w	lr, #0
  406510:	3c01      	subs	r4, #1
  406512:	f300 80ab 	bgt.w	40666c <__aeabi_dmul+0x238>
  406516:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40651a:	bfde      	ittt	le
  40651c:	2000      	movle	r0, #0
  40651e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  406522:	bd70      	pople	{r4, r5, r6, pc}
  406524:	f1c4 0400 	rsb	r4, r4, #0
  406528:	3c20      	subs	r4, #32
  40652a:	da35      	bge.n	406598 <__aeabi_dmul+0x164>
  40652c:	340c      	adds	r4, #12
  40652e:	dc1b      	bgt.n	406568 <__aeabi_dmul+0x134>
  406530:	f104 0414 	add.w	r4, r4, #20
  406534:	f1c4 0520 	rsb	r5, r4, #32
  406538:	fa00 f305 	lsl.w	r3, r0, r5
  40653c:	fa20 f004 	lsr.w	r0, r0, r4
  406540:	fa01 f205 	lsl.w	r2, r1, r5
  406544:	ea40 0002 	orr.w	r0, r0, r2
  406548:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40654c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406550:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406554:	fa21 f604 	lsr.w	r6, r1, r4
  406558:	eb42 0106 	adc.w	r1, r2, r6
  40655c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406560:	bf08      	it	eq
  406562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406566:	bd70      	pop	{r4, r5, r6, pc}
  406568:	f1c4 040c 	rsb	r4, r4, #12
  40656c:	f1c4 0520 	rsb	r5, r4, #32
  406570:	fa00 f304 	lsl.w	r3, r0, r4
  406574:	fa20 f005 	lsr.w	r0, r0, r5
  406578:	fa01 f204 	lsl.w	r2, r1, r4
  40657c:	ea40 0002 	orr.w	r0, r0, r2
  406580:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406588:	f141 0100 	adc.w	r1, r1, #0
  40658c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406590:	bf08      	it	eq
  406592:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406596:	bd70      	pop	{r4, r5, r6, pc}
  406598:	f1c4 0520 	rsb	r5, r4, #32
  40659c:	fa00 f205 	lsl.w	r2, r0, r5
  4065a0:	ea4e 0e02 	orr.w	lr, lr, r2
  4065a4:	fa20 f304 	lsr.w	r3, r0, r4
  4065a8:	fa01 f205 	lsl.w	r2, r1, r5
  4065ac:	ea43 0302 	orr.w	r3, r3, r2
  4065b0:	fa21 f004 	lsr.w	r0, r1, r4
  4065b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4065b8:	fa21 f204 	lsr.w	r2, r1, r4
  4065bc:	ea20 0002 	bic.w	r0, r0, r2
  4065c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4065c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4065c8:	bf08      	it	eq
  4065ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4065ce:	bd70      	pop	{r4, r5, r6, pc}
  4065d0:	f094 0f00 	teq	r4, #0
  4065d4:	d10f      	bne.n	4065f6 <__aeabi_dmul+0x1c2>
  4065d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4065da:	0040      	lsls	r0, r0, #1
  4065dc:	eb41 0101 	adc.w	r1, r1, r1
  4065e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4065e4:	bf08      	it	eq
  4065e6:	3c01      	subeq	r4, #1
  4065e8:	d0f7      	beq.n	4065da <__aeabi_dmul+0x1a6>
  4065ea:	ea41 0106 	orr.w	r1, r1, r6
  4065ee:	f095 0f00 	teq	r5, #0
  4065f2:	bf18      	it	ne
  4065f4:	4770      	bxne	lr
  4065f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4065fa:	0052      	lsls	r2, r2, #1
  4065fc:	eb43 0303 	adc.w	r3, r3, r3
  406600:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406604:	bf08      	it	eq
  406606:	3d01      	subeq	r5, #1
  406608:	d0f7      	beq.n	4065fa <__aeabi_dmul+0x1c6>
  40660a:	ea43 0306 	orr.w	r3, r3, r6
  40660e:	4770      	bx	lr
  406610:	ea94 0f0c 	teq	r4, ip
  406614:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406618:	bf18      	it	ne
  40661a:	ea95 0f0c 	teqne	r5, ip
  40661e:	d00c      	beq.n	40663a <__aeabi_dmul+0x206>
  406620:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406624:	bf18      	it	ne
  406626:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40662a:	d1d1      	bne.n	4065d0 <__aeabi_dmul+0x19c>
  40662c:	ea81 0103 	eor.w	r1, r1, r3
  406630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406634:	f04f 0000 	mov.w	r0, #0
  406638:	bd70      	pop	{r4, r5, r6, pc}
  40663a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40663e:	bf06      	itte	eq
  406640:	4610      	moveq	r0, r2
  406642:	4619      	moveq	r1, r3
  406644:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406648:	d019      	beq.n	40667e <__aeabi_dmul+0x24a>
  40664a:	ea94 0f0c 	teq	r4, ip
  40664e:	d102      	bne.n	406656 <__aeabi_dmul+0x222>
  406650:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406654:	d113      	bne.n	40667e <__aeabi_dmul+0x24a>
  406656:	ea95 0f0c 	teq	r5, ip
  40665a:	d105      	bne.n	406668 <__aeabi_dmul+0x234>
  40665c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406660:	bf1c      	itt	ne
  406662:	4610      	movne	r0, r2
  406664:	4619      	movne	r1, r3
  406666:	d10a      	bne.n	40667e <__aeabi_dmul+0x24a>
  406668:	ea81 0103 	eor.w	r1, r1, r3
  40666c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406670:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406678:	f04f 0000 	mov.w	r0, #0
  40667c:	bd70      	pop	{r4, r5, r6, pc}
  40667e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406682:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406686:	bd70      	pop	{r4, r5, r6, pc}

00406688 <__aeabi_ddiv>:
  406688:	b570      	push	{r4, r5, r6, lr}
  40668a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40668e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406692:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406696:	bf1d      	ittte	ne
  406698:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40669c:	ea94 0f0c 	teqne	r4, ip
  4066a0:	ea95 0f0c 	teqne	r5, ip
  4066a4:	f000 f8a7 	bleq	4067f6 <__aeabi_ddiv+0x16e>
  4066a8:	eba4 0405 	sub.w	r4, r4, r5
  4066ac:	ea81 0e03 	eor.w	lr, r1, r3
  4066b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4066b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4066b8:	f000 8088 	beq.w	4067cc <__aeabi_ddiv+0x144>
  4066bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4066c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4066c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4066c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4066cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4066d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4066d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4066d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4066dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4066e0:	429d      	cmp	r5, r3
  4066e2:	bf08      	it	eq
  4066e4:	4296      	cmpeq	r6, r2
  4066e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4066ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4066ee:	d202      	bcs.n	4066f6 <__aeabi_ddiv+0x6e>
  4066f0:	085b      	lsrs	r3, r3, #1
  4066f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4066f6:	1ab6      	subs	r6, r6, r2
  4066f8:	eb65 0503 	sbc.w	r5, r5, r3
  4066fc:	085b      	lsrs	r3, r3, #1
  4066fe:	ea4f 0232 	mov.w	r2, r2, rrx
  406702:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  406706:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40670a:	ebb6 0e02 	subs.w	lr, r6, r2
  40670e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406712:	bf22      	ittt	cs
  406714:	1ab6      	subcs	r6, r6, r2
  406716:	4675      	movcs	r5, lr
  406718:	ea40 000c 	orrcs.w	r0, r0, ip
  40671c:	085b      	lsrs	r3, r3, #1
  40671e:	ea4f 0232 	mov.w	r2, r2, rrx
  406722:	ebb6 0e02 	subs.w	lr, r6, r2
  406726:	eb75 0e03 	sbcs.w	lr, r5, r3
  40672a:	bf22      	ittt	cs
  40672c:	1ab6      	subcs	r6, r6, r2
  40672e:	4675      	movcs	r5, lr
  406730:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406734:	085b      	lsrs	r3, r3, #1
  406736:	ea4f 0232 	mov.w	r2, r2, rrx
  40673a:	ebb6 0e02 	subs.w	lr, r6, r2
  40673e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406742:	bf22      	ittt	cs
  406744:	1ab6      	subcs	r6, r6, r2
  406746:	4675      	movcs	r5, lr
  406748:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40674c:	085b      	lsrs	r3, r3, #1
  40674e:	ea4f 0232 	mov.w	r2, r2, rrx
  406752:	ebb6 0e02 	subs.w	lr, r6, r2
  406756:	eb75 0e03 	sbcs.w	lr, r5, r3
  40675a:	bf22      	ittt	cs
  40675c:	1ab6      	subcs	r6, r6, r2
  40675e:	4675      	movcs	r5, lr
  406760:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406764:	ea55 0e06 	orrs.w	lr, r5, r6
  406768:	d018      	beq.n	40679c <__aeabi_ddiv+0x114>
  40676a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40676e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406772:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406776:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40677a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40677e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406782:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406786:	d1c0      	bne.n	40670a <__aeabi_ddiv+0x82>
  406788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40678c:	d10b      	bne.n	4067a6 <__aeabi_ddiv+0x11e>
  40678e:	ea41 0100 	orr.w	r1, r1, r0
  406792:	f04f 0000 	mov.w	r0, #0
  406796:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40679a:	e7b6      	b.n	40670a <__aeabi_ddiv+0x82>
  40679c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4067a0:	bf04      	itt	eq
  4067a2:	4301      	orreq	r1, r0
  4067a4:	2000      	moveq	r0, #0
  4067a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4067aa:	bf88      	it	hi
  4067ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4067b0:	f63f aeaf 	bhi.w	406512 <__aeabi_dmul+0xde>
  4067b4:	ebb5 0c03 	subs.w	ip, r5, r3
  4067b8:	bf04      	itt	eq
  4067ba:	ebb6 0c02 	subseq.w	ip, r6, r2
  4067be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4067c2:	f150 0000 	adcs.w	r0, r0, #0
  4067c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4067ca:	bd70      	pop	{r4, r5, r6, pc}
  4067cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4067d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4067d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4067d8:	bfc2      	ittt	gt
  4067da:	ebd4 050c 	rsbsgt	r5, r4, ip
  4067de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4067e2:	bd70      	popgt	{r4, r5, r6, pc}
  4067e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4067e8:	f04f 0e00 	mov.w	lr, #0
  4067ec:	3c01      	subs	r4, #1
  4067ee:	e690      	b.n	406512 <__aeabi_dmul+0xde>
  4067f0:	ea45 0e06 	orr.w	lr, r5, r6
  4067f4:	e68d      	b.n	406512 <__aeabi_dmul+0xde>
  4067f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4067fa:	ea94 0f0c 	teq	r4, ip
  4067fe:	bf08      	it	eq
  406800:	ea95 0f0c 	teqeq	r5, ip
  406804:	f43f af3b 	beq.w	40667e <__aeabi_dmul+0x24a>
  406808:	ea94 0f0c 	teq	r4, ip
  40680c:	d10a      	bne.n	406824 <__aeabi_ddiv+0x19c>
  40680e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406812:	f47f af34 	bne.w	40667e <__aeabi_dmul+0x24a>
  406816:	ea95 0f0c 	teq	r5, ip
  40681a:	f47f af25 	bne.w	406668 <__aeabi_dmul+0x234>
  40681e:	4610      	mov	r0, r2
  406820:	4619      	mov	r1, r3
  406822:	e72c      	b.n	40667e <__aeabi_dmul+0x24a>
  406824:	ea95 0f0c 	teq	r5, ip
  406828:	d106      	bne.n	406838 <__aeabi_ddiv+0x1b0>
  40682a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40682e:	f43f aefd 	beq.w	40662c <__aeabi_dmul+0x1f8>
  406832:	4610      	mov	r0, r2
  406834:	4619      	mov	r1, r3
  406836:	e722      	b.n	40667e <__aeabi_dmul+0x24a>
  406838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40683c:	bf18      	it	ne
  40683e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406842:	f47f aec5 	bne.w	4065d0 <__aeabi_dmul+0x19c>
  406846:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40684a:	f47f af0d 	bne.w	406668 <__aeabi_dmul+0x234>
  40684e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406852:	f47f aeeb 	bne.w	40662c <__aeabi_dmul+0x1f8>
  406856:	e712      	b.n	40667e <__aeabi_dmul+0x24a>

00406858 <__gedf2>:
  406858:	f04f 3cff 	mov.w	ip, #4294967295
  40685c:	e006      	b.n	40686c <__cmpdf2+0x4>
  40685e:	bf00      	nop

00406860 <__ledf2>:
  406860:	f04f 0c01 	mov.w	ip, #1
  406864:	e002      	b.n	40686c <__cmpdf2+0x4>
  406866:	bf00      	nop

00406868 <__cmpdf2>:
  406868:	f04f 0c01 	mov.w	ip, #1
  40686c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406870:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40687c:	bf18      	it	ne
  40687e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406882:	d01b      	beq.n	4068bc <__cmpdf2+0x54>
  406884:	b001      	add	sp, #4
  406886:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40688a:	bf0c      	ite	eq
  40688c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406890:	ea91 0f03 	teqne	r1, r3
  406894:	bf02      	ittt	eq
  406896:	ea90 0f02 	teqeq	r0, r2
  40689a:	2000      	moveq	r0, #0
  40689c:	4770      	bxeq	lr
  40689e:	f110 0f00 	cmn.w	r0, #0
  4068a2:	ea91 0f03 	teq	r1, r3
  4068a6:	bf58      	it	pl
  4068a8:	4299      	cmppl	r1, r3
  4068aa:	bf08      	it	eq
  4068ac:	4290      	cmpeq	r0, r2
  4068ae:	bf2c      	ite	cs
  4068b0:	17d8      	asrcs	r0, r3, #31
  4068b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4068b6:	f040 0001 	orr.w	r0, r0, #1
  4068ba:	4770      	bx	lr
  4068bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4068c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4068c4:	d102      	bne.n	4068cc <__cmpdf2+0x64>
  4068c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4068ca:	d107      	bne.n	4068dc <__cmpdf2+0x74>
  4068cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4068d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4068d4:	d1d6      	bne.n	406884 <__cmpdf2+0x1c>
  4068d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4068da:	d0d3      	beq.n	406884 <__cmpdf2+0x1c>
  4068dc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4068e0:	4770      	bx	lr
  4068e2:	bf00      	nop

004068e4 <__aeabi_cdrcmple>:
  4068e4:	4684      	mov	ip, r0
  4068e6:	4610      	mov	r0, r2
  4068e8:	4662      	mov	r2, ip
  4068ea:	468c      	mov	ip, r1
  4068ec:	4619      	mov	r1, r3
  4068ee:	4663      	mov	r3, ip
  4068f0:	e000      	b.n	4068f4 <__aeabi_cdcmpeq>
  4068f2:	bf00      	nop

004068f4 <__aeabi_cdcmpeq>:
  4068f4:	b501      	push	{r0, lr}
  4068f6:	f7ff ffb7 	bl	406868 <__cmpdf2>
  4068fa:	2800      	cmp	r0, #0
  4068fc:	bf48      	it	mi
  4068fe:	f110 0f00 	cmnmi.w	r0, #0
  406902:	bd01      	pop	{r0, pc}

00406904 <__aeabi_dcmpeq>:
  406904:	f84d ed08 	str.w	lr, [sp, #-8]!
  406908:	f7ff fff4 	bl	4068f4 <__aeabi_cdcmpeq>
  40690c:	bf0c      	ite	eq
  40690e:	2001      	moveq	r0, #1
  406910:	2000      	movne	r0, #0
  406912:	f85d fb08 	ldr.w	pc, [sp], #8
  406916:	bf00      	nop

00406918 <__aeabi_dcmplt>:
  406918:	f84d ed08 	str.w	lr, [sp, #-8]!
  40691c:	f7ff ffea 	bl	4068f4 <__aeabi_cdcmpeq>
  406920:	bf34      	ite	cc
  406922:	2001      	movcc	r0, #1
  406924:	2000      	movcs	r0, #0
  406926:	f85d fb08 	ldr.w	pc, [sp], #8
  40692a:	bf00      	nop

0040692c <__aeabi_dcmple>:
  40692c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406930:	f7ff ffe0 	bl	4068f4 <__aeabi_cdcmpeq>
  406934:	bf94      	ite	ls
  406936:	2001      	movls	r0, #1
  406938:	2000      	movhi	r0, #0
  40693a:	f85d fb08 	ldr.w	pc, [sp], #8
  40693e:	bf00      	nop

00406940 <__aeabi_dcmpge>:
  406940:	f84d ed08 	str.w	lr, [sp, #-8]!
  406944:	f7ff ffce 	bl	4068e4 <__aeabi_cdrcmple>
  406948:	bf94      	ite	ls
  40694a:	2001      	movls	r0, #1
  40694c:	2000      	movhi	r0, #0
  40694e:	f85d fb08 	ldr.w	pc, [sp], #8
  406952:	bf00      	nop

00406954 <__aeabi_dcmpgt>:
  406954:	f84d ed08 	str.w	lr, [sp, #-8]!
  406958:	f7ff ffc4 	bl	4068e4 <__aeabi_cdrcmple>
  40695c:	bf34      	ite	cc
  40695e:	2001      	movcc	r0, #1
  406960:	2000      	movcs	r0, #0
  406962:	f85d fb08 	ldr.w	pc, [sp], #8
  406966:	bf00      	nop

00406968 <__aeabi_dcmpun>:
  406968:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40696c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406970:	d102      	bne.n	406978 <__aeabi_dcmpun+0x10>
  406972:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406976:	d10a      	bne.n	40698e <__aeabi_dcmpun+0x26>
  406978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40697c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406980:	d102      	bne.n	406988 <__aeabi_dcmpun+0x20>
  406982:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406986:	d102      	bne.n	40698e <__aeabi_dcmpun+0x26>
  406988:	f04f 0000 	mov.w	r0, #0
  40698c:	4770      	bx	lr
  40698e:	f04f 0001 	mov.w	r0, #1
  406992:	4770      	bx	lr

00406994 <__aeabi_d2iz>:
  406994:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406998:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40699c:	d215      	bcs.n	4069ca <__aeabi_d2iz+0x36>
  40699e:	d511      	bpl.n	4069c4 <__aeabi_d2iz+0x30>
  4069a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4069a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4069a8:	d912      	bls.n	4069d0 <__aeabi_d2iz+0x3c>
  4069aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4069ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4069b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4069b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4069ba:	fa23 f002 	lsr.w	r0, r3, r2
  4069be:	bf18      	it	ne
  4069c0:	4240      	negne	r0, r0
  4069c2:	4770      	bx	lr
  4069c4:	f04f 0000 	mov.w	r0, #0
  4069c8:	4770      	bx	lr
  4069ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4069ce:	d105      	bne.n	4069dc <__aeabi_d2iz+0x48>
  4069d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4069d4:	bf08      	it	eq
  4069d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4069da:	4770      	bx	lr
  4069dc:	f04f 0000 	mov.w	r0, #0
  4069e0:	4770      	bx	lr
  4069e2:	bf00      	nop

004069e4 <sysfont_glyphs>:
	...
  406a04:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  406a14:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  406a24:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  406a3c:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  406a4c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  406a5c:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  406a74:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  406a84:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  406a94:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  406aac:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  406ac8:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406ad8:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  406ae8:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  406af8:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  406b20:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406b48:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  406b58:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  406b7c:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  406b8c:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  406b9c:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  406bac:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  406bc4:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  406bd4:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  406be4:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  406bfc:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  406c0c:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  406c1c:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  406c34:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406c44:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  406c54:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  406c6c:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  406c7c:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  406c8c:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  406ca4:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  406cb4:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  406cc4:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  406ce0:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  406cf0:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  406d00:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  406d1c:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  406d34:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406d4c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406d5c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406d6c:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406d84:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406d94:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406da4:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406dbc:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406dcc:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406ddc:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406df4:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406e04:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406e14:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406e2c:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406e3c:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406e4c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  406e64:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406e74:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406e84:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  406e9c:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  406eac:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  406ebc:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  406ed4:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  406ee4:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  406ef4:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  406f0c:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406f1c:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  406f2c:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  406f44:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406f54:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  406f64:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  406f7c:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  406f8c:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406f9c:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  406fb4:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  406fc4:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  406fd4:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  406fec:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  406ffc:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  40700c:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  407024:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  407034:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  407044:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  40705c:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  40706c:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  40707c:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  407094:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  4070a4:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  4070b4:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  4070dc:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  4070ec:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  407108:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  407120:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  407130:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  407140:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  407158:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  407168:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  407178:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  407190:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  4071a0:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  4071b0:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  4071c0:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  4071d0:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  4071e0:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  4071f0:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  407200:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  407210:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  407220:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  407238:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  407248:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  407258:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  407274:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  407290:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  4072ac:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  4072bc:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  4072cc:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  4072e4:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  407300:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  40731c:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  407338:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  407354:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  407370:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  40738c:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  4073a8:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  4073b8:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  4073c8:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  4073d8:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4073e8:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4073f8:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  407408:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  407418:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  407428:	0000 0000 07e2 0000 0003 0000 0013 0000     ................
  407438:	000c 0000 000f 0000 002d 0000 0001 0000     ........-.......
  407448:	6425 253a 3a64 6425 0000 0000               %d:%d:%d....

00407454 <_global_impure_ptr>:
  407454:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  407464:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  407474:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407484:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407494:	296c 0000 0030 0000                         l)..0...

0040749c <blanks.7223>:
  40749c:	2020 2020 2020 2020 2020 2020 2020 2020                     

004074ac <zeroes.7224>:
  4074ac:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4074bc:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  4074cc:	0000 0000                                   ....

004074d0 <__mprec_bigtens>:
  4074d0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4074e0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4074f0:	bf3c 7f73 4fdd 7515                         <.s..O.u

004074f8 <__mprec_tens>:
  4074f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  407508:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  407518:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  407528:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  407538:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407548:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407558:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  407568:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  407578:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  407588:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  407598:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4075a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4075b8:	9db4 79d9 7843 44ea                         ...yCx.D

004075c0 <p05.6055>:
  4075c0:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  4075d0:	4f50 4953 0058 0000 002e 0000               POSIX.......

004075dc <_ctype_>:
  4075dc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4075ec:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4075fc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40760c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40761c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40762c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40763c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40764c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40765c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004076e0 <_init>:
  4076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4076e2:	bf00      	nop
  4076e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4076e6:	bc08      	pop	{r3}
  4076e8:	469e      	mov	lr, r3
  4076ea:	4770      	bx	lr

004076ec <__init_array_start>:
  4076ec:	00403965 	.word	0x00403965

004076f0 <__frame_dummy_init_array_entry>:
  4076f0:	00400165                                e.@.

004076f4 <_fini>:
  4076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4076f6:	bf00      	nop
  4076f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4076fa:	bc08      	pop	{r3}
  4076fc:	469e      	mov	lr, r3
  4076fe:	4770      	bx	lr

00407700 <__fini_array_start>:
  407700:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 69e4 0040 0e0a 7d20               .....i@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0cac 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	60a9 0040 5c69 0040 0000 0000 75dc 0040     .`@.i\@......u@.
20400954:	75d8 0040 7478 0040 7478 0040 7478 0040     .u@.xt@.xt@.xt@.
20400964:	7478 0040 7478 0040 7478 0040 7478 0040     xt@.xt@.xt@.xt@.
20400974:	7478 0040 7478 0040 ffff ffff ffff ffff     xt@.xt@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
